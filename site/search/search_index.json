{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NetDevOps.it","text":"","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#your-gateway-to-network-automation-excellence","title":"Your Gateway to Network Automation Excellence","text":"<p>Welcome to NetDevOps.it, a hub for network engineers and DevOps enthusiasts seeking to elevate their network automation skills. This site is dedicated to sharing knowledge, tools, and insights for mastering the art of Network Development Operations.</p> <p>Note: This site is under construction. New content is being added regularly, but some sections may not be fully operational yet.</p>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#what-is-netdevops","title":"What is NetDevOps?","text":"<p>NetDevOps is an approach that brings modern DevOps principles and practices to network operations. It aims to improve agility, automation, and collaboration in network management by leveraging tools and methodologies commonly used in software development.</p> <p>In traditional network operations, changes are often manual, error-prone, and slow. NetDevOps introduces automation, continuous integration/continuous deployment (CI/CD), and version control to enhance efficiency, consistency, and scalability.</p>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#key-principles-of-netdevops","title":"Key Principles of NetDevOps","text":"<ol> <li> <p>Automation    Automate repetitive tasks such as configuration management, testing, and deployment to reduce human errors and increase operational efficiency.</p> </li> <li> <p>Infrastructure as Code (IaC)    Define network infrastructure using code for consistency and repeatability. Popular tools include Ansible, Terraform, and Python.</p> </li> <li> <p>Continuous Integration/Continuous Deployment (CI/CD)    Implement pipelines to validate and deploy network changes automatically using tools like GitLab CI/CD, Jenkins, and GitHub Actions.</p> </li> <li> <p>Collaboration    Foster cross-functional teamwork between network engineers, developers, and operations using version control systems like Git.</p> </li> <li> <p>Monitoring and Feedback    Integrate telemetry and monitoring solutions (e.g., Prometheus, Grafana, NetBox) for real-time insights into network performance.</p> </li> </ol>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#benefits-of-netdevops","title":"Benefits of NetDevOps","text":"<ul> <li>Increased Agility: Faster deployment of network changes and new services</li> <li>Improved Reliability: Reduced downtime through automation and proactive monitoring</li> <li>Enhanced Scalability: Manage large-scale networks with consistent practices</li> <li>Cost Efficiency: Lower manual labor and operational overhead</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<p>NetDevOps.it is more than just a blog \u2014 it's a comprehensive resource library for network engineers. Here's what you can expect:</p>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#ansible-roles-and-collections","title":"\ud83d\udee0\ufe0f Ansible Roles and Collections","text":"<ul> <li>Ready-to-use Ansible roles for common network automation tasks</li> <li>Custom collections to accelerate your automation projects</li> <li>Best practices and patterns for writing maintainable automation code</li> <li>Examples for Cisco IOS, Arista, Nexus, and other network platforms</li> </ul> <p>Available Roles:</p> <ul> <li>Ansible Role: GitLab Docker - Deploy GitLab CE with Docker</li> <li>Ansible Role: AWX Docker - Deploy AWX/Ansible Tower with Docker</li> <li>Ansible Role: Nautobot Docker - Deploy Nautobot with Docker</li> <li>Ansible Role: Nginx Docker - Deploy Nginx with Docker</li> <li>Ansible Role: Docker - Install and configure Docker</li> <li>Ansible Role: SWAG Docker - Deploy SWAG (Secure Web Application Gateway)</li> </ul> <p>Collections and Resources:</p> <ul> <li>Ansible Roles and Collections Overview - Complete guide to available automation resources</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#step-by-step-tutorials","title":"\ud83d\udcda Step-by-Step Tutorials","text":"<ul> <li>Ansible fundamentals - from basic concepts to advanced techniques</li> <li>Network automation workflows - practical examples you can implement today</li> <li>CI/CD pipelines - integrating automation into your development process</li> <li>Infrastructure as Code - managing network configurations with version control</li> </ul> <p>Available Tutorials:</p> <ul> <li>Ansible Tutorial 1: Concepts - Introduction to Ansible basics</li> <li>Ansible Tutorial 2: Modules - Working with Ansible modules</li> <li>Ansible Tutorial 3: Variables and Facts - Using variables and gathering facts</li> <li>Ansible Cisco NAPALM Diff - Configuration comparison with NAPALM</li> <li>Git Basics - Version control fundamentals</li> <li>Linux Basics - Essential Linux commands and concepts</li> <li>Vagrant Install - Setting up Vagrant for development</li> <li>Synology Install Docker Compose - Docker on Synology NAS</li> <li>Enable WSL on Windows - Windows Subsystem for Linux setup</li> </ul> <p>Tutorials Overview:</p> <ul> <li>Tutorials Index - Complete list of available tutorials</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#nautobot-integration","title":"\ud83c\udfd7\ufe0f Nautobot Integration","text":"<ul> <li>Single Source of Truth (SSoT) strategies for network automation</li> <li>Dynamic inventory management with Nautobot IPAM</li> <li>Custom jobs and workflows to streamline network operations</li> <li>Integration patterns with Ansible and other automation tools</li> </ul> <p>Nautobot Resources: - Nautobot as SSoT/CMDB - Comprehensive guide to using Nautobot - Docker Container: Nautobot - Nautobot container deployment</p>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#docker-images-and-containers","title":"\ud83d\udc33 Docker Images and Containers","text":"<ul> <li>Pre-built automation environments to speed up your development</li> <li>Containerized tools for consistent deployment across environments</li> <li>CI/CD ready images for automated testing and deployment</li> </ul> <p>Docker Resources: - Docker Images Overview - Complete guide to available Docker images - Docker Container: Nautobot - Nautobot container deployment</p>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#sso-and-authentication-solutions","title":"\ud83d\udd10 SSO and Authentication Solutions","text":"<ul> <li>Identity management for network automation platforms</li> <li>Secure access patterns for enterprise environments</li> <li>Integration guides for popular SSO providers</li> </ul> <p>SSO Resources: - SSO Solutions - Single Sign-On implementation guide</p>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#blog-and-insights","title":"\ud83d\udcd6 Blog and Insights","text":"<ul> <li>Real-world project lessons and case studies</li> <li>Tool comparisons and recommendations</li> <li>Industry trends and best practices</li> <li>Community insights and collaboration opportunities</li> </ul> <p>Latest Blog Posts:</p> <ul> <li>Nautobot Docker Apps - Deploying applications with Nautobot</li> <li>Getting Started with Network Automation - Beginner's guide to network automation</li> <li>Netdata Monitoring System - Real-time monitoring solution</li> </ul> <p>Tool Reviews and Guides:</p> <ul> <li>Ansible - Configuration management and automation</li> <li>Terraform - Infrastructure as Code</li> <li>OpenTofu - Open source Terraform alternative</li> <li>SaltStack - Configuration management platform</li> <li>Nornir - Python-based automation framework</li> <li>pyATS - Cisco's network testing framework</li> <li>Jenkins - CI/CD automation server</li> <li>GitLab CI/CD - GitLab's CI/CD platform</li> <li>GitHub Actions - GitHub's CI/CD platform</li> <li>Prometheus - Monitoring and alerting</li> <li>Grafana - Data visualization and analytics</li> <li>InfluxDB - Time series database</li> <li>CloudFormation - AWS infrastructure as code</li> </ul> <p>Blog Index:</p> <ul> <li>Blog Overview - Complete blog archive</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#courses-and-training","title":"\ud83c\udf93 Courses and Training","text":"<ul> <li>Structured learning paths for network automation</li> <li>Hands-on workshops and exercises</li> <li>Certification preparation resources</li> <li>Skill development roadmaps</li> </ul> <p>Available Courses:</p> <ul> <li>Courses Overview - Available training programs</li> <li>Courses (Dutch) - Training programs in Dutch</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#ai-in-networking","title":"\ud83e\udd16 AI in Networking","text":"<ul> <li>Artificial Intelligence applications in network automation</li> <li>Machine Learning for network optimization</li> <li>AI-powered tools and platforms</li> </ul> <p>AI Resources:</p> <ul> <li>AI in Networking - Artificial Intelligence applications in network automation</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#common-netdevops-tools","title":"Common NetDevOps Tools","text":"Category Tools Configuration Management Ansible, SaltStack, Nornir CI/CD Pipelines Jenkins, GitLab CI/CD, GitHub Actions Infrastructure as Code Terraform, OpenTofu, CloudFormation Network Automation Netmiko, NAPALM, pyATS Monitoring &amp; Telemetry Prometheus, Grafana, InfluxDB Version Control Git, GitHub, GitLab","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#how-to-get-started-with-netdevops","title":"How to Get Started with NetDevOps","text":"<ol> <li>Learn the Fundamentals: Understand automation tools and scripting languages (e.g., Python)</li> <li>Use Version Control: Start using Git for tracking changes and collaboration</li> <li>Automate Small Tasks: Begin by automating simple tasks such as configuration backups</li> <li>Implement CI/CD Pipelines: Gradually introduce automation pipelines to your network operations</li> <li>Leverage Infrastructure as Code: Define and manage your network infrastructure using code</li> </ol>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#about-me","title":"About Me","text":"<p>Hi, I'm Bart Smeding \u2014 a passionate Network Automation Solutions Architect with years of experience helping companies transform their network operations. My mission is to guide organizations on their journey from zero to hero in network automation.</p> <p>I specialize in: - Blueprint Strategies: Crafting tailored automation roadmaps - Infrastructure Setup: Deploying the necessary tools and platforms - Brownfield Onboarding: Seamlessly integrating existing environments - Device Deployment: Automating network device rollouts - 3rd-Party Tool Integration: Bridging the gap between diverse systems - Engineer Enablement: Empowering in-house teams with education and resources to extend and sustain the automation framework</p> <p>All solutions are built with a preference for open-source tools, custom scripts, and collaborative learning to ensure sustainability and adaptability.</p> <p>For more about me, visit my About page or LinkedIn profile.</p>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#quick-navigation","title":"Quick Navigation","text":"","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Ansible Tutorial 1: Concepts</li> <li>Git Basics</li> <li>Linux Basics</li> <li>Getting Started with Network Automation</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#automation-tools","title":"\ud83d\udee0\ufe0f Automation Tools","text":"<ul> <li>Ansible Roles and Collections</li> <li>Ansible Tutorials</li> <li>Ansible Tool Guide</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#network-management","title":"\ud83c\udfd7\ufe0f Network Management","text":"<ul> <li>Nautobot SSoT</li> <li>Nautobot Docker Apps</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#container-solutions","title":"\ud83d\udc33 Container Solutions","text":"<ul> <li>Docker Images</li> <li>Docker Container: Nautobot</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#security-authentication","title":"\ud83d\udd10 Security &amp; Authentication","text":"<ul> <li>SSO Solutions</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#blog-insights","title":"\ud83d\udcd6 Blog &amp; Insights","text":"<ul> <li>Blog Index</li> <li>Latest Posts</li> <li>Tool Reviews</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#learning-resources","title":"\ud83c\udf93 Learning Resources","text":"<ul> <li>Courses</li> <li>Tutorials Index</li> <li>AI in Networking</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#about-contact","title":"\ud83d\udc64 About &amp; Contact","text":"<ul> <li>About Bart Smeding</li> <li>LinkedIn Profile</li> </ul>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#lets-connect","title":"Let's Connect","text":"<p>Have questions or want to collaborate? Feel free to reach out or connect with me on LinkedIn.</p>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"#together-lets-build-the-future-of-network-automation","title":"Together, Let's Build the Future of Network Automation","text":"<p>Explore, learn, and automate \u2014 because the future of networking is here, and it's automated.</p>","tags":["netdevops","network automation","devops","ansible","infrastructure","blog","tutorials","sso","docker","about"]},{"location":"PREVIEW_SYSTEM/","title":"Preview System for Draft Blog Posts","text":"<p>This document explains how to use the preview system for testing draft blog posts before publishing them to the main site.</p>"},{"location":"PREVIEW_SYSTEM/#overview","title":"Overview","text":"<p>The preview system allows you to: - Create draft blog posts with <code>draft: true</code> in the front matter - Test them on a separate preview site - Get feedback before publishing - Automatically build and deploy previews via GitHub Actions</p>"},{"location":"PREVIEW_SYSTEM/#quick-start","title":"Quick Start","text":""},{"location":"PREVIEW_SYSTEM/#1-create-a-draft-post","title":"1. Create a Draft Post","text":"<p>Create a new blog post with <code>draft: true</code> in the front matter:</p> <pre><code>---\nauthors: [bsmeding]\ndate: 2025-08-16\ntitle: My New Post (Draft)\ntags: [\"network automation\", \"nautobot\"]\ntoc: true\nlayout: single\ncomments: true\ndraft: true  # This marks it as a draft\n---\n</code></pre>"},{"location":"PREVIEW_SYSTEM/#2-set-up-preview-branch","title":"2. Set Up Preview Branch","text":"<pre><code># Navigate to the repository root\ncd bsmeding.github.io\n\n# Create and switch to preview branch\n./scripts/preview-branch.sh create\n</code></pre>"},{"location":"PREVIEW_SYSTEM/#3-add-your-draft-posts","title":"3. Add Your Draft Posts","text":"<p>Add your draft posts to the <code>docs/blog/posts/</code> directory and commit them:</p> <pre><code>git add .\ngit commit -m \"Add draft posts\"\ngit push origin preview\n</code></pre>"},{"location":"PREVIEW_SYSTEM/#4-view-preview","title":"4. View Preview","text":"<p>The preview will be automatically built and deployed to: - Preview Branch: https://bsmeding.github.io/bsmeding.github.io/preview/ - Pull Requests: https://bsmeding.github.io/bsmeding.github.io/pr-{PR_NUMBER}/</p>"},{"location":"PREVIEW_SYSTEM/#workflow-commands","title":"Workflow Commands","text":""},{"location":"PREVIEW_SYSTEM/#create-preview-branch","title":"Create Preview Branch","text":"<p><pre><code>./scripts/preview-branch.sh create\n</code></pre> Creates a new <code>preview</code> branch from <code>main</code> and pushes it to remote.</p>"},{"location":"PREVIEW_SYSTEM/#update-preview","title":"Update Preview","text":"<p><pre><code>./scripts/preview-branch.sh update\n</code></pre> Updates the preview branch with latest changes from main and commits any local changes.</p>"},{"location":"PREVIEW_SYSTEM/#publish-drafts","title":"Publish Drafts","text":"<p><pre><code>./scripts/preview-branch.sh publish\n</code></pre> Removes the <code>draft: true</code> flag from all draft posts and merges them to main.</p>"},{"location":"PREVIEW_SYSTEM/#check-status","title":"Check Status","text":"<p><pre><code>./scripts/preview-branch.sh status\n</code></pre> Shows current branch status, uncommitted changes, and draft files.</p>"},{"location":"PREVIEW_SYSTEM/#clean-up","title":"Clean Up","text":"<p><pre><code>./scripts/preview-branch.sh cleanup\n</code></pre> Deletes the preview branch after publishing.</p>"},{"location":"PREVIEW_SYSTEM/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>The preview system uses GitHub Actions to automatically build and deploy previews:</p>"},{"location":"PREVIEW_SYSTEM/#triggers","title":"Triggers","text":"<ul> <li>Push to <code>preview</code> branch: Builds and deploys to <code>/preview/</code></li> <li>Pull Request to <code>main</code> or <code>preview</code>: Builds and deploys to <code>/pr-{PR_NUMBER}/</code></li> </ul>"},{"location":"PREVIEW_SYSTEM/#workflow-steps","title":"Workflow Steps","text":"<ol> <li>Checkout: Gets the latest code</li> <li>Setup Python: Installs Python 3.11</li> <li>Cache Dependencies: Caches pip dependencies for faster builds</li> <li>Install Dependencies: Installs requirements from <code>requirements.txt</code></li> <li>Build Site: Runs <code>mkdocs build</code></li> <li>Deploy: Deploys to GitHub Pages with appropriate directory</li> </ol>"},{"location":"PREVIEW_SYSTEM/#file-structure","title":"File Structure","text":"<pre><code>bsmeding.github.io/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 preview.yml          # GitHub Actions workflow\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 preview-branch.sh        # Preview management script\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 blog/\n\u2502   \u2502   \u2514\u2500\u2500 posts/\n\u2502   \u2502       \u2514\u2500\u2500 2025/\n\u2502   \u2502           \u251c\u2500\u2500 *draft*.md   # Draft posts\n\u2502   \u2502           \u2514\u2500\u2500 *.md         # Published posts\n\u2502   \u2514\u2500\u2500 PREVIEW_SYSTEM.md        # This documentation\n\u2514\u2500\u2500 mkdocs.yml                   # Site configuration\n</code></pre>"},{"location":"PREVIEW_SYSTEM/#draft-post-guidelines","title":"Draft Post Guidelines","text":""},{"location":"PREVIEW_SYSTEM/#front-matter-requirements","title":"Front Matter Requirements","text":"<pre><code>---\nauthors: [bsmeding]\ndate: YYYY-MM-DD\ntitle: \"Post Title (Draft)\"  # Include (Draft) in title\ntags: [\"tag1\", \"tag2\"]\ntoc: true\nlayout: single\ncomments: true\ndraft: true  # Required for draft posts\n---\n</code></pre>"},{"location":"PREVIEW_SYSTEM/#content-guidelines","title":"Content Guidelines","text":"<ul> <li>Use <code>&lt;!-- more --&gt;</code> tag to separate excerpt</li> <li>Include proper navigation links</li> <li>Test all code examples</li> <li>Ensure proper formatting and structure</li> </ul>"},{"location":"PREVIEW_SYSTEM/#publishing-process","title":"Publishing Process","text":"<ol> <li>Review: Test the preview thoroughly</li> <li>Feedback: Get feedback from team/community</li> <li>Finalize: Make any necessary changes</li> <li>Publish: Run <code>./scripts/preview-branch.sh publish</code></li> <li>Cleanup: Run <code>./scripts/preview-branch.sh cleanup</code></li> </ol>"},{"location":"PREVIEW_SYSTEM/#troubleshooting","title":"Troubleshooting","text":""},{"location":"PREVIEW_SYSTEM/#preview-not-building","title":"Preview Not Building","text":"<ul> <li>Check GitHub Actions tab for build errors</li> <li>Verify all dependencies are in <code>requirements.txt</code></li> <li>Ensure proper YAML syntax in front matter</li> </ul>"},{"location":"PREVIEW_SYSTEM/#draft-posts-not-showing","title":"Draft Posts Not Showing","text":"<ul> <li>Verify <code>draft: true</code> is in front matter</li> <li>Check that posts are in correct directory structure</li> <li>Ensure proper file naming convention</li> </ul>"},{"location":"PREVIEW_SYSTEM/#script-errors","title":"Script Errors","text":"<ul> <li>Make sure you're in the repository root</li> <li>Verify script has execute permissions: <code>chmod +x scripts/preview-branch.sh</code></li> <li>Check that you're on the correct branch</li> </ul>"},{"location":"PREVIEW_SYSTEM/#best-practices","title":"Best Practices","text":"<ol> <li>Always test drafts before publishing</li> <li>Use descriptive commit messages for draft changes</li> <li>Keep preview branch updated with main branch changes</li> <li>Clean up preview branch after publishing</li> <li>Test all links and code examples in preview</li> <li>Get feedback from team members before publishing</li> </ol>"},{"location":"PREVIEW_SYSTEM/#support","title":"Support","text":"<p>If you encounter issues with the preview system: 1. Check the GitHub Actions logs 2. Review this documentation 3. Check the script help: <code>./scripts/preview-branch.sh help</code> 4. Create an issue in the repository</p> <p>Happy drafting! \ud83d\ude80</p>"},{"location":"about-bart-smeding/","title":"Who is Bart Smeding?","text":"","tags":["about","profile","automation"]},{"location":"about-bart-smeding/#network-and-infrastructure-automation-specialist","title":"Network and Infrastructure Automation Specialist","text":"<p>Bart Smeding is a seasoned network and infrastructure automation specialist with over 25 years of experience in Microsoft infrastructure and enterprise/datacenter networks, and more than 10 years in infrastructure automation. He has a deep understanding of Ansible, Network Automation (NA), DevOps, Python, CI/CD, and writing Ansible roles. Bart's expertise lies in building robust automation platforms that seamlessly onboard both brownfield and greenfield networks, ensuring smooth integration with existing systems.</p>","tags":["about","profile","automation"]},{"location":"about-bart-smeding/#core-competencies","title":"Core Competencies","text":"<ul> <li>Ansible</li> <li>Network / Infrastructure Automation (Primary Focus)</li> <li>DevOps</li> <li>Python (Network Programming)</li> <li>CI/CD</li> <li>Writing Ansible Roles</li> </ul>","tags":["about","profile","automation"]},{"location":"about-bart-smeding/#profile-summary","title":"Profile Summary","text":"<p>As a dedicated professional specializing in network and infrastructure automation, I am passionate about helping companies embrace automation to streamline their operations. My expertise lies in building robust automation platforms, seamlessly onboarding both brownfield and greenfield networks, and delivering comprehensive training to ensure teams can independently utilize and expand these platforms.</p>","tags":["about","profile","automation"]},{"location":"about-bart-smeding/#key-projects-and-skills","title":"Key Projects and Skills","text":"<ul> <li>Network &amp; Infrastructure Automation: Implementing automation frameworks for complex network environments.</li> <li>Python for Network Automation: Developing custom Python scripts for orchestration and automation.</li> <li>Ansible Automation: Creating playbooks for Cisco IOS, Arista, and Nexus for inventory, configuration, and compliance.</li> <li>Ansible Development: Writing modules, roles, collections, and custom filters to enhance automation.</li> <li>Ansible AWX Tower: Deploying and managing AWX Tower for GUI management and project sync.</li> <li>Network Upgrades: Executing IOS upgrades with Ansible.</li> <li>Dynamic Inventory Management: Integrating Nautobot IPAM with Ansible for dynamic inventory.</li> <li>Nautobot Job Creation: Simplifying site onboarding, image upgrades, and site testing.</li> <li>ChatOps Integration: Adding chat functionality to Network Operations for data gathering and task execution.</li> <li>Linux Infrastructure Automation: Automating tools/services like Debian, BIND DNS, Nginx, Apache, PowerDNS, and load balancers.</li> <li>GitLab CI/CD: Implementing and managing CI/CD pipelines to enhance workflows.</li> </ul>","tags":["about","profile","automation"]},{"location":"about-bart-smeding/#technical-skills","title":"Technical Skills","text":"<ul> <li>Network Engineering: Project management, wireless, monitoring, capacity planning, subnetting, IPv4/IPv6, routing/switching, security.</li> <li>Network Automation: Architecting and deploying automated solutions to optimize operations.</li> <li>Certifications: Microsoft infra/security, CCNA, CCNP, Ansible, Git, Kubernetes, AWS.</li> <li>Microsoft Infrastructure &amp; Security: Managing and securing Microsoft environments.</li> <li>Storage Solutions: SAN and iSCSI expertise.</li> <li>Virtualization: Hyper-V clusters and VMware proficiency.</li> <li>Scripting &amp; Programming: Advanced in Python, VB, VBA, PHP, ASP, and PowerShell for automation.</li> </ul> <p>I am eager to bring my expertise to new challenges, driving innovation and efficiency through network and infrastructure automation.</p> <p>Let's connect and explore how I can contribute to your organization's success!</p>","tags":["about","profile","automation"]},{"location":"ansible_roles_and_collections/","title":"Ansible Roles and Collections","text":"<p>I maintain several Ansible roles and collections, primarily for network, cloud, and infrastructure automation. Many are used in demos, labs, or student environments.</p>","tags":["ansible","roles","collections","automation","infrastructure"]},{"location":"ansible_roles_and_collections/#ansible-roles-maintained-by-bart-smeding","title":"Ansible Roles Maintained by Bart Smeding","text":"<p>Below is a list of Ansible roles I maintain, with links to Ansible Galaxy, CI status, and download badges.</p> Role Description CI Status Downloads bsmeding.docker Install Docker on OS level bsmeding.nautobot_docker Install Nautobot SSoT in Docker bsmeding.awx_docker Install Ansible AWX on Docker bsmeding.nginx_docker Install Nginx reverse proxy on Docker bsmeding.webmin Install Webmin on OS level bsmeding.gitlab_docker Install Gitlab CE on Docker","tags":["ansible","roles","collections","automation","infrastructure"]},{"location":"ansible_roles_and_collections/#ansible-collections-maintained-by-bart-smeding","title":"Ansible Collections Maintained by Bart Smeding","text":"<p>I am also working on Ansible collections to group related roles, modules, and plugins for easier reuse and distribution.</p> <p>More information and links to collections will be added here soon!</p>","tags":["ansible","roles","collections","automation","infrastructure"]},{"location":"courses/","title":"Network and infra structure automation courses","text":"<p>We can deliver different kind of courses from starting to expert stages of network and infra automation. It is also possible to fine tune the course so that is meet the business needs</p>"},{"location":"courses_NL/","title":"Dutch courses","text":"<p>Netwerk automation trainingen voor op locatie zijn ook te boeken in het Nederlands.</p> <p>Mocht uw organisatie enkel Nederlands sprekend zijn, is het ook mogelijk om de training op locatie af te nemen. Dit geldt enkel voor de 4-daagse training starten met Netwerk Automation.</p>"},{"location":"courses_NL/#training-overzicht","title":"Training overzicht","text":""},{"location":"courses_NL/#topics","title":"Topics","text":""},{"location":"courses_NL/#dag-indeling","title":"Dag indeling","text":"<p>De dagindeling is ingedeeld in ochtend informatief, training en uitleg en in de middag zijn hands-on workshops waar iedereen aan mee kan doen.</p>"},{"location":"courses_NL/#dag-1","title":"Dag 1","text":""},{"location":"courses_NL/#dag-2","title":"Dag 2","text":""},{"location":"courses_NL/#dag-3","title":"Dag 3","text":""},{"location":"courses_NL/#dag-4","title":"Dag 4","text":""},{"location":"docker_images/","title":"Docker Images","text":"<p>I maintain several Docker images, mostly to run Ansible CI/CD pipelines and network/infrastructure applications with enhancements for my daily work.</p>","tags":["docker","ansible","cicd","automation","infrastructure"]},{"location":"docker_images/#docker-cicd-images","title":"Docker CI/CD Images","text":"<p>These images are designed for testing Ansible playbooks, roles, and more. They are based on various Linux distributions with Ansible and other packages pre-installed, mainly for Network Automation (NetDevOps). For each distro, there is a versionless image that always contains the latest release (e.g., <code>ansible_cicd_debian</code> is the same as <code>ansible_cicd_debian12</code>).</p> <p>Currently installed Python packages for network and CMDB testing: - ansible - cryptography - yamllint - pynautobot - pynetbox - jmespath - netaddr - pywinrm</p> Container CI Status Downloads ansible_cicd_debian11 ansible_cicd_debian12 ansible_cicd_debian ansible_cicd_rockylinux8 ansible_cicd_rockylinux9 ansible_cicd_rockylinux ansible_cicd_ubuntu2004 ansible_cicd_ubuntu2204 ansible_cicd_ubuntu2404 ansible_cicd_ubuntu ansible_cicd_alpine3.20 ansible_cicd_alpine3.21 ansible_cicd_alpine3","tags":["docker","ansible","cicd","automation","infrastructure"]},{"location":"docker_images/#docker-applications","title":"Docker Applications","text":"<p>These images are for running specific applications with enhancements for network automation and infrastructure labs.</p> Container Description CI Status Downloads nautobot Nautobot including plugins and apps","tags":["docker","ansible","cicd","automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/","title":"Nautobot: The Single Source of Truth (SSoT) for Network Automation","text":"<p>Nautobot serves as a single source of truth (SSoT) for managing network infrastructure. It provides a centralized repository for device information, configuration management, compliance checks, automation, and vulnerability reporting. Nautobot can also synchronize with various third-party tools to enhance automation and management.</p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#why-im-so-excited-about-nautobot","title":"Why I'm So Excited About Nautobot","text":"<p>When it comes to network automation, Nautobot is the one platform that has completely changed the way I work. It\u2019s more than just a Source of Truth \u2014 it\u2019s the central automation hub that ties everything together. From configuration generation to compliance, from dynamic job automation to seamless integrations with other tools \u2014 Nautobot does it all. And that\u2019s exactly why I\u2019m such a fan.</p> <p></p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#a-true-single-source-of-truth-ssot","title":"A True Single Source of Truth (SSoT)","text":"<p>Nautobot shines as a Single Source of Truth. I store my entire network inventory in it: devices, interfaces, IPs, VLANs, locations, and more. With this data in one place, I can drive every automation process \u2014 fully based on structured, validated information.</p> <pre><code># Example: Accessing Nautobot device data using GraphQL\nquery = '''\n{\n  devices(name: \"sw-core-01\") {\n    name\n    device_role {\n      name\n    }\n    site {\n      name\n    }\n    interfaces {\n      name\n      description\n    }\n  }\n}\n'''\n</code></pre>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#golden-config-full-configuration-generation-and-push","title":"Golden Config: Full Configuration Generation and Push","text":"<p>One of my favorite plugins is the Golden Config app. It lets me use Jinja2 templates to generate full configurations based on Nautobot data.</p> <p></p> <p>And it doesn\u2019t stop there \u2014 configs can be automatically pushed to devices via the platform.</p> <pre><code>{% for iface in device.interfaces %}\ninterface {{ iface.name }}\n description {{ iface.description | default('N/A') }}\n{% endfor %}\n</code></pre> <p>Let\u2019s say an interface changes: a VLAN is updated, or the description is changed. A JobHook can detect this in real-time and regenerate the appropriate configuration snippet. That config can then be pushed directly to the device \u2014 with no human error and no delay.</p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#compliance-as-code-validate-at-scale","title":"Compliance as Code: Validate at Scale","text":"<p>With compliance enabled, Nautobot can continuously verify if devices are configured according to policy.</p> <p></p> <p>The compliance plugin compares live device configurations with golden standards and clearly shows any mismatches \u2014 per site, per device, per feature.</p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#four-eyes-approval-safe-and-auditable","title":"Four-Eyes Approval: Safe and Auditable","text":"<p>Another powerful feature I rely on is job approvals.</p> <p></p> <p>With the built-in 4-eyes principle, I can require approval before running any job that pushes changes to production. This ensures accountability and meets internal change control policies.</p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#a-modular-app-ecosystem","title":"A Modular App Ecosystem","text":"<p>Nautobot\u2019s app ecosystem is what truly makes it stand out. I use (and build) plugins that expand its functionality far beyond just inventory. Here are a few examples:</p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#firewall-models-app","title":"\ud83d\udd10 Firewall Models App","text":"<p>Define and manage firewall rules, zones, and policies directly in Nautobot.</p> <p></p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#ssot-app","title":"\ud83d\udd04 SSoT App","text":"<p>Sync data to and from tools like ServiceNow, Infoblox, Cisco DNA Center, and vCenter.</p> <pre><code># Example: Job to sync from Infoblox\nresult = sync_infoblox_to_nautobot(commit=True)\n</code></pre> <p></p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#floor-plan-app","title":"\ud83d\uddfa\ufe0f Floor Plan App","text":"<p>Visualize racks, devices, and cable paths on physical layouts.</p> <p></p> <p></p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#custom-jobs","title":"\ud83d\udee0\ufe0f Custom Jobs","text":"<p>Python-based jobs to provision and configure infrastructure:</p> <pre><code># Example: Provision VLANs\ndef provision_vlans(site):\n    vlan_data = get_vlans_for_site(site)\n    for vlan in vlan_data:\n        create_vlan_in_nautobot(vlan)\n</code></pre> <p>All jobs are modular and accessible via the web UI:</p> <p></p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#everything-in-one-platform","title":"Everything in One Platform","text":"<p>That\u2019s what makes Nautobot so powerful: everything is centralized. Documentation, configuration generation, validation, compliance, and integrations \u2014 all in one place.</p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#why-nautobot-is-essential-to-my-workflow","title":"Why Nautobot Is Essential to My Workflow","text":"<p>Since adopting Nautobot, I\u2019ve eliminated dozens of manual scripts, standalone tools, and ad-hoc workflows, Ansible playbooks and Roles. Every automation I build starts with structured data in Nautobot. That\u2019s how I ensure consistency, visibility, and control across my entire infrastructure.</p> <p>Whether you're just getting started with network automation or managing a large-scale enterprise environment \u2014 Nautobot is a gamechanger.</p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#how-nautobot-helps","title":"How Nautobot Helps","text":"<ul> <li>Device Information: Centralized inventory for quick and accurate access.</li> <li>Pushing Configuration: Automate deployment of network configurations.</li> <li>Compliance Checks: Ensure devices adhere to security and operational standards.</li> <li>Automating Device Configuration: Use playbooks and workflows for streamlined provisioning.</li> <li>CVE Vulnerability Reports: Gain insights into potential vulnerabilities.</li> <li>Third-Party Synchronization: Integrate with external systems for extended capabilities.</li> </ul>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"nautobot_the_ultimate_network_cmdb/#supported-third-party-integrations-for-ssot-sync","title":"Supported Third-Party Integrations for SSoT sync","text":"<ul> <li>Cisco ACI, Bootstrap, Citrix ADM, Arista CloudVision, Device42, Cisco DNA Center, Infoblox, IPFabric, Itential, LibreNMS, Cisco Meraki, ServiceNow, Slurpit, SolarWinds</li> </ul> <p>By integrating Nautobot with these tools, organizations achieve greater visibility, operational efficiency, and automation capabilities. </p> <p>Want to see some of the custom jobs and automations I use in practice? \ud83d\udc49 Visit my Nautobot Jobs section or check out my GitHub.</p>","tags":["nautobot","ssot","cmdb","network automation","infrastructure"]},{"location":"netdevops/","title":"What is NetDevOps?","text":"<p>NetDevOps is an approach that brings modern DevOps principles and practices to network operations. It aims to improve agility, automation, and collaboration in network management by leveraging tools and methodologies commonly used in software development.</p> <p>In traditional network operations, changes are often manual, error-prone, and slow. NetDevOps introduces automation, continuous integration/continuous deployment (CI/CD), and version control to enhance efficiency, consistency, and scalability.</p>","tags":["netdevops","devops","network automation","infrastructure","ci/cd"]},{"location":"netdevops/#key-principles-of-netdevops","title":"Key Principles of NetDevOps","text":"<ol> <li>Automation    Automate repetitive tasks such as configuration management, testing, and deployment to reduce human errors and increase operational efficiency.</li> <li>Infrastructure as Code (IaC)    Define network infrastructure using code for consistency and repeatability. Popular tools include Ansible, Terraform, and Python.</li> <li>Continuous Integration/Continuous Deployment (CI/CD)    Implement pipelines to validate and deploy network changes automatically using tools like GitLab CI/CD, Jenkins, and GitHub Actions.</li> <li>Collaboration    Foster cross-functional teamwork between network engineers, developers, and operations using version control systems like Git.</li> <li>Monitoring and Feedback    Integrate telemetry and monitoring solutions (e.g., Prometheus, Grafana, NetBox) for real-time insights into network performance.</li> </ol>","tags":["netdevops","devops","network automation","infrastructure","ci/cd"]},{"location":"netdevops/#benefits-of-netdevops","title":"Benefits of NetDevOps","text":"<ul> <li>Increased Agility: Faster deployment of network changes and new services.</li> <li>Improved Reliability: Reduced downtime through automation and proactive monitoring.</li> <li>Enhanced Scalability: Manage large-scale networks with consistent practices.</li> <li>Cost Efficiency: Lower manual labor and operational overhead.</li> </ul>","tags":["netdevops","devops","network automation","infrastructure","ci/cd"]},{"location":"netdevops/#common-netdevops-tools","title":"Common NetDevOps Tools","text":"Category Tools Configuration Management Ansible, SaltStack, Nornir CI/CD Pipelines Jenkins, GitLab CI/CD, GitHub Actions Infrastructure as Code Terraform, OpenTofu, CloudFormation Network Automation Netmiko, NAPALM, pyATS Monitoring &amp; Telemetry Prometheus, Grafana, InfluxDB Version Control Git, GitHub, GitLab","tags":["netdevops","devops","network automation","infrastructure","ci/cd"]},{"location":"netdevops/#how-to-get-started-with-netdevops","title":"How to Get Started with NetDevOps","text":"<ol> <li>Learn the Fundamentals: Understand automation tools and scripting languages (e.g., Python).</li> <li>Use Version Control: Start using Git for tracking changes and collaboration.</li> <li>Automate Small Tasks: Begin by automating simple tasks such as configuration backups.</li> <li>Implement CI/CD Pipelines: Gradually introduce automation pipelines to your network operations.</li> <li>Leverage Infrastructure as Code: Define and manage your network infrastructure using code.</li> </ol>","tags":["netdevops","devops","network automation","infrastructure","ci/cd"]},{"location":"netdevops/#see-also","title":"See Also","text":"<ul> <li>Nautobot as SSoT/CMDB for Network Automation</li> </ul>","tags":["netdevops","devops","network automation","infrastructure","ci/cd"]},{"location":"privacy/","title":"Privacy Policy","text":"<p>Last updated: January 2025</p> <p>Welcome to NetDevOps.it. We respect your privacy and are committed to protecting your personal data. This privacy policy explains how we collect, use, and safeguard your information when you visit our website.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#information-we-collect","title":"Information We Collect","text":"","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#personal-information","title":"Personal Information","text":"<p>We may collect personal information that you voluntarily provide to us when you: - Contact us through our website - Subscribe to our newsletter - Comment on our blog posts - Participate in our courses or tutorials</p> <p>This may include: - Name and email address - Contact information - Any other information you choose to provide</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#automatically-collected-information","title":"Automatically Collected Information","text":"<p>When you visit our website, we automatically collect certain information about your device, including: - IP address - Browser type and version - Operating system - Pages visited and time spent on each page - Referring website - Date and time of your visit</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#how-we-use-your-information","title":"How We Use Your Information","text":"<p>We use the collected information for the following purposes: - To provide and maintain our website - To improve our content and user experience - To respond to your inquiries and provide customer support - To send newsletters and updates (with your consent) - To analyze website usage and trends - To ensure the security of our website</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#cookies-and-tracking-technologies","title":"Cookies and Tracking Technologies","text":"","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#what-are-cookies","title":"What Are Cookies?","text":"<p>Cookies are small text files that are placed on your device when you visit our website. They help us provide you with a better experience and understand how you use our site.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#types-of-cookies-we-use","title":"Types of Cookies We Use","text":"","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#essential-cookies","title":"Essential Cookies","text":"<p>These cookies are necessary for the website to function properly. They enable basic functions like page navigation and access to secure areas of the website.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#analytics-cookies","title":"Analytics Cookies","text":"<p>We use analytics cookies to understand how visitors interact with our website. This helps us improve our content and user experience.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#functional-cookies","title":"Functional Cookies","text":"<p>These cookies enable enhanced functionality and personalization, such as remembering your preferences and settings.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#marketing-cookies","title":"Marketing Cookies","text":"<p>These cookies are used to track visitors across websites to display relevant advertisements.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#managing-cookies","title":"Managing Cookies","text":"<p>You can control and manage cookies through your browser settings. However, disabling certain cookies may affect the functionality of our website.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#third-party-services","title":"Third-Party Services","text":"<p>We may use third-party services that collect, monitor, and analyze data, including:</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#analytics","title":"Analytics","text":"<ul> <li>Google Analytics: To understand website traffic and user behavior</li> <li>GitHub: For hosting our website and tracking repository statistics</li> </ul>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#content-and-services","title":"Content and Services","text":"<ul> <li>MkDocs: For website documentation and content management</li> <li>Material for MkDocs: For website theming and functionality</li> </ul> <p>These third-party services have their own privacy policies, and we encourage you to review them.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#data-security","title":"Data Security","text":"<p>We implement appropriate security measures to protect your personal information against unauthorized access, alteration, disclosure, or destruction. However, no method of transmission over the internet or electronic storage is 100% secure.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#your-rights","title":"Your Rights","text":"<p>Depending on your location, you may have the following rights regarding your personal data:</p> <ul> <li>Access: Request access to your personal data</li> <li>Rectification: Request correction of inaccurate data</li> <li>Erasure: Request deletion of your personal data</li> <li>Portability: Request transfer of your data to another service</li> <li>Objection: Object to processing of your personal data</li> <li>Withdrawal of Consent: Withdraw consent for data processing</li> </ul> <p>To exercise these rights, please contact us using the information provided below.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#childrens-privacy","title":"Children's Privacy","text":"<p>Our website is not intended for children under the age of 13. We do not knowingly collect personal information from children under 13. If you are a parent or guardian and believe your child has provided us with personal information, please contact us.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#international-data-transfers","title":"International Data Transfers","text":"<p>Your information may be transferred to and processed in countries other than your own. We ensure that such transfers comply with applicable data protection laws.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#changes-to-this-privacy-policy","title":"Changes to This Privacy Policy","text":"<p>We may update this privacy policy from time to time. We will notify you of any changes by posting the new privacy policy on this page and updating the \"Last updated\" date.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#contact-us","title":"Contact Us","text":"<p>If you have any questions about this privacy policy or our data practices, please contact us:</p> <ul> <li>Email: b@rtsmeding.nl</li> <li>Website: https://netdevops.it</li> <li>GitHub: https://github.com/bsmeding/bsmeding.github.io</li> </ul>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"privacy/#legal-basis-for-processing-eu-users","title":"Legal Basis for Processing (EU Users)","text":"<p>If you are located in the European Union, our legal basis for processing your personal data includes: - Consent (for marketing communications) - Legitimate interests (for website analytics and improvement) - Contract performance (for providing requested services)</p> <p>This privacy policy is effective as of the date listed above and applies to all visitors and users of our website.</p>","tags":["privacy","cookies","data-protection","gdpr"]},{"location":"sso/","title":"Single Sign-On (SSO) for Network Automation","text":"<p>Single Sign-On (SSO) is a user authentication process that allows users to access multiple applications with one set of login credentials. SSO is essential for modern network automation, improving security, user experience, and centralized access control.</p>","tags":["sso","single sign-on","ldap","authelia","authentication","ansible","devops"]},{"location":"sso/#what-is-sso","title":"What is SSO?","text":"<p>SSO enables users to log in once and gain access to a variety of systems without being prompted to log in again for each one. It is commonly used in enterprise environments to streamline authentication across web apps, network devices, and automation tools.</p>","tags":["sso","single sign-on","ldap","authelia","authentication","ansible","devops"]},{"location":"sso/#benefits-of-sso","title":"Benefits of SSO","text":"<ul> <li>Centralized authentication: Manage user access in one place (e.g., LDAP, Active Directory)</li> <li>Improved security: Enforce strong password policies and multi-factor authentication</li> <li>Better user experience: Fewer passwords to remember, seamless access to tools</li> <li>Easier compliance: Simplified auditing and access control</li> </ul>","tags":["sso","single sign-on","ldap","authelia","authentication","ansible","devops"]},{"location":"sso/#common-sso-solutions","title":"Common SSO Solutions","text":"<ul> <li>LDAP/Active Directory: The most common backend for SSO in network automation</li> <li>Authelia: Modern open-source SSO and 2FA portal, integrates with Nginx, SWAG, and more</li> <li>SAML/OAuth: Used for web-based SSO with cloud services and enterprise apps</li> </ul>","tags":["sso","single sign-on","ldap","authelia","authentication","ansible","devops"]},{"location":"sso/#sso-in-network-automation","title":"SSO in Network Automation","text":"<p>Many of the roles and solutions on this site support SSO out of the box or via integration:</p> <ul> <li>Nginx Docker: Can be configured as a reverse proxy with LDAP or Authelia SSO (see role doc)</li> <li>SWAG (Secure Web Application Gateway): Supports LDAP and Authelia for SSO (see role doc)</li> <li>GitLab CE Docker: Integrates with LDAP for SSO (see role doc)</li> <li>Nautobot Docker: Supports LDAP authentication for SSO (see role doc)</li> </ul>","tags":["sso","single sign-on","ldap","authelia","authentication","ansible","devops"]},{"location":"sso/#how-to-integrate-sso","title":"How to Integrate SSO","text":"<ol> <li>Set up an LDAP or Authelia server (see tutorials or use a role)</li> <li>Configure your reverse proxy (Nginx, SWAG) to use SSO</li> <li>Enable SSO in your application (GitLab, Nautobot, etc.)</li> <li>Test login and access control</li> </ol>","tags":["sso","single sign-on","ldap","authelia","authentication","ansible","devops"]},{"location":"sso/#related-tutorials-and-docs","title":"Related Tutorials and Docs","text":"<ul> <li>Nginx Docker Role</li> <li>SWAG Docker Role</li> <li>GitLab CE Docker Role</li> <li>Nautobot Docker Role</li> <li>[LDAP/Authelia setup (coming soon)]</li> </ul>","tags":["sso","single sign-on","ldap","authelia","authentication","ansible","devops"]},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tag:about","title":"about","text":"<ul> <li>            About          </li> <li>            Home          </li> </ul>"},{"location":"tags/#tag:actions","title":"actions","text":"<ul> <li>            GitHub Actions Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:ai","title":"ai","text":"<ul> <li>            AI Agents in Network Automation: The Future of Intelligent Networking          </li> </ul>"},{"location":"tags/#tag:ai-agents","title":"ai agents","text":"<ul> <li>            AI Agents in Network Automation: The Future of Intelligent Networking          </li> </ul>"},{"location":"tags/#tag:ansible","title":"ansible","text":"<ul> <li>            Ansible - Network Settings          </li> <li>            Ansible Introduction &amp; Getting Started          </li> <li>            Ansible NAPALM          </li> <li>            Ansible Roles &amp; Collections          </li> <li>            Automate Code Quality: ansible-lint, yaml-lint, and CI/CD Integration          </li> <li>            Automatically push Ansible role to Ansible Galaxy with GitHub Actions          </li> <li>            Create development environment for Ansible roles          </li> <li>            Docker images index          </li> <li>            Getting Started with Ansible Network Automation: A Practical Guide          </li> <li>            Getting Started with Network Automation, the complete guide!          </li> <li>            Home          </li> <li>            Jinja2          </li> <li>            Network Automation Development Setup          </li> <li>            SSO: Introduction          </li> <li>            Tutorials Overview          </li> <li>            bsmeding.swag_docker          </li> </ul>"},{"location":"tags/#tag:ansible-galaxy","title":"ansible galaxy","text":"<ul> <li>            Automatically push Ansible role to Ansible Galaxy with GitHub Actions          </li> <li>            Create development environment for Ansible roles          </li> </ul>"},{"location":"tags/#tag:ansible-lint","title":"ansible-lint","text":"<ul> <li>            Automate Code Quality: ansible-lint, yaml-lint, and CI/CD Integration          </li> </ul>"},{"location":"tags/#tag:api","title":"api","text":"<ul> <li>            APIs in Network Automation          </li> <li>            Nautobot in Action \u2013 Global Series Index          </li> <li>            Nautobot in Action \u2013 Part 7          </li> <li>            Supercharge Network Automation with GraphQL -&gt; One Query to Rule Them All          </li> </ul>"},{"location":"tags/#tag:api-automation","title":"api automation","text":"<ul> <li>            SlurpIT.io          </li> </ul>"},{"location":"tags/#tag:apps","title":"apps","text":"<ul> <li>            Nautobot Docker Images with Pre-Installed Apps          </li> </ul>"},{"location":"tags/#tag:artificial-intelligence","title":"artificial intelligence","text":"<ul> <li>            AI Agents in Network Automation: The Future of Intelligent Networking          </li> </ul>"},{"location":"tags/#tag:authelia","title":"authelia","text":"<ul> <li>            SSO: Introduction          </li> </ul>"},{"location":"tags/#tag:authentication","title":"authentication","text":"<ul> <li>            SSO: Introduction          </li> </ul>"},{"location":"tags/#tag:automation","title":"automation","text":"<ul> <li>            APIs in Network Automation          </li> <li>            AWS CloudFormation Introduction &amp; Getting Started          </li> <li>            About          </li> <li>            Ansible Introduction &amp; Getting Started          </li> <li>            Ansible Roles &amp; Collections          </li> <li>            Automate Code Quality: ansible-lint, yaml-lint, and CI/CD Integration          </li> <li>            Automatically push Ansible role to Ansible Galaxy with GitHub Actions          </li> <li>            Building a Reusable Network Automation Lab with Containerlab          </li> <li>            CI/CD Pipelines for Network Automation: Building Reliable Deployment Workflows          </li> <li>            Docker          </li> <li>            Docker images index          </li> <li>            Getting Started with Ansible Network Automation: A Practical Guide          </li> <li>            GitHub Actions Introduction &amp; Getting Started          </li> <li>            GitLab CI/CD Introduction &amp; Getting Started          </li> <li>            Introduction to NetDevOps: Bridging Network Operations and Development          </li> <li>            Jenkins Introduction &amp; Getting Started          </li> <li>            Jinja2          </li> <li>            Linux Basics for Network Automation          </li> <li>            Nautobot: The Ultimate Network Automation Platform for NetDevOps          </li> <li>            OpenTofu Introduction &amp; Getting Started          </li> <li>            SaltStack Introduction &amp; Getting Started          </li> <li>            Terraform Introduction &amp; Getting Started          </li> <li>            Terraform for Network Infrastructure as Code: A Complete Guide          </li> <li>            Tools Index          </li> <li>            Visual Studio Code for Network Automation          </li> <li>            pyATS Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:aws","title":"aws","text":"<ul> <li>            AWS CloudFormation Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:awx","title":"awx","text":"<ul> <li>            Network Automation Development Setup          </li> </ul>"},{"location":"tags/#tag:base64","title":"base64","text":"<ul> <li>            Base64 Converter          </li> </ul>"},{"location":"tags/#tag:basics","title":"basics","text":"<ul> <li>            Enable Windows Subsystem for Linux          </li> <li>            Linux Basics for Network Automation          </li> <li>            Linux basics          </li> </ul>"},{"location":"tags/#tag:blog","title":"blog","text":"<ul> <li>            Home          </li> </ul>"},{"location":"tags/#tag:change-management","title":"change management","text":"<ul> <li>            Nautobot in Action \u2013 Part 8          </li> </ul>"},{"location":"tags/#tag:ci-cd","title":"ci-cd","text":"<ul> <li>            Automate Code Quality: ansible-lint, yaml-lint, and CI/CD Integration          </li> <li>            CI/CD Pipelines for Network Automation: Building Reliable Deployment Workflows          </li> </ul>"},{"location":"tags/#tag:cicd","title":"ci/cd","text":"<ul> <li>            Automatically push Ansible role to Ansible Galaxy with GitHub Actions          </li> <li>            GitHub Actions Introduction &amp; Getting Started          </li> <li>            GitLab CI/CD Introduction &amp; Getting Started          </li> <li>            Jenkins Introduction &amp; Getting Started          </li> <li>            Nautobot in Action \u2013 Part 8          </li> <li>            What is NetDevOps?          </li> </ul>"},{"location":"tags/#tag:cicd","title":"cicd","text":"<ul> <li>            Docker images index          </li> </ul>"},{"location":"tags/#tag:cisco","title":"cisco","text":"<ul> <li>            pyATS Testing Tutorial          </li> </ul>"},{"location":"tags/#tag:cloud","title":"cloud","text":"<ul> <li>            Terraform for Network Infrastructure as Code: A Complete Guide          </li> </ul>"},{"location":"tags/#tag:cloudformation","title":"cloudformation","text":"<ul> <li>            AWS CloudFormation Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:cmdb","title":"cmdb","text":"<ul> <li>            Nautobot          </li> <li>            Nautobot Docker Images with Pre-Installed Apps          </li> <li>            Nautobot the ultimate network CMDB          </li> </ul>"},{"location":"tags/#tag:code-quality","title":"code-quality","text":"<ul> <li>            Automate Code Quality: ansible-lint, yaml-lint, and CI/CD Integration          </li> </ul>"},{"location":"tags/#tag:collections","title":"collections","text":"<ul> <li>            Ansible Roles &amp; Collections          </li> </ul>"},{"location":"tags/#tag:color","title":"color","text":"<ul> <li>            Color Converter          </li> </ul>"},{"location":"tags/#tag:command-line","title":"command line","text":"<ul> <li>            Linux Basics for Network Automation          </li> </ul>"},{"location":"tags/#tag:comparison","title":"comparison","text":"<ul> <li>            Diff Tool          </li> </ul>"},{"location":"tags/#tag:compliance","title":"compliance","text":"<ul> <li>            Nautobot in Action \u2013 Part 3          </li> <li>            Nautobot in Action \u2013 Part 4          </li> <li>            Nautobot in Action \u2013 Part 6          </li> </ul>"},{"location":"tags/#tag:configuration-management","title":"configuration management","text":"<ul> <li>            Ansible Introduction &amp; Getting Started          </li> <li>            Nautobot in Action \u2013 Part 3          </li> <li>            Nautobot in Action \u2013 Part 4          </li> <li>            SaltStack Introduction &amp; Getting Started          </li> <li>            SlurpIT.io          </li> </ul>"},{"location":"tags/#tag:containerlab","title":"containerlab","text":"<ul> <li>            Building a Reusable Network Automation Lab with Containerlab          </li> <li>            ContainerLab          </li> </ul>"},{"location":"tags/#tag:containers","title":"containers","text":"<ul> <li>            Docker          </li> </ul>"},{"location":"tags/#tag:converter","title":"converter","text":"<ul> <li>            Base64 Converter          </li> <li>            Color Converter          </li> </ul>"},{"location":"tags/#tag:cookies","title":"cookies","text":"<ul> <li>            Privacy Policy          </li> </ul>"},{"location":"tags/#tag:course","title":"course","text":"<ul> <li>            Network Automation Development Setup          </li> </ul>"},{"location":"tags/#tag:cryptography","title":"cryptography","text":"<ul> <li>            Hash Generator          </li> </ul>"},{"location":"tags/#tag:css","title":"css","text":"<ul> <li>            Color Converter          </li> </ul>"},{"location":"tags/#tag:dashboards","title":"dashboards","text":"<ul> <li>            Grafana Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:data-protection","title":"data-protection","text":"<ul> <li>            Privacy Policy          </li> </ul>"},{"location":"tags/#tag:dcim","title":"dcim","text":"<ul> <li>            NetBox          </li> </ul>"},{"location":"tags/#tag:decoding","title":"decoding","text":"<ul> <li>            Base64 Converter          </li> <li>            URL Encoder/Decoder          </li> </ul>"},{"location":"tags/#tag:deployment","title":"deployment","text":"<ul> <li>            Nautobot in Action \u2013 Part 6          </li> </ul>"},{"location":"tags/#tag:developer-tools","title":"developer-tools","text":"<ul> <li>            Web Tools Overview          </li> </ul>"},{"location":"tags/#tag:development","title":"development","text":"<ul> <li>            Visual Studio Code for Network Automation          </li> </ul>"},{"location":"tags/#tag:development-tools","title":"development tools","text":"<ul> <li>            UV Package Manager: The Modern Alternative to Python Virtual Environments          </li> </ul>"},{"location":"tags/#tag:device-onboarding","title":"device onboarding","text":"<ul> <li>            Nautobot in Action \u2013 Part 1          </li> <li>            Nautobot in Action \u2013 Part 2          </li> </ul>"},{"location":"tags/#tag:devnetops","title":"devnetops","text":"<ul> <li>            Network Automation Development Setup          </li> </ul>"},{"location":"tags/#tag:devops","title":"devops","text":"<ul> <li>            AWS CloudFormation Introduction &amp; Getting Started          </li> <li>            Ansible Introduction &amp; Getting Started          </li> <li>            Docker          </li> <li>            GitHub Actions Introduction &amp; Getting Started          </li> <li>            GitLab CI/CD Introduction &amp; Getting Started          </li> <li>            Grafana Introduction &amp; Getting Started          </li> <li>            Home          </li> <li>            InfluxDB Introduction &amp; Getting Started          </li> <li>            Introduction to NetDevOps: Bridging Network Operations and Development          </li> <li>            Jenkins Introduction &amp; Getting Started          </li> <li>            Nornir Introduction &amp; Getting Started          </li> <li>            OpenTofu Introduction &amp; Getting Started          </li> <li>            Prometheus Introduction &amp; Getting Started          </li> <li>            SSO: Introduction          </li> <li>            SaltStack Introduction &amp; Getting Started          </li> <li>            Terraform Introduction &amp; Getting Started          </li> <li>            What is NetDevOps?          </li> <li>            pyATS Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:diff","title":"diff","text":"<ul> <li>            Diff Tool          </li> </ul>"},{"location":"tags/#tag:discovery","title":"discovery","text":"<ul> <li>            Nautobot in Action \u2013 Part 1          </li> <li>            Nautobot in Action \u2013 Part 2          </li> </ul>"},{"location":"tags/#tag:docker","title":"docker","text":"<ul> <li>            ContainerLab          </li> <li>            Docker          </li> <li>            Docker images index          </li> <li>            Home          </li> <li>            Nautobot Docker Images with Pre-Installed Apps          </li> <li>            Netdata Monitoring System: Real-Time, Free, and Easy          </li> <li>            Network Automation Development Setup          </li> <li>            bsmeding.swag_docker          </li> </ul>"},{"location":"tags/#tag:docker-compose","title":"docker-compose","text":"<ul> <li>            Install Docker Compose on Synology NAS          </li> </ul>"},{"location":"tags/#tag:encoding","title":"encoding","text":"<ul> <li>            Base64 Converter          </li> <li>            URL Encoder/Decoder          </li> </ul>"},{"location":"tags/#tag:event-driven","title":"event-driven","text":"<ul> <li>            Nautobot in Action \u2013 Part 5          </li> </ul>"},{"location":"tags/#tag:firewalls","title":"firewalls","text":"<ul> <li>            Nautobot in Action \u2013 Part 10          </li> <li>            Nautobot in Action \u2013 Part 9          </li> </ul>"},{"location":"tags/#tag:formatting","title":"formatting","text":"<ul> <li>            JSON Validator          </li> <li>            YAML Validator          </li> </ul>"},{"location":"tags/#tag:gdpr","title":"gdpr","text":"<ul> <li>            Privacy Policy          </li> </ul>"},{"location":"tags/#tag:genie","title":"genie","text":"<ul> <li>            pyATS Testing Tutorial          </li> </ul>"},{"location":"tags/#tag:getting-started","title":"getting started","text":"<ul> <li>            Getting Started with Network Automation, the complete guide!          </li> <li>            Tutorials Overview          </li> </ul>"},{"location":"tags/#tag:git","title":"git","text":"<ul> <li>            Network Automation Development Setup          </li> <li>            Tutorials Overview          </li> </ul>"},{"location":"tags/#tag:gitea","title":"gitea","text":"<ul> <li>            Network Automation Development Setup          </li> </ul>"},{"location":"tags/#tag:github","title":"github","text":"<ul> <li>            GitHub Actions Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:github-action","title":"github action","text":"<ul> <li>            Automatically push Ansible role to Ansible Galaxy with GitHub Actions          </li> <li>            Create development environment for Ansible roles          </li> </ul>"},{"location":"tags/#tag:github-actions","title":"github-actions","text":"<ul> <li>            Automate Code Quality: ansible-lint, yaml-lint, and CI/CD Integration          </li> <li>            CI/CD Pipelines for Network Automation: Building Reliable Deployment Workflows          </li> </ul>"},{"location":"tags/#tag:gitlab","title":"gitlab","text":"<ul> <li>            CI/CD Pipelines for Network Automation: Building Reliable Deployment Workflows          </li> <li>            GitLab CI/CD Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:gitlab-ci","title":"gitlab-ci","text":"<ul> <li>            Automate Code Quality: ansible-lint, yaml-lint, and CI/CD Integration          </li> </ul>"},{"location":"tags/#tag:gitops","title":"gitops","text":"<ul> <li>            Nautobot in Action \u2013 Part 8          </li> </ul>"},{"location":"tags/#tag:golden-config","title":"golden config","text":"<ul> <li>            Nautobot in Action \u2013 Part 10          </li> <li>            Nautobot in Action \u2013 Part 3          </li> <li>            Nautobot in Action \u2013 Part 9          </li> </ul>"},{"location":"tags/#tag:grafana","title":"grafana","text":"<ul> <li>            Grafana Introduction &amp; Getting Started          </li> <li>            Monitoring Networks with Prometheus and Grafana: A Complete Guide          </li> </ul>"},{"location":"tags/#tag:graphql","title":"graphql","text":"<ul> <li>            APIs in Network Automation          </li> <li>            Nautobot in Action \u2013 Global Series Index          </li> <li>            Nautobot in Action \u2013 Part 7          </li> <li>            Supercharge Network Automation with GraphQL -&gt; One Query to Rule Them All          </li> </ul>"},{"location":"tags/#tag:hash","title":"hash","text":"<ul> <li>            Hash Generator          </li> </ul>"},{"location":"tags/#tag:hex","title":"hex","text":"<ul> <li>            Color Converter          </li> </ul>"},{"location":"tags/#tag:hsl","title":"hsl","text":"<ul> <li>            Color Converter          </li> </ul>"},{"location":"tags/#tag:ide","title":"ide","text":"<ul> <li>            Visual Studio Code for Network Automation          </li> </ul>"},{"location":"tags/#tag:influxdb","title":"influxdb","text":"<ul> <li>            InfluxDB Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:infoblox","title":"infoblox","text":"<ul> <li>            Nautobot in Action \u2013 Part 7          </li> </ul>"},{"location":"tags/#tag:infrastructure","title":"infrastructure","text":"<ul> <li>            Ansible Roles &amp; Collections          </li> <li>            Docker images index          </li> <li>            Home          </li> <li>            Nautobot the ultimate network CMDB          </li> <li>            What is NetDevOps?          </li> </ul>"},{"location":"tags/#tag:infrastructure-as-code","title":"infrastructure as code","text":"<ul> <li>            AWS CloudFormation Introduction &amp; Getting Started          </li> <li>            OpenTofu Introduction &amp; Getting Started          </li> <li>            Terraform Introduction &amp; Getting Started          </li> <li>            Terraform for Network Infrastructure as Code: A Complete Guide          </li> </ul>"},{"location":"tags/#tag:integration","title":"integration","text":"<ul> <li>            APIs in Network Automation          </li> </ul>"},{"location":"tags/#tag:integrations","title":"integrations","text":"<ul> <li>            Nautobot in Action \u2013 Part 7          </li> </ul>"},{"location":"tags/#tag:inventory-management","title":"inventory management","text":"<ul> <li>            NetPicker.io          </li> </ul>"},{"location":"tags/#tag:ipam","title":"ipam","text":"<ul> <li>            NetBox          </li> </ul>"},{"location":"tags/#tag:ise","title":"ise","text":"<ul> <li>            Nautobot in Action \u2013 Part 7          </li> </ul>"},{"location":"tags/#tag:jenkins","title":"jenkins","text":"<ul> <li>            CI/CD Pipelines for Network Automation: Building Reliable Deployment Workflows          </li> <li>            Jenkins Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:jinja2","title":"jinja2","text":"<ul> <li>            Jinja2          </li> <li>            Nautobot in Action \u2013 Global Series Index          </li> <li>            Supercharge Network Automation with GraphQL -&gt; One Query to Rule Them All          </li> </ul>"},{"location":"tags/#tag:job-hooks","title":"job hooks","text":"<ul> <li>            Nautobot in Action \u2013 Part 5          </li> </ul>"},{"location":"tags/#tag:json","title":"json","text":"<ul> <li>            JSON Validator          </li> </ul>"},{"location":"tags/#tag:lab","title":"lab","text":"<ul> <li>            Building a Reusable Network Automation Lab with Containerlab          </li> </ul>"},{"location":"tags/#tag:lab-environment","title":"lab environment","text":"<ul> <li>            ContainerLab          </li> </ul>"},{"location":"tags/#tag:ldap","title":"ldap","text":"<ul> <li>            SSO: Introduction          </li> </ul>"},{"location":"tags/#tag:linux","title":"linux","text":"<ul> <li>            Linux Basics for Network Automation          </li> <li>            Linux basics          </li> <li>            Netdata Monitoring System: Real-Time, Free, and Easy          </li> <li>            Tutorials Overview          </li> </ul>"},{"location":"tags/#tag:linuxserver","title":"linuxserver","text":"<ul> <li>            bsmeding.swag_docker          </li> </ul>"},{"location":"tags/#tag:lldap","title":"lldap","text":"<ul> <li>            Network Automation Development Setup          </li> </ul>"},{"location":"tags/#tag:machine-learning","title":"machine learning","text":"<ul> <li>            AI Agents in Network Automation: The Future of Intelligent Networking          </li> </ul>"},{"location":"tags/#tag:md5","title":"md5","text":"<ul> <li>            Hash Generator          </li> </ul>"},{"location":"tags/#tag:monitoring","title":"monitoring","text":"<ul> <li>            Grafana Introduction &amp; Getting Started          </li> <li>            InfluxDB Introduction &amp; Getting Started          </li> <li>            Monitoring Networks with Prometheus and Grafana: A Complete Guide          </li> <li>            Netdata Monitoring System: Real-Time, Free, and Easy          </li> <li>            Prometheus Introduction &amp; Getting Started          </li> <li>            Tools Index          </li> </ul>"},{"location":"tags/#tag:napalm","title":"napalm","text":"<ul> <li>            Ansible NAPALM          </li> <li>            Tutorials Overview          </li> </ul>"},{"location":"tags/#tag:nautobot","title":"nautobot","text":"<ul> <li>            Nautobot          </li> <li>            Nautobot Docker Images with Pre-Installed Apps          </li> <li>            Nautobot in Action \u2013 Global Series Index          </li> <li>            Nautobot in Action \u2013 Part 1          </li> <li>            Nautobot in Action \u2013 Part 10          </li> <li>            Nautobot in Action \u2013 Part 2          </li> <li>            Nautobot in Action \u2013 Part 3          </li> <li>            Nautobot in Action \u2013 Part 4          </li> <li>            Nautobot in Action \u2013 Part 5          </li> <li>            Nautobot in Action \u2013 Part 6          </li> <li>            Nautobot in Action \u2013 Part 7          </li> <li>            Nautobot in Action \u2013 Part 8          </li> <li>            Nautobot in Action \u2013 Part 9          </li> <li>            Nautobot the ultimate network CMDB          </li> <li>            Nautobot: The Ultimate Network Automation Platform for NetDevOps          </li> <li>            Supercharge Network Automation with GraphQL -&gt; One Query to Rule Them All          </li> </ul>"},{"location":"tags/#tag:netbox","title":"netbox","text":"<ul> <li>            NetBox          </li> </ul>"},{"location":"tags/#tag:netdata","title":"netdata","text":"<ul> <li>            Netdata Monitoring System: Real-Time, Free, and Easy          </li> </ul>"},{"location":"tags/#tag:netdevops","title":"netdevops","text":"<ul> <li>            AI Agents in Network Automation: The Future of Intelligent Networking          </li> <li>            CI/CD Pipelines for Network Automation: Building Reliable Deployment Workflows          </li> <li>            Getting Started with Ansible Network Automation: A Practical Guide          </li> <li>            Home          </li> <li>            Introduction to NetDevOps: Bridging Network Operations and Development          </li> <li>            Monitoring Networks with Prometheus and Grafana: A Complete Guide          </li> <li>            Nautobot: The Ultimate Network Automation Platform for NetDevOps          </li> <li>            Network Automation Development Setup          </li> <li>            Terraform for Network Infrastructure as Code: A Complete Guide          </li> <li>            Tools Index          </li> <li>            UV Package Manager: The Modern Alternative to Python Virtual Environments          </li> <li>            What is NetDevOps?          </li> </ul>"},{"location":"tags/#tag:netpicker","title":"netpicker","text":"<ul> <li>            NetPicker.io          </li> </ul>"},{"location":"tags/#tag:network","title":"network","text":"<ul> <li>            Building a Reusable Network Automation Lab with Containerlab          </li> </ul>"},{"location":"tags/#tag:network-automation","title":"network automation","text":"<ul> <li>            AI Agents in Network Automation: The Future of Intelligent Networking          </li> <li>            Building a Reusable Network Automation Lab with Containerlab          </li> <li>            CI/CD Pipelines for Network Automation: Building Reliable Deployment Workflows          </li> <li>            ContainerLab          </li> <li>            Getting Started with Ansible Network Automation: A Practical Guide          </li> <li>            Getting Started with Network Automation, the complete guide!          </li> <li>            Home          </li> <li>            Introduction to NetDevOps: Bridging Network Operations and Development          </li> <li>            Nautobot          </li> <li>            Nautobot Docker Images with Pre-Installed Apps          </li> <li>            Nautobot in Action \u2013 Global Series Index          </li> <li>            Nautobot in Action \u2013 Part 1          </li> <li>            Nautobot in Action \u2013 Part 10          </li> <li>            Nautobot in Action \u2013 Part 2          </li> <li>            Nautobot in Action \u2013 Part 3          </li> <li>            Nautobot in Action \u2013 Part 4          </li> <li>            Nautobot in Action \u2013 Part 5          </li> <li>            Nautobot in Action \u2013 Part 6          </li> <li>            Nautobot in Action \u2013 Part 7          </li> <li>            Nautobot in Action \u2013 Part 8          </li> <li>            Nautobot in Action \u2013 Part 9          </li> <li>            Nautobot the ultimate network CMDB          </li> <li>            Nautobot: The Ultimate Network Automation Platform for NetDevOps          </li> <li>            NetBox          </li> <li>            NetPicker.io          </li> <li>            Nornir Introduction &amp; Getting Started          </li> <li>            OpsMill          </li> <li>            SlurpIT.io          </li> <li>            Supercharge Network Automation with GraphQL -&gt; One Query to Rule Them All          </li> <li>            Tutorials Overview          </li> <li>            What is NetDevOps?          </li> <li>            pyATS Testing Tutorial          </li> </ul>"},{"location":"tags/#tag:network-discovery","title":"network discovery","text":"<ul> <li>            NetPicker.io          </li> </ul>"},{"location":"tags/#tag:network-mapping","title":"network mapping","text":"<ul> <li>            NetPicker.io          </li> </ul>"},{"location":"tags/#tag:network-orchestration","title":"network orchestration","text":"<ul> <li>            SlurpIT.io          </li> </ul>"},{"location":"tags/#tag:network-testing","title":"network testing","text":"<ul> <li>            pyATS Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:network-cli","title":"network-cli","text":"<ul> <li>            Ansible - Network Settings          </li> </ul>"},{"location":"tags/#tag:networking","title":"networking","text":"<ul> <li>            ContainerLab          </li> <li>            Getting Started with Ansible Network Automation: A Practical Guide          </li> <li>            Introduction to NetDevOps: Bridging Network Operations and Development          </li> <li>            Monitoring Networks with Prometheus and Grafana: A Complete Guide          </li> <li>            Nautobot: The Ultimate Network Automation Platform for NetDevOps          </li> <li>            Terraform for Network Infrastructure as Code: A Complete Guide          </li> </ul>"},{"location":"tags/#tag:nginx","title":"nginx","text":"<ul> <li>            Network Automation Development Setup          </li> </ul>"},{"location":"tags/#tag:nocode","title":"nocode","text":"<ul> <li>            Getting Started with Network Automation, the complete guide!          </li> </ul>"},{"location":"tags/#tag:nornir","title":"nornir","text":"<ul> <li>            Nornir Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:observability","title":"observability","text":"<ul> <li>            Grafana Introduction &amp; Getting Started          </li> <li>            Monitoring Networks with Prometheus and Grafana: A Complete Guide          </li> <li>            Prometheus Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:open-source","title":"open-source","text":"<ul> <li>            Netdata Monitoring System: Real-Time, Free, and Easy          </li> </ul>"},{"location":"tags/#tag:opentofu","title":"opentofu","text":"<ul> <li>            OpenTofu Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:opsmill","title":"opsmill","text":"<ul> <li>            Nautobot in Action \u2013 Global Series Index          </li> <li>            OpsMill          </li> <li>            Supercharge Network Automation with GraphQL -&gt; One Query to Rule Them All          </li> </ul>"},{"location":"tags/#tag:orchestration","title":"orchestration","text":"<ul> <li>            OpsMill          </li> </ul>"},{"location":"tags/#tag:package-management","title":"package management","text":"<ul> <li>            UV Package Manager: The Modern Alternative to Python Virtual Environments          </li> </ul>"},{"location":"tags/#tag:percent-encoding","title":"percent-encoding","text":"<ul> <li>            URL Encoder/Decoder          </li> </ul>"},{"location":"tags/#tag:plugins","title":"plugins","text":"<ul> <li>            Nautobot Docker Images with Pre-Installed Apps          </li> </ul>"},{"location":"tags/#tag:privacy","title":"privacy","text":"<ul> <li>            Privacy Policy          </li> </ul>"},{"location":"tags/#tag:profile","title":"profile","text":"<ul> <li>            About          </li> </ul>"},{"location":"tags/#tag:prometheus","title":"prometheus","text":"<ul> <li>            Monitoring Networks with Prometheus and Grafana: A Complete Guide          </li> <li>            Prometheus Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:proxmox","title":"proxmox","text":"<ul> <li>            Setup Proxmox Cluster          </li> </ul>"},{"location":"tags/#tag:pyats","title":"pyats","text":"<ul> <li>            pyATS Introduction &amp; Getting Started          </li> <li>            pyATS Testing Tutorial          </li> </ul>"},{"location":"tags/#tag:python","title":"python","text":"<ul> <li>            Nornir Introduction &amp; Getting Started          </li> <li>            UV Package Manager: The Modern Alternative to Python Virtual Environments          </li> </ul>"},{"location":"tags/#tag:real-time-automation","title":"real-time automation","text":"<ul> <li>            Nautobot in Action \u2013 Part 5          </li> </ul>"},{"location":"tags/#tag:regex","title":"regex","text":"<ul> <li>            Regex Tester          </li> </ul>"},{"location":"tags/#tag:remediation","title":"remediation","text":"<ul> <li>            Nautobot in Action \u2013 Part 4          </li> </ul>"},{"location":"tags/#tag:rest","title":"rest","text":"<ul> <li>            APIs in Network Automation          </li> </ul>"},{"location":"tags/#tag:rgb","title":"rgb","text":"<ul> <li>            Color Converter          </li> </ul>"},{"location":"tags/#tag:role-development","title":"role development","text":"<ul> <li>            Create development environment for Ansible roles          </li> </ul>"},{"location":"tags/#tag:roles","title":"roles","text":"<ul> <li>            Ansible Roles &amp; Collections          </li> </ul>"},{"location":"tags/#tag:saltstack","title":"saltstack","text":"<ul> <li>            SaltStack Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:security","title":"security","text":"<ul> <li>            Nautobot in Action \u2013 Part 10          </li> <li>            Nautobot in Action \u2013 Part 9          </li> </ul>"},{"location":"tags/#tag:sha1","title":"sha1","text":"<ul> <li>            Hash Generator          </li> </ul>"},{"location":"tags/#tag:sha256","title":"sha256","text":"<ul> <li>            Hash Generator          </li> </ul>"},{"location":"tags/#tag:single-sign-on","title":"single sign-on","text":"<ul> <li>            SSO: Introduction          </li> </ul>"},{"location":"tags/#tag:site-validation","title":"site validation","text":"<ul> <li>            Nautobot in Action \u2013 Part 6          </li> </ul>"},{"location":"tags/#tag:slurpit","title":"slurpit","text":"<ul> <li>            SlurpIT.io          </li> </ul>"},{"location":"tags/#tag:source-of-truth","title":"source of truth","text":"<ul> <li>            Nautobot          </li> <li>            Nautobot: The Ultimate Network Automation Platform for NetDevOps          </li> <li>            NetBox          </li> <li>            OpsMill          </li> </ul>"},{"location":"tags/#tag:sso","title":"sso","text":"<ul> <li>            Home          </li> <li>            SSO: Introduction          </li> </ul>"},{"location":"tags/#tag:ssot","title":"ssot","text":"<ul> <li>            Nautobot          </li> <li>            Nautobot Docker Images with Pre-Installed Apps          </li> <li>            Nautobot the ultimate network CMDB          </li> </ul>"},{"location":"tags/#tag:student","title":"student","text":"<ul> <li>            Network Automation Development Setup          </li> </ul>"},{"location":"tags/#tag:swag","title":"swag","text":"<ul> <li>            bsmeding.swag_docker          </li> </ul>"},{"location":"tags/#tag:synology","title":"synology","text":"<ul> <li>            Install Docker Compose on Synology NAS          </li> </ul>"},{"location":"tags/#tag:templating","title":"templating","text":"<ul> <li>            Jinja2          </li> </ul>"},{"location":"tags/#tag:terraform","title":"terraform","text":"<ul> <li>            Terraform Introduction &amp; Getting Started          </li> <li>            Terraform for Network Infrastructure as Code: A Complete Guide          </li> </ul>"},{"location":"tags/#tag:testing","title":"testing","text":"<ul> <li>            ContainerLab          </li> <li>            Regex Tester          </li> <li>            pyATS Testing Tutorial          </li> </ul>"},{"location":"tags/#tag:text","title":"text","text":"<ul> <li>            Diff Tool          </li> </ul>"},{"location":"tags/#tag:time-series","title":"time-series","text":"<ul> <li>            InfluxDB Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:tools","title":"tools","text":"<ul> <li>            Base64 Converter          </li> <li>            Color Converter          </li> <li>            Diff Tool          </li> <li>            Hash Generator          </li> <li>            JSON Validator          </li> <li>            Regex Tester          </li> <li>            Tools Index          </li> <li>            URL Encoder/Decoder          </li> <li>            Web Tools Overview          </li> <li>            YAML Validator          </li> </ul>"},{"location":"tags/#tag:tutorial","title":"tutorial","text":"<ul> <li>            Ansible NAPALM          </li> <li>            Enable Windows Subsystem for Linux          </li> <li>            Getting Started with Ansible Network Automation: A Practical Guide          </li> <li>            Getting Started with Network Automation, the complete guide!          </li> <li>            Install Docker Compose on Synology NAS          </li> <li>            Linux basics          </li> <li>            Vagrant Installation          </li> </ul>"},{"location":"tags/#tag:tutorials","title":"tutorials","text":"<ul> <li>            Home          </li> <li>            Tutorials Overview          </li> </ul>"},{"location":"tags/#tag:url","title":"url","text":"<ul> <li>            URL Encoder/Decoder          </li> </ul>"},{"location":"tags/#tag:utilities","title":"utilities","text":"<ul> <li>            Web Tools Overview          </li> </ul>"},{"location":"tags/#tag:uv","title":"uv","text":"<ul> <li>            UV Package Manager: The Modern Alternative to Python Virtual Environments          </li> </ul>"},{"location":"tags/#tag:vagrant","title":"vagrant","text":"<ul> <li>            Vagrant Installation          </li> </ul>"},{"location":"tags/#tag:validation","title":"validation","text":"<ul> <li>            Regex Tester          </li> <li>            pyATS Introduction &amp; Getting Started          </li> </ul>"},{"location":"tags/#tag:validator","title":"validator","text":"<ul> <li>            JSON Validator          </li> <li>            YAML Validator          </li> </ul>"},{"location":"tags/#tag:virtual-environments","title":"virtual environments","text":"<ul> <li>            UV Package Manager: The Modern Alternative to Python Virtual Environments          </li> </ul>"},{"location":"tags/#tag:virtualisation","title":"virtualisation","text":"<ul> <li>            Setup Proxmox Cluster          </li> </ul>"},{"location":"tags/#tag:virtualization","title":"virtualization","text":"<ul> <li>            Vagrant Installation          </li> </ul>"},{"location":"tags/#tag:visual-studio-code","title":"visual studio code","text":"<ul> <li>            Visual Studio Code for Network Automation          </li> </ul>"},{"location":"tags/#tag:vscode","title":"vscode","text":"<ul> <li>            Visual Studio Code for Network Automation          </li> </ul>"},{"location":"tags/#tag:web-tools","title":"web-tools","text":"<ul> <li>            Web Tools Overview          </li> </ul>"},{"location":"tags/#tag:wireless","title":"wireless","text":"<ul> <li>            Nautobot in Action \u2013 Part 10          </li> <li>            Nautobot in Action \u2013 Part 9          </li> </ul>"},{"location":"tags/#tag:wsl","title":"wsl","text":"<ul> <li>            Enable Windows Subsystem for Linux          </li> <li>            UV Package Manager: The Modern Alternative to Python Virtual Environments          </li> </ul>"},{"location":"tags/#tag:yaml","title":"yaml","text":"<ul> <li>            YAML Validator          </li> </ul>"},{"location":"tags/#tag:yaml-lint","title":"yaml-lint","text":"<ul> <li>            Automate Code Quality: ansible-lint, yaml-lint, and CI/CD Integration          </li> </ul>"},{"location":"tags/#tag:ztp","title":"ztp","text":"<ul> <li>            Nautobot in Action \u2013 Part 6          </li> </ul>"},{"location":"tools/","title":"NetDevOps Tools","text":"<p>Welcome to the NetDevOps Tools hub! Here you'll find an overview of the most important tools used in network automation, monitoring, and DevOps workflows. Each tool below links to a detailed guide or blog post to help you get started or go deeper.</p>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#tools-by-category","title":"Tools by Category","text":"","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#automation-orchestration","title":"Automation &amp; Orchestration","text":"<ul> <li>Ansible \u2014 Powerful automation engine for configuration management and orchestration.</li> <li>Nornir \u2014 Python automation framework for network engineers.</li> <li>OpsMill \u2014 Modern network automation and orchestration platform.</li> <li>SaltStack \u2014 Event-driven automation and configuration management.</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#configuration-management-source-of-truth","title":"Configuration Management &amp; Source of Truth","text":"<ul> <li>NetBox \u2014 IPAM and DCIM tool for network source of truth.</li> <li>Nautobot \u2014 Extensible network automation platform and source of truth.</li> <li>NetPicker.io \u2014 Network discovery and inventory management platform for automation workflows.</li> <li>SlurpIT.io \u2014 Network configuration management and orchestration platform with workflow automation.</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#infrastructure-as-code","title":"Infrastructure as Code","text":"<ul> <li>CloudFormation \u2014 AWS Infrastructure as Code.</li> <li>Terraform \u2014 Infrastructure as Code for cloud and network resources.</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#containerization-deployment","title":"Containerization &amp; Deployment","text":"<ul> <li>ContainerLab \u2014 Container-based network lab orchestrator for testing and development.</li> <li>Docker \u2014 Containerization platform for consistent, portable environments.</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#cicd-pipeline-tools","title":"CI/CD &amp; Pipeline Tools","text":"<ul> <li>GitHub Actions \u2014 CI/CD and automation for GitHub repositories.</li> <li>GitLab CI/CD \u2014 Integrated CI/CD for GitLab projects.</li> <li>Jenkins \u2014 Automation server for CI/CD pipelines.</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>Grafana \u2014 Visualization and analytics platform for metrics.</li> <li>InfluxDB \u2014 Time-series database for storing metrics.</li> <li>Prometheus \u2014 Monitoring and alerting toolkit.</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#testing-validation","title":"Testing &amp; Validation","text":"<ul> <li>pyATS \u2014 Cisco's network testing and validation framework.</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#templating-development","title":"Templating &amp; Development","text":"<ul> <li>API \u2014 General concepts and best practices for working with APIs in automation.</li> <li>Jinja2 \u2014 Templating engine for dynamic configuration generation.</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#tools-list-alphabetical","title":"Tools List (Alphabetical)","text":"<ul> <li>API \u2014 General concepts and best practices for working with APIs in automation.</li> <li>Ansible \u2014 Powerful automation engine for configuration management and orchestration.</li> <li>CloudFormation \u2014 AWS Infrastructure as Code.</li> <li>ContainerLab \u2014 Container-based network lab orchestrator for testing and development.</li> <li>Docker \u2014 Containerization platform for consistent, portable environments.</li> <li>GitHub Actions \u2014 CI/CD and automation for GitHub repositories.</li> <li>GitLab CI/CD \u2014 Integrated CI/CD for GitLab projects.</li> <li>Grafana \u2014 Visualization and analytics platform for metrics.</li> <li>InfluxDB \u2014 Time-series database for storing metrics.</li> <li>Jenkins \u2014 Automation server for CI/CD pipelines.</li> <li>Jinja2 \u2014 Templating engine for dynamic configuration generation.</li> <li>Nautobot \u2014 Extensible network automation platform and source of truth.</li> <li>NetBox \u2014 IPAM and DCIM tool for network source of truth.</li> <li>NetPicker.io \u2014 Network discovery and inventory management platform for automation workflows.</li> <li>Nornir \u2014 Python automation framework for network engineers.</li> <li>OpsMill \u2014 Modern network automation and orchestration platform.</li> <li>Prometheus \u2014 Monitoring and alerting toolkit.</li> <li>pyATS \u2014 Cisco's network testing and validation framework.</li> <li>SaltStack \u2014 Event-driven automation and configuration management.</li> <li>SlurpIT.io \u2014 Network configuration management and orchestration platform with workflow automation.</li> <li>Terraform \u2014 Infrastructure as Code for cloud and network resources.</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tools/#tools-i-use-with-netdevops-devops-development","title":"Tools i use with NetDevOps / DevOps development","text":"<ul> <li>Use this page as a reference when building or expanding your NetDevOps toolkit.</li> <li>For tutorials and practical examples, see the tutorials section or blog index.</li> <li>Are you missing tools? Let me know in the comments</li> </ul>","tags":["tools","netdevops","automation","monitoring"]},{"location":"tutorials/","title":"Tutorials","text":"<p>Welcome to the Tutorials section of NetDevOps.it! Here you'll find step-by-step guides, practical examples, and hands-on labs to help you master network automation, DevOps, and open-source tools\u2014no matter your experience level.</p>","tags":["tutorials","network automation","ansible","napalm","git","linux","getting started"]},{"location":"tutorials/#what-youll-find","title":"What You'll Find","text":"<ul> <li>Beginner to Advanced Guides: Start with the basics and progress to real-world automation workflows.</li> <li>Copy-Paste Examples: All tutorials include ready-to-use code and configuration snippets.</li> <li>Multi-Vendor Focus: Learn how to automate Cisco, Arista, Juniper, and more.</li> <li>Best Practices: Tips for scalable, maintainable, and secure automation.</li> </ul>","tags":["tutorials","network automation","ansible","napalm","git","linux","getting started"]},{"location":"tutorials/#featured-tutorial-series","title":"Featured Tutorial Series","text":"<ul> <li>Ansible Tutorial Series: Concepts, modules, variables, and network facts</li> <li>NAPALM with Ansible: Multi-vendor network automation and compliance</li> <li>Git Basics: Version control for network engineers</li> <li>Linux Basics: Essential commands for automation</li> <li>Vagrant Installation: Build reproducible lab environments</li> </ul>","tags":["tutorials","network automation","ansible","napalm","git","linux","getting started"]},{"location":"tutorials/#how-to-use-these-tutorials","title":"How to Use These Tutorials","text":"<ol> <li>Pick a topic that matches your current needs or interests.</li> <li>Follow along step-by-step\u2014all examples are designed to be practical and easy to adapt.</li> <li>Experiment and build confidence\u2014the best way to learn is by doing!</li> </ol> <p>Ready to start? Jump into the Ansible Tutorial Series or browse the list on the left to find your next learning path.</p>","tags":["tutorials","network automation","ansible","napalm","git","linux","getting started"]},{"location":"yaml-validator/","title":"YAML Validator","text":"<p>Validate your YAML below. This tool runs 100% in your browser\u2014no data is sent to any server.</p> Validate <pre>YAML validation result will appear here.</pre>"},{"location":"ai/ai_in_networking/","title":"AI in Networking: From Insight to Action","text":"<p>Artificial Intelligence (AI) is rapidly transforming the networking world. What once required teams of engineers sifting through logs, running scripts, and checking configurations can now be accelerated, enhanced, and even autonomously handled by AI agents.</p> <p>In this blog post, we\u2019ll explore the role of AI in networking, how it can interact with modern systems like Nautobot (as a CMDB and automation platform), and what it takes to build AI agents that can query network data and interact with real devices.</p>"},{"location":"ai/ai_in_networking/#what-can-ai-do-in-networking","title":"\ud83e\udd16 What Can AI Do in Networking?","text":"<p>At a high level, AI in networking can be applied to the following areas:</p> <ul> <li>Observability &amp; Monitoring: AI can detect anomalies in traffic, predict failures, and surface insights from logs and metrics.</li> <li>Intent Verification: AI can continuously validate that the network is behaving as intended based on policy.</li> <li>Natural Language Querying: Users can ask questions like \"Which switches in Site A are running outdated firmware?\"</li> <li>Automated Troubleshooting: AI agents can run diagnostic commands and summarize results.</li> <li>Autonomous Configuration: Based on input or learned behavior, AI can generate and apply configurations safely.</li> </ul>"},{"location":"ai/ai_in_networking/#interacting-with-nautobot-cmdb","title":"\ud83d\udd17 Interacting with Nautobot (CMDB)","text":"<p>Nautobot is a powerful source of truth for network infrastructure. With its robust API and plugin architecture, it becomes an ideal partner for AI-driven systems.</p>"},{"location":"ai/ai_in_networking/#use-case-ai-agent-to-query-nautobot","title":"Use Case: AI Agent to Query Nautobot","text":"<p>Imagine a conversational AI agent that can answer questions like:</p> <ul> <li>\"List all devices at the Berlin site.\"</li> <li>\"Which devices haven\u2019t been backed up in the last 24 hours?\"</li> <li>\"Are there any devices with a lifecycle end-of-support date within the next 6 months?\"</li> </ul>"},{"location":"ai/ai_in_networking/#how-it-works","title":"How It Works","text":"<ol> <li>Natural Language Parsing: The AI model parses user input and identifies intent and entities (e.g., site name, device type).</li> <li>Nautobot API Interaction: The agent translates this into a Nautobot GraphQL or REST API query.</li> <li>Response Generation: The AI formats and returns the response in a human-readable way, optionally with links to Nautobot UI.</li> </ol> <p>Bonus: With plugins like Nautobot ChatOps, AI can even interact via Slack or MS Teams!</p>"},{"location":"ai/ai_in_networking/#interacting-with-network-devices","title":"\u2699\ufe0f Interacting with Network Devices","text":"<p>While Nautobot tells us what should be, interacting with devices reveals what is.</p> <p>AI can connect to devices using SSH, NETCONF, or REST APIs to:</p> <ul> <li>Check software versions</li> <li>Verify interface statuses</li> <li>Review BGP neighbors</li> <li>Collect configuration snippets</li> </ul>"},{"location":"ai/ai_in_networking/#use-case-ai-agent-for-device-inspection","title":"Use Case: AI Agent for Device Inspection","text":"<p>You could create an AI agent with the ability to:</p> <ul> <li>Connect to a switch via SSH</li> <li>Run commands like <code>show version</code> or <code>show interface status</code></li> <li>Compare the output against Nautobot\u2019s intended state</li> <li>Flag mismatches or recommend actions</li> </ul>"},{"location":"ai/ai_in_networking/#tooling-options","title":"Tooling Options","text":"<ul> <li>NAPALM: Multi-vendor abstraction for reading from devices</li> <li>Scrapli: Flexible Python library for interacting with CLI devices</li> <li>Netmiko / Paramiko: Lower-level SSH options</li> </ul> <p>Pro Tip: Create reusable prompt templates to tell your AI agent what commands to run based on device type or vendor.</p>"},{"location":"ai/ai_in_networking/#building-ai-agents-for-networking","title":"\ud83e\udde0 Building AI Agents for Networking","text":""},{"location":"ai/ai_in_networking/#architecture-overview","title":"Architecture Overview","text":"<ol> <li>Frontend Interface (optional): A chatbot or web UI for input/output</li> <li>LLM Core: A language model like GPT-4, Claude, or open-source LLM</li> <li>Toolset Plugins: Custom functions that allow the LLM to call APIs or connect to devices</li> <li>Memory Store (optional): Save past interactions, common queries, device state snapshots</li> </ol>"},{"location":"ai/ai_in_networking/#popular-frameworks","title":"Popular Frameworks","text":"<ul> <li>LangChain / LlamaIndex: For building tool-using agents with memory</li> <li>Semantic Kernel: For .NET/C# ecosystems</li> <li>AutoGen: Agent-to-agent collaboration framework from Microsoft</li> </ul>"},{"location":"ai/ai_in_networking/#example-prompts-for-your-ai-agent","title":"\ud83d\udee0 Example Prompts for Your AI Agent","text":"<p><pre><code>&gt; What devices are in site \"NYC-Core\"?\n\u2192 [AI agent calls Nautobot GraphQL API]\n\n&gt; Login to router R1 and check if interface Gi0/1 is up.\n\u2192 [AI agent calls a function that uses Scrapli to connect and parse output]\n\n&gt; Create a summary of all devices with CVEs in the last 90 days.\n\u2192 [Agent queries Nautobot Software Inventory + CVE plugins]\n</code></pre> See Youtube channel of John Capobianco for examples of AI agents interacting with network devices</p>"},{"location":"ai/ai_in_networking/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":"<p>While AI adds power and flexibility, it also introduces risk:</p> <ul> <li>Never give unrestricted shell access to an LLM</li> <li>Use strict function calling with clearly scoped permissions</li> <li>Validate all input/output when interacting with devices</li> </ul>"},{"location":"ai/ai_in_networking/#final-thoughts","title":"\ud83e\udde9 Final Thoughts","text":"<p>AI in networking isn\u2019t about replacing engineers \u2014 it\u2019s about amplifying their abilities. By combining natural language understanding, structured APIs like Nautobot\u2019s, and secure device communication, we can build intelligent agents that answer questions, identify issues, and even take action.</p> <p>The future is already here. It's time to start experimenting.</p>"},{"location":"ai/ai_in_networking/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>John Capobianco YouTube channel</li> <li>Nautobot Docs</li> <li>LangChain for Python</li> <li>NAPALM Project</li> <li>Scrapli</li> <li>OpenAI Function Calling</li> </ul>"},{"location":"ansible/ansible_role_awx_docker/","title":"Ansible Role: AWX Docker (<code>bsmeding.awx_docker</code>)","text":"<p>This Ansible role deploys AWX (the open-source version of Ansible Tower) in Docker containers. It is designed for easy, automated AWX deployments for labs, demos, or production.</p> <ul> <li>GitHub: bsmeding/ansible_role_awx_docker</li> <li>Ansible Galaxy: bsmeding.awx_docker</li> </ul>"},{"location":"ansible/ansible_role_awx_docker/#features","title":"Features","text":"<ul> <li>Deploys AWX, Postgres, and Redis in Docker</li> <li>Easily set admin credentials and ports</li> <li>Mounts volumes for persistent data</li> <li>Supports custom organizations, teams, and LDAP</li> <li>Integrates with other roles (e.g., Docker, Nginx, Nautobot)</li> </ul>"},{"location":"ansible/ansible_role_awx_docker/#requirements","title":"Requirements","text":"<ul> <li>Linux system with Docker installed (use <code>bsmeding.docker</code> role)</li> <li>Python and Ansible installed</li> </ul>"},{"location":"ansible/ansible_role_awx_docker/#common-role-variables","title":"Common Role Variables","text":"<p>Below are some of the most useful variables. For the full list and advanced options, see the role README.</p> <pre><code># Admin credentials\nawx__admin_user: admin\nawx__admin_password: password\n\n# Web ports\nawx__port_web_http: 9080\nawx__port_web_https: 9443\n\n# Postgres credentials\nawx__postgres_username: awxpguser\nawx__postgres_password: awxpgpass\nawx__postgres_db: awx\n\n# Host root directory\nawx__host_root: /opt/awx\n\n# Volumes to mount\nawx__project_data_dir: \"{{ awx__host_root }}/projects\"\nawx__docker_compose_dir: \"{{ awx__host_root }}/docker_compose\"\n\n# AWX version\nawx__version: 17.1.0\n</code></pre>"},{"location":"ansible/ansible_role_awx_docker/#example-playbook","title":"Example Playbook","text":"<pre><code>- hosts: all\n  become: true\n  roles:\n    - role: bsmeding.docker  # Ensure Docker is installed\n    - role: bsmeding.awx_docker\n      vars:\n        awx__admin_user: admin\n        awx__admin_password: password\n</code></pre>"},{"location":"ansible/ansible_role_awx_docker/#usage-tips","title":"Usage Tips","text":"<ul> <li>Use with the <code>bsmeding.docker</code> role to ensure Docker is present.</li> <li>For advanced options, see the role README.</li> </ul>"},{"location":"ansible/ansible_role_awx_docker/#more-information","title":"More Information","text":"<ul> <li>GitHub Repository</li> <li>Ansible Galaxy Documentation</li> </ul> <p>MIT License. Created and maintained by Bart Smeding.</p>"},{"location":"ansible/ansible_role_docker/","title":"Ansible Role: Docker (<code>bsmeding.docker</code>)","text":"<p>This Ansible role installs Docker on Linux systems and is designed to work seamlessly with other Docker container roles. It is based on geerlingguy/ansible-role-docker with enhancements for better integration and automation.</p> <ul> <li>GitHub: bsmeding/ansible_role_docker</li> <li>Ansible Galaxy: bsmeding.docker</li> </ul>"},{"location":"ansible/ansible_role_docker/#features","title":"Features","text":"<ul> <li>Installs Docker CE (Community Edition) or EE (Enterprise Edition)</li> <li>Optionally installs Docker Compose (plugin or standalone)</li> <li>Adds users to the <code>docker</code> group</li> <li>Sets <code>docker_uid</code> and <code>docker_gid</code> for use in other roles</li> <li>Removes Podman on RedHat-based systems</li> <li>Supports Ubuntu, Debian, Rocky Linux, Pop!_OS, and Linux Mint</li> <li>Configurable proxy, repository, and daemon options</li> </ul>"},{"location":"ansible/ansible_role_docker/#requirements","title":"Requirements","text":"<ul> <li>Linux system (Ubuntu, Debian, Rocky Linux, etc.)</li> <li>Python and Ansible installed</li> </ul>"},{"location":"ansible/ansible_role_docker/#role-variables-common","title":"Role Variables (Common)","text":"<p>Below are some of the most useful variables. See the role README for the full list.</p> <pre><code># Docker edition ('ce' for Community Edition, 'ee' for Enterprise Edition)\ndocker_edition: 'ce'\n\n# List of users to add to the docker group\ndocker_users: []\n\n# Install Docker Compose plugin?\ndocker_install_compose_plugin: true\n\n# Install Docker Compose standalone binary?\ndocker_install_compose: false\n\n# Proxy settings (if needed)\nhttp_proxy: ''\nhttps_proxy: ''\nno_proxy: ''\n\n# Manage Docker service\ndocker_service_manage: true\ndocker_service_state: started\ndocker_service_enabled: true\n</code></pre>"},{"location":"ansible/ansible_role_docker/#example-playbook","title":"Example Playbook","text":"<pre><code>- hosts: all\n  become: true\n  roles:\n    - role: bsmeding.docker\n      vars:\n        docker_users:\n          - youruser\n        docker_install_compose_plugin: true\n</code></pre>"},{"location":"ansible/ansible_role_docker/#usage-tips","title":"Usage Tips","text":"<ul> <li>To use with other roles, simply include <code>bsmeding.docker</code> before your container roles.</li> <li>The role sets <code>docker_uid</code> and <code>docker_gid</code> facts for use in downstream roles.</li> <li>For advanced configuration, override variables in your playbook or inventory.</li> </ul>"},{"location":"ansible/ansible_role_docker/#more-information","title":"More Information","text":"<ul> <li>GitHub Repository</li> <li>Ansible Galaxy Documentation</li> <li>geerlingguy/ansible-role-docker (upstream)</li> </ul> <p>MIT License. Originally created by Jeff Geerling, extended by Bart Smeding.</p>"},{"location":"ansible/ansible_role_gitlab_docker/","title":"Ansible Role: GitLab CE Docker (<code>bsmeding.gitlab_ce_docker</code>)","text":"<p>This Ansible role deploys GitLab Community Edition in a Docker container. It is designed for easy, automated GitLab deployments for labs, demos, or production.</p> <ul> <li>GitHub: bsmeding/ansible_role_gitlab_ce_docker</li> <li>Ansible Galaxy: bsmeding.gitlab_ce_docker</li> </ul>"},{"location":"ansible/ansible_role_gitlab_docker/#features","title":"Features","text":"<ul> <li>Deploys GitLab CE in Docker</li> <li>Supports custom hostname, ports, and SSL</li> <li>LDAP integration and registry support</li> <li>Mounts volumes for persistent data</li> <li>Integrates with other roles (e.g., Docker, Nginx, SWAG)</li> </ul>"},{"location":"ansible/ansible_role_gitlab_docker/#requirements","title":"Requirements","text":"<ul> <li>Linux system with Docker installed (use <code>bsmeding.docker</code> role)</li> <li>Python and Ansible installed</li> </ul>"},{"location":"ansible/ansible_role_gitlab_docker/#common-role-variables","title":"Common Role Variables","text":"<p>Below are some of the most useful variables. For the full list and advanced options, see the role README.</p> <pre><code># Name of the container\ngitlab__name: gitlab\n\n# Docker image to use\ngitlab__image: 'gitlab/gitlab-ce:latest'\n\n# Hostname and ports\ngitlab__hostname: git.example.com\ngitlab__port_web_http: 9081\ngitlab__port_web_https: 9444\ngitlab__port_ssh: 2222\n\n# LDAP integration\ngitlab__ldap_server_host_ip: ''\ngitlab__ldap_auth_bind_dn: ''\ngitlab__ldap_auth_bind_pass: ''\n\n# Volumes to mount\ngitlab__directory_volumes:\n  - \"{{ gitlab__home }}/config:/etc/gitlab\"\n  - \"{{ gitlab__home }}/logs:/var/log/gitlab\"\n  - \"{{ gitlab__home }}/data:/var/opt/gitlab\"\n</code></pre>"},{"location":"ansible/ansible_role_gitlab_docker/#example-playbook","title":"Example Playbook","text":"<pre><code>- hosts: all\n  become: true\n  roles:\n    - role: bsmeding.docker  # Ensure Docker is installed\n    - role: bsmeding.gitlab_ce_docker\n      vars:\n        gitlab__hostname: git.example.com\n        gitlab__port_web_http: 9081\n        gitlab__port_web_https: 9444\n        gitlab__port_ssh: 2222\n</code></pre>"},{"location":"ansible/ansible_role_gitlab_docker/#usage-tips","title":"Usage Tips","text":"<ul> <li>Use with the <code>bsmeding.docker</code> role to ensure Docker is present.</li> <li>For advanced options, see the role README.</li> </ul>"},{"location":"ansible/ansible_role_gitlab_docker/#more-information","title":"More Information","text":"<ul> <li>GitHub Repository</li> <li>Ansible Galaxy Documentation</li> </ul> <p>MIT License. Created and maintained by Bart Smeding.</p>"},{"location":"ansible/ansible_role_nautobot_docker/","title":"Ansible Role: Nautobot Docker (<code>bsmeding.nautobot_docker</code>)","text":"<p>This Ansible role deploys Nautobot (Network Source of Truth) in a Docker container. It is designed for easy, automated Nautobot deployments for labs, demos, or production.</p> <ul> <li>GitHub: bsmeding/ansible_role_nautobot_docker</li> <li>Ansible Galaxy: bsmeding.nautobot_docker</li> </ul>"},{"location":"ansible/ansible_role_nautobot_docker/#features","title":"Features","text":"<ul> <li>Deploys Nautobot and dependencies (Postgres, Redis) in Docker</li> <li>Supports plugins, LDAP, and custom configuration</li> <li>Easily set admin credentials and API token</li> <li>Mounts volumes for persistent data</li> <li>Integrates with other roles (e.g., Docker, Nginx, AWX)</li> </ul>"},{"location":"ansible/ansible_role_nautobot_docker/#requirements","title":"Requirements","text":"<ul> <li>Linux system with Docker installed (use <code>bsmeding.docker</code> role)</li> <li>Python and Ansible installed</li> </ul>"},{"location":"ansible/ansible_role_nautobot_docker/#common-role-variables","title":"Common Role Variables","text":"<p>Below are some of the most useful variables. For the full list and advanced options, see the role README.</p> <pre><code># Name of the container\nnautobot__name: nautobot\n\n# Docker image to use\nnautobot__image: nautobot:2.3\n\n# HTTP/HTTPS ports\nnautobot__port_http: 8080\nnautobot__port_https: 8444\n\n# Admin credentials\nnautobot__superuser_name: admin\nnautobot__superuser_password: admin\nnautobot__superuser_api_token: \"1234567890abcdefghijklmnopqrstuvwxyz\"\n\n# Enable/disable internal Postgres/Redis\nnautobot__install_own_postgres_db: true\n\n# Volumes to mount\nnautobot__directory_volumes:\n  - \"{{ nautobot__home }}/logs:/var/log/nautobot\"\n  - \"{{ nautobot__home }}/media:/opt/nautobot/media\"\n  - \"{{ nautobot__home }}/jobs:/opt/nautobot/jobs\"\n  - \"{{ nautobot__home }}/static:/opt/nautobot/static\"\n\n# Plugins\nnautobot__plugins: []\n</code></pre>"},{"location":"ansible/ansible_role_nautobot_docker/#example-playbook","title":"Example Playbook","text":"<pre><code>- hosts: all\n  become: true\n  roles:\n    - role: bsmeding.docker  # Ensure Docker is installed\n    - role: bsmeding.nautobot_docker\n      vars:\n        nautobot__superuser_name: admin\n        nautobot__superuser_password: admin\n        nautobot__superuser_api_token: \"myapitoken\"\n</code></pre>"},{"location":"ansible/ansible_role_nautobot_docker/#usage-tips","title":"Usage Tips","text":"<ul> <li>Use with the <code>bsmeding.docker</code> role to ensure Docker is present.</li> <li>Set <code>nautobot__install_own_postgres_db: false</code> to use an external Postgres DB.</li> <li>For advanced options, see the role README.</li> </ul>"},{"location":"ansible/ansible_role_nautobot_docker/#more-information","title":"More Information","text":"<ul> <li>GitHub Repository</li> <li>Ansible Galaxy Documentation</li> </ul> <p>MIT License. Created and maintained by Bart Smeding.</p>"},{"location":"ansible/ansible_role_nginx_docker/","title":"Ansible Role: Nginx Docker (<code>bsmeding.nginx_docker</code>)","text":"<p>This Ansible role deploys Nginx as a reverse proxy in a Docker container. It is designed for flexible, automated Nginx deployments and can be used as a standalone reverse proxy or as part of a larger automation stack.</p> <ul> <li>GitHub: bsmeding/ansible_role_nginx_docker</li> <li>Ansible Galaxy: bsmeding.nginx_docker</li> </ul>"},{"location":"ansible/ansible_role_nginx_docker/#features","title":"Features","text":"<ul> <li>Deploys Nginx in a Docker container</li> <li>Supports custom Nginx configuration via templates</li> <li>Easily expose ports and mount volumes</li> <li>Works with Let's Encrypt, SSL, and custom certificates</li> <li>Integrates with other roles (e.g., Docker, SWAG, GitLab)</li> </ul>"},{"location":"ansible/ansible_role_nginx_docker/#requirements","title":"Requirements","text":"<ul> <li>Linux system with Docker installed (use <code>bsmeding.docker</code> role)</li> <li>Python and Ansible installed</li> </ul>"},{"location":"ansible/ansible_role_nginx_docker/#common-role-variables","title":"Common Role Variables","text":"<p>Below are some of the most useful variables. For the full list and advanced options, see the role README.</p> <pre><code># Name of the container\nnginx__name: nginx\n\n# Docker image to use\nnginx__image: linuxserver/nginx:latest\n\n# Ports to expose\nnginx__ports:\n  - \"80:80\"\n  - \"443:443\"\n\n# Volumes to mount\nnginx__directory_volumes:\n  - \"/etc/nginx/conf.d:/etc/nginx/conf.d\"\n  - \"/etc/letsencrypt:/etc/letsencrypt\"\n\n# Custom environment variables\nnginx__env: {}\n\n# Custom Nginx config template\nnginx__config_template: \"nginx.conf.j2\"\n</code></pre>"},{"location":"ansible/ansible_role_nginx_docker/#example-playbook","title":"Example Playbook","text":"<pre><code>- hosts: all\n  become: true\n  roles:\n    - role: bsmeding.docker  # Ensure Docker is installed\n    - role: bsmeding.nginx_docker\n      vars:\n        nginx__ports:\n          - \"80:80\"\n          - \"443:443\"\n        nginx__directory_volumes:\n          - \"/etc/nginx/conf.d:/etc/nginx/conf.d\"\n          - \"/etc/letsencrypt:/etc/letsencrypt\"\n</code></pre>"},{"location":"ansible/ansible_role_nginx_docker/#usage-tips","title":"Usage Tips","text":"<ul> <li>Use with the <code>bsmeding.docker</code> role to ensure Docker is present.</li> <li>Customize Nginx configuration by providing your own template or mounting config files.</li> <li>Expose only the ports you need for your environment.</li> <li>For advanced options, see the role README.</li> </ul>"},{"location":"ansible/ansible_role_nginx_docker/#more-information","title":"More Information","text":"<ul> <li>GitHub Repository</li> <li>Ansible Galaxy Documentation</li> </ul> <p>MIT License. Created and maintained by Bart Smeding.</p>"},{"location":"ansible/ansible_role_swag_docker/","title":"Ansible Role: SWAG (Secure Web Application Gateway)","text":"<p>We've released a new Ansible Role to deploy the SWAG (Secure Web Application Gateway) reverse-proxy server created by linuxserver.io. This role installs the SWAG Docker image on Linux systems running Docker.</p> <p>Repository: linuxserver/docker-swag</p>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#what-is-swag","title":"What is SWAG?","text":"<p>SWAG (Secure Web Application Gateway, formerly known as letsencrypt) sets up an Nginx webserver and reverse proxy with PHP support and a built-in certbot client for automated SSL certificate generation and renewal (Let's Encrypt and ZeroSSL). It also includes fail2ban for intrusion prevention.</p>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#certbot-plugins","title":"Certbot Plugins","text":"<p>SWAG includes many Certbot plugins out of the box. If you need a plugin that's not included, use the Universal Package Install Docker Mod:</p> <pre><code>environment:\n  DOCKER_MODS: linuxserver/mods:universal-package-install\n  INSTALL_PIP_PACKAGES: certbot-dns-&lt;plugin&gt;\n</code></pre> <p>Set the required credentials in <code>/config/dns-conf/&lt;plugin&gt;.ini</code>. Test with <code>STAGING=true</code> first.</p>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#security-and-password-protection","title":"Security and Password Protection","text":"<ul> <li>SWAG detects changes to URLs and subdomains, revokes existing certs, and generates new ones on start.</li> <li>To password-protect your sites, use htpasswd:   <pre><code>docker exec -it swag htpasswd -c /config/nginx/.htpasswd &lt;username&gt;\n</code></pre></li> <li>For additional users, omit the <code>-c</code> flag.</li> <li>LDAP authentication is also supported (see the provided <code>ldap.conf</code> and use the <code>linuxserver/ldap-auth</code> image).</li> </ul>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#site-config-and-reverse-proxy","title":"Site Config and Reverse Proxy","text":"<ul> <li>Default site config: <code>/config/nginx/site-confs/default.conf</code></li> <li>Add or modify conf files in this directory. Deleting the default will recreate it on container start.</li> <li>Preset reverse proxy configs for popular apps are available in <code>/config/nginx/proxy_confs</code>.</li> <li>To hide your site from search engines, add this to your site config:   <pre><code>add_header X-Robots-Tag \"noindex, nofollow, nosnippet, noarchive\";\n</code></pre></li> <li>To redirect HTTP to HTTPS, expose port 80.</li> </ul>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#using-certs-in-other-containers","title":"Using Certs in Other Containers","text":"<ul> <li>Mount the SWAG config folder in other containers to use certs:   <pre><code>-v /path-to-swag-config:/swag-ssl\n# Use certs from /swag-ssl/keys/letsencrypt/\n</code></pre></li> <li>Or, mount only the <code>/etc</code> subfolder for more security:   <pre><code>-v /path-to-swag-config/etc:/swag-ssl\n# Use certs from /swag-ssl/letsencrypt/live/&lt;your.domain.url&gt;/\n</code></pre></li> </ul>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#using-fail2ban","title":"Using fail2ban","text":"<ul> <li>SWAG includes fail2ban with 5 default jails.</li> <li>To check status:   <pre><code>docker exec -it swag fail2ban-client status\ndocker exec -it swag fail2ban-client status &lt;jail name&gt;\n</code></pre></li> <li>To unban an IP:   <pre><code>docker exec -it swag fail2ban-client set &lt;jail name&gt; unbanip &lt;IP&gt;\n</code></pre></li> <li>See fail2ban commands for more.</li> </ul>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#updating-configs","title":"Updating Configs","text":"<ul> <li>Config updates are noted in the changelog but not automatically applied.</li> <li>If you have modified a config file, review changes and apply manually, or delete and restart the container to regenerate.</li> <li>Proxy sample updates are not listed in the changelog. See reverse-proxy-confs commits.</li> </ul>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#example-playbook","title":"Example Playbook","text":"<p>This example installs Docker and the SWAG reverse proxy container with most defaults. Set <code>swag__url</code> to your own domain and subdomains as needed.</p> <p>Note: This playbook uses another role, <code>bsmeding.docker</code>, to install Docker. Install it with <code>ansible-galaxy role install bsmeding.docker</code> or install Docker manually and comment out the first task.</p> <pre><code>---\n- name: Install DMZ\n  hosts: [dmz]\n  gather_facts: true\n  become: yes\n  vars:\n    swag__port_web: 80\n    swag__port_ssh: 443\n    swag__url: 'example.com'\n    swag__subdomains: 'www'\n    swag__validation: 'http'\n  tasks:\n    - name: Check if docker is installed\n      ansible.builtin.include_role:\n        name: bsmeding.docker\n\n    - name: Check if SWAG is installed\n      ansible.builtin.include_role:\n        name: bsmeding.docker_swag\n</code></pre>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#subdomain-reverse-proxy-example","title":"Subdomain Reverse Proxy Example","text":"<p>To use the reverse proxy, templates are available so you don't have to create Nginx config files yourself. For example, to point <code>https://dash.example.com</code> to <code>http://192.168.111.241:9090</code>:</p> <pre><code>swag__proxy_confs_subdomain:\n  - server_name: dash.example.com\n    listen: 443\n    default_upstream_proto: http\n    default_upstream_url: 192.168.1.10\n    default_upstream_port: 9090\n</code></pre>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#variables","title":"Variables","text":"<p>A selection of variables you can use (see the role for full list):</p> Variable Default Value Description <code>swag__name</code> <code>swag</code> The name of the container. <code>swag__image</code> <code>lscr.io/linuxserver/swag</code> The Docker image to use for SWAG. <code>swag__port_web</code> <code>80</code> Port for web traffic. <code>swag__port_ssh</code> <code>443</code> Port for SSH/SSL traffic. <code>swag__skip_setup</code> <code>false</code> Set to <code>true</code> to disable the setup stage of the SWAG image. <code>swag__url</code> <code>'example.com'</code> The base URL for the SWAG setup. <code>swag__subdomains</code> <code>'www'</code> Subdomains for the SWAG setup. <code>swag__validation</code> <code>'http'</code> Method of validation (<code>http</code> or <code>dns</code>). <code>swag__certprovider</code> <code>''</code> (optional) Certificate provider (e.g., <code>zerossl</code>). <code>swag__dnsplugin</code> <code>''</code> (optional) DNS plugin (e.g., <code>cloudflare</code>). <code>swag__cloudflare_global_email</code> <code>''</code> (optional) Cloudflare global email (if using Cloudflare DNS plugin). <code>swag__cloudflare_global_api</code> <code>''</code> (optional) Cloudflare global API key (if using Cloudflare DNS plugin). <code>swag__cloudflare_api_token</code> <code>''</code> (optional) Cloudflare API token (if using Cloudflare DNS plugin). <code>swag__email</code> <code>'mail@example.com'</code> Email for certificate provider notifications. <code>swag__only_subdomains</code> <code>'false'</code> Use only subdomains for the SSL certificate. <code>swag__extra_domain</code> <code>''</code> Additional domains for the SSL certificate. <code>swag__staging</code> <code>'true'</code> Use staging environment (recommended for testing with Let's Encrypt). <code>swag__docker_mods</code> <code>'linuxserver/mods:swag-cloudflare-real-ip'</code> Docker mods to use with SWAG. <code>swag__remove_existing_container</code> <code>no</code> Remove any existing container before creating a new one. <code>swag__remove_existing_home_dir</code> <code>no</code> Removes the home directory (for testing purposes only!). <code>swag__pull_image</code> <code>yes</code> Pull the Docker image if not already pulled. <code>swag__network_mode</code> <code>'default'</code> Network mode for Docker container. <code>swag__network_cidr</code> <code>'172.16.81.0/26'</code> CIDR for network configuration. <code>swag__network</code> <code>'proxy'</code> Network to connect the container to. <code>swag__container_networks</code> <code>[{'name': 'bridge'}, {'name': swag__network}]</code> List of networks for the container to join. <code>swag__purge_networks</code> <code>no</code> Remove all networks upon container removal. <code>swag__log_driver</code> <code>'json-file'</code> Log driver for Docker. <code>swag__log_options</code> <code>{}</code> Additional options for the log driver. <code>swag__home</code> <code>\"/opt/{{ swag__name }}\"</code> Home directory for SWAG files. <code>swag__use_local_directories_instead_of_volumes</code> <code>true</code> Use mapped folders instead of volumes (volumes not set up). <code>swag__directories</code> List of directories with paths and permissions Directories to create with specific permissions. <code>swag__ports</code> <code>[\"{{ swag__port_web }}:80\", \"{{ swag__port_ssh }}:443\"]</code> Ports to expose for SWAG container. <code>swag__directory_volumes</code> <code>[\"{{ swag__home }}/config:/config\"]</code> Directory volumes for the container. <code>swag__file_volumes</code> <code>[\"/var/run/docker.sock:/var/run/docker.sock:ro\"]</code> File volumes for the container. <code>swag__default_env</code> Various defaults (see below) Default environment variables for the SWAG container. <code>swag__env</code> <code>{}</code> Additional environment variables. <code>swag__proxy_confs_subdomain</code> List of subdomain configuration proxies Subdomain proxy configurations for different applications.","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#default-environment-variables-swag__default_env","title":"Default Environment Variables (<code>swag__default_env</code>)","text":"<ul> <li><code>TZ</code>: Time zone for the container (default: <code>Europe/Paris</code>).</li> <li><code>PUID</code>: User ID for Docker (default: <code>1040</code>).</li> <li><code>PGID</code>: Group ID for Docker (default: <code>1001</code>).</li> <li><code>URL</code>: Base URL for SWAG.</li> <li><code>SUBDOMAINS</code>: Subdomains to use (default: <code>www</code>).</li> <li><code>VALIDATION</code>: Validation method (default: <code>http</code>).</li> <li><code>CERTPROVIDER</code>: Certificate provider (optional).</li> <li><code>DNSPLUGIN</code>: DNS plugin (optional).</li> <li><code>EMAIL</code>: Email for certificate notifications.</li> <li><code>ONLY_SUBDOMAINS</code>: Use only subdomains (default: <code>false</code>).</li> <li><code>EXTRA_DOMAINS</code>: Extra domains for SSL (optional).</li> <li><code>STAGING</code>: Use staging environment for testing (default: <code>false</code>).</li> <li><code>DOCKER_MODS</code>: Docker mods (optional).</li> <li><code>CF_ZONE_ID</code>, <code>CF_ACCOUNT_ID</code>, <code>CF_API_TOKEN</code>: Cloudflare credentials if using Cloudflare DNS validation.</li> </ul>","tags":["ansible","swag","docker","linuxserver"]},{"location":"ansible/ansible_role_swag_docker/#proxy-configuration-examples","title":"Proxy Configuration Examples","text":"<p>In <code>swag__proxy_confs_subdomain</code>, you can configure additional subdomain proxies as follows:</p> <pre><code>swag__proxy_confs_subdomain:\n  - server_name: dash.example.com\n    listen: 443\n    enable_ldap: false\n    enable_authelia: true\n    default_upstream_proto: http\n    default_upstream_url: dashboard\n    default_upstream_port: 9090\n  - server_name: app1.example.com\n    listen: 443\n    enable_ldap: false\n    enable_authelia: false\n    default_upstream_proto: http\n    default_upstream_url: 192.168.1.10\n    default_upstream_port: 8080\n</code></pre>","tags":["ansible","swag","docker","linuxserver"]},{"location":"blog/","title":"Welcome to the Blog","text":"<p>Explore a curated collection of articles, tutorials, and project updates focused on network automation, DevOps, infrastructure, and open-source tools.</p>"},{"location":"blog/#what-youll-find-here","title":"What You'll Find Here","text":"<ul> <li>Network Automation: Step-by-step guides and real-world examples using Ansible, NAPALM, and other automation tools.</li> <li>DevOps &amp; CI/CD: Best practices for automating infrastructure, pipelines, and deployments.</li> <li>Open Source Projects: Insights and updates on tools like Nautobot, AWX, Gitea, and more.</li> <li>Linux &amp; Monitoring: Tips for managing Linux environments and monitoring with tools like Netdata.</li> <li>How-tos &amp; Troubleshooting: Practical solutions for common challenges in network and infrastructure management.</li> </ul>"},{"location":"blog/#recent-topics","title":"Recent Topics","text":"<ul> <li>Setting up a full network automation development environment</li> <li>Deploying and managing SWAG (Secure Web Application Gateway) with Ansible</li> <li>Ansible network settings and best practices</li> <li>Proxmox cluster setup and troubleshooting</li> <li>Netdata monitoring system (coming soon)</li> </ul>"},{"location":"blog/#get-involved","title":"Get Involved","text":"<p>Have questions, suggestions, or want to share your own experiences? Feel free to leave comments on posts or reach out via the contact page. Your feedback helps improve the content for everyone!</p> <p>Start exploring the posts below and level up your automation and infrastructure skills!</p>"},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/","title":"Introduction to NetDevOps: Bridging Network Operations and Development","text":"<p>NetDevOps represents the convergence of network operations and development practices, bringing the agility and efficiency of DevOps to the networking world. This approach is revolutionizing how organizations manage, automate, and scale their network infrastructure.</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#what-is-netdevops","title":"What is NetDevOps?","text":"<p>NetDevOps is the application of DevOps principles and practices to network operations. It combines the collaborative culture, automation practices, and rapid delivery methodologies of DevOps with the specific requirements and challenges of network infrastructure management.</p> <p>As industry experts explain, \"NetDevOps is transforming the way networks are managed and optimized by bringing together network operations and development practices. With the growing complexity of modern network infrastructures, the traditional approach of manually configuring and troubleshooting networks is no longer sufficient.\"</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#core-principles-of-netdevops","title":"Core Principles of NetDevOps","text":"","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#1-automation-first","title":"1. Automation First","text":"<p>Network automation is the foundation of NetDevOps. By automating repetitive tasks, organizations can: - Reduce human error - Increase operational efficiency - Enable faster deployment of network changes - Improve consistency across environments</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#2-infrastructure-as-code-iac","title":"2. Infrastructure as Code (IaC)","text":"<p>Treating network configurations as code enables: - Version control for network configurations - Consistent deployment across environments - Automated testing and validation - Rollback capabilities</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#3-continuous-integrationcontinuous-deployment-cicd","title":"3. Continuous Integration/Continuous Deployment (CI/CD)","text":"<p>Implementing CI/CD pipelines for network changes: - Automated testing of network configurations - Gradual deployment strategies - Immediate feedback on configuration issues - Reduced deployment windows</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#4-collaboration-and-communication","title":"4. Collaboration and Communication","text":"<p>Breaking down silos between teams: - Cross-functional collaboration - Shared responsibility for network health - Knowledge sharing and documentation - Aligned goals and objectives</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#traditional-vs-netdevops-approach","title":"Traditional vs. NetDevOps Approach","text":"","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#traditional-network-operations","title":"Traditional Network Operations","text":"<ul> <li>Manual configuration changes</li> <li>Siloed teams and responsibilities</li> <li>Reactive troubleshooting</li> <li>Limited automation</li> <li>Long deployment cycles</li> <li>Inconsistent configurations</li> </ul>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#netdevops-approach","title":"NetDevOps Approach","text":"<ul> <li>Automated configuration management</li> <li>Cross-functional collaboration</li> <li>Proactive monitoring and alerting</li> <li>Comprehensive automation</li> <li>Rapid deployment capabilities</li> <li>Consistent, repeatable processes</li> </ul>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#key-benefits-of-netdevops","title":"Key Benefits of NetDevOps","text":"","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#increased-agility","title":"Increased Agility","text":"<p>NetDevOps enables organizations to respond quickly to business demands by: - Automating network provisioning - Implementing rapid configuration changes - Enabling self-service capabilities - Reducing manual intervention</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#improved-reliability","title":"Improved Reliability","text":"<p>By implementing automation and testing: - Reduced human error - Consistent configurations - Automated validation - Faster problem resolution</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#enhanced-scalability","title":"Enhanced Scalability","text":"<p>NetDevOps practices support growth through: - Automated scaling capabilities - Consistent deployment patterns - Reduced operational overhead - Improved resource utilization</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#cost-efficiency","title":"Cost Efficiency","text":"<p>Organizations can achieve cost savings through: - Reduced manual labor - Faster time to market - Improved resource utilization - Lower error rates</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#getting-started-with-netdevops","title":"Getting Started with NetDevOps","text":"","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#1-assess-current-state","title":"1. Assess Current State","text":"<p>Begin by evaluating your current network operations: - Identify manual processes that can be automated - Document current pain points and inefficiencies - Assess team skills and training needs - Review existing tools and technologies</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#2-start-small","title":"2. Start Small","text":"<p>Implement NetDevOps incrementally: - Begin with simple automation tasks - Focus on high-impact, low-risk changes - Build on successes and lessons learned - Gradually expand automation scope</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#3-invest-in-tools-and-training","title":"3. Invest in Tools and Training","text":"<p>Essential tools for NetDevOps include: - Configuration Management: Ansible, SaltStack, Puppet - Version Control: Git, GitLab, GitHub - CI/CD: Jenkins, GitLab CI/CD, GitHub Actions, Azure DevOps - Monitoring: Prometheus, Grafana, Nagios, Zabbix - Network Automation: Netmiko, NAPALM, pyATS, Cisco pyATS - Network APIs: REST APIs, NETCONF, gRPC</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#4-foster-collaboration","title":"4. Foster Collaboration","text":"<p>Encourage cross-functional teamwork: - Regular meetings between network and development teams - Shared goals and metrics - Knowledge sharing sessions - Cross-training opportunities</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#common-challenges-and-solutions","title":"Common Challenges and Solutions","text":"","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#challenge-resistance-to-change","title":"Challenge: Resistance to Change","text":"<p>Solution: Start with small wins, demonstrate value, and provide training and support.</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#challenge-skills-gap","title":"Challenge: Skills Gap","text":"<p>Solution: Invest in training, hire for cultural fit, and encourage continuous learning.</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#challenge-tool-complexity","title":"Challenge: Tool Complexity","text":"<p>Solution: Start with simple tools, gradually introduce complexity, and focus on integration.</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#challenge-legacy-infrastructure","title":"Challenge: Legacy Infrastructure","text":"<p>Solution: Implement gradual migration strategies, use abstraction layers, and prioritize modernization.</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#real-world-examples","title":"Real-World Examples","text":"","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#example-1-network-configuration-automation","title":"Example 1: Network Configuration Automation","text":"<pre><code># Ansible playbook for network configuration\n---\n- name: Configure Network Devices\n  hosts: network_devices\n  gather_facts: no\n  tasks:\n    - name: Configure VLANs\n      ios_config:\n        lines:\n          - vlan 10\n          - name DATA\n          - vlan 20\n          - name VOICE\n        parents: interface GigabitEthernet0/1\n      when: inventory_hostname in groups['switches']\n</code></pre>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#example-2-cicd-pipeline-for-network-changes","title":"Example 2: CI/CD Pipeline for Network Changes","text":"<pre><code># GitLab CI/CD pipeline example\nstages:\n  - validate\n  - test\n  - deploy\n\nvalidate_config:\n  stage: validate\n  script:\n    - ansible-playbook --check playbook.yml\n\ntest_config:\n  stage: test\n  script:\n    - ansible-playbook --limit test_environment playbook.yml\n\ndeploy_config:\n  stage: deploy\n  script:\n    - ansible-playbook playbook.yml\n  when: manual\n</code></pre>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#example-3-python-script-for-network-automation","title":"Example 3: Python Script for Network Automation","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nSimple network automation script using Netmiko\n\"\"\"\nfrom netmiko import ConnectHandler\nimport yaml\n\ndef load_config():\n    with open('network_config.yml', 'r') as file:\n        return yaml.safe_load(file)\n\ndef configure_device(device_info, config_commands):\n    try:\n        with ConnectHandler(**device_info) as net_connect:\n            output = net_connect.send_config_set(config_commands)\n            return output\n    except Exception as e:\n        print(f\"Error configuring {device_info['host']}: {e}\")\n        return None\n\ndef main():\n    config = load_config()\n    for device in config['devices']:\n        print(f\"Configuring {device['host']}...\")\n        result = configure_device(device, config['commands'])\n        if result:\n            print(f\"Successfully configured {device['host']}\")\n</code></pre>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#industry-trends-in-2022","title":"Industry Trends in 2022","text":"<p>As we move through 2022, several key trends are shaping the NetDevOps landscape:</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#1-cloud-native-networking","title":"1. Cloud-Native Networking","text":"<ul> <li>Kubernetes networking and service mesh adoption</li> <li>Multi-cloud network management</li> <li>Cloud-native network functions (CNFs)</li> </ul>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#2-intent-based-networking-ibn","title":"2. Intent-Based Networking (IBN)","text":"<ul> <li>Declarative network configuration</li> <li>Automated policy enforcement</li> <li>Self-healing networks</li> </ul>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#3-network-programmability","title":"3. Network Programmability","text":"<ul> <li>REST APIs becoming standard</li> <li>gRPC and Protocol Buffers adoption</li> <li>Model-driven programmability</li> </ul>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#4-zero-trust-security","title":"4. Zero Trust Security","text":"<ul> <li>Network segmentation automation</li> <li>Identity-based access control</li> <li>Continuous security validation</li> </ul>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#5-edge-computing","title":"5. Edge Computing","text":"<ul> <li>Distributed network automation</li> <li>Edge-native applications</li> <li>5G network automation</li> </ul>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#the-future-of-netdevops","title":"The Future of NetDevOps","text":"<p>Looking ahead, NetDevOps will continue to evolve with emerging technologies:</p> <ul> <li>AI and Machine Learning: Intelligent automation and predictive analytics</li> <li>Zero-Touch Provisioning: Fully automated network deployment</li> <li>Network Slicing: Virtualized network segments for different use cases</li> <li>Quantum Networking: Future-proofing for quantum computing</li> <li>Sustainable Networking: Energy-efficient network automation</li> </ul>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#conclusion","title":"Conclusion","text":"<p>NetDevOps represents a fundamental shift in how organizations approach network operations. By embracing automation, collaboration, and continuous improvement, organizations can achieve greater agility, reliability, and efficiency in their network operations.</p> <p>The journey to NetDevOps requires commitment, patience, and a willingness to change. Start small, focus on high-impact areas, and gradually build your NetDevOps capabilities. The benefits of improved agility, reliability, and cost efficiency make the effort worthwhile.</p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/introduction-to-netdevops-bridging-network-operations-and-development/#additional-resources","title":"Additional Resources","text":"<ul> <li>Network to Code Blog - Expert insights on network automation</li> <li>Cisco DevNet - Cisco's developer resources and learning paths</li> <li>Juniper Networks Automation - Juniper automation documentation</li> <li>Red Hat Ansible Network Automation - Ansible network automation guides</li> <li>GitHub Network Automation - Open source network automation projects</li> </ul> <p>This post is part of our NetDevOps series. Stay tuned for more articles on automation tools, best practices, and real-world implementations. </p>","tags":["netdevops","network automation","devops","automation","networking"]},{"location":"blog/ansible---network-settings/","title":"Ansible - Network Settings","text":"<p>A quick guide to Ansible network settings and how to use them for network automation tasks.</p>","tags":["ansible","network-cli"]},{"location":"blog/ansible---network-settings/#overview","title":"Overview","text":"<p>Ansible provides modules and connection plugins for automating network devices. You can use the <code>network_cli</code> connection for most network platforms (Cisco, Arista, Juniper, etc.).</p>","tags":["ansible","network-cli"]},{"location":"blog/ansible---network-settings/#step-1-inventory-setup-copy-paste-example","title":"Step 1: Inventory Setup (Copy-Paste Example)","text":"<p>Create an inventory file (e.g., <code>inventory.yml</code>):</p> <pre><code>all:\n  children:\n    routers:\n      hosts:\n        r1:\n          ansible_host: 192.0.2.11\n          ansible_user: admin\n          ansible_password: Cisco123\n          ansible_network_os: ios\n        r2:\n          ansible_host: 192.0.2.12\n          ansible_user: admin\n          ansible_password: Arista123\n          ansible_network_os: eos\n</code></pre>","tags":["ansible","network-cli"]},{"location":"blog/ansible---network-settings/#step-2-ansiblecfg-for-network-automation","title":"Step 2: ansible.cfg for Network Automation","text":"<p>Create an <code>ansible.cfg</code> in your project directory:</p> <pre><code>[defaults]\ninventory = ./inventory.yml\nhost_key_checking = False\nretry_files_enabled = False\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=60s\n</code></pre> <ul> <li><code>host_key_checking = False</code> disables SSH host key checking (useful for labs).</li> <li><code>ssh_args</code> enables SSH connection reuse for speed.</li> </ul>","tags":["ansible","network-cli"]},{"location":"blog/ansible---network-settings/#step-3-example-playbook-get-facts-and-validate-connection","title":"Step 3: Example Playbook - Get Facts and Validate Connection","text":"<pre><code>---\n- name: Validate network device connection and get facts\n  hosts: routers\n  gather_facts: no\n  connection: network_cli\n  tasks:\n    - name: Validate device connection\n      ping:\n\n    - name: Get device facts\n      ios_facts:\n      when: ansible_network_os == 'ios'\n      register: iosfacts\n\n    - name: Show facts\n      debug:\n        var: iosfacts\n</code></pre> <p>For Arista, use <code>eos_facts:</code> instead of <code>ios_facts:</code>.</p>","tags":["ansible","network-cli"]},{"location":"blog/ansible---network-settings/#step-4-example-run-a-command-and-validate-output","title":"Step 4: Example - Run a Command and Validate Output","text":"<pre><code>---\n- name: Run show version and validate output\n  hosts: routers\n  gather_facts: no\n  connection: network_cli\n  tasks:\n    - name: Run show version\n      ios_command:\n        commands:\n          - show version\n      register: version_output\n      when: ansible_network_os == 'ios'\n\n    - name: Validate output contains IOS\n      assert:\n        that:\n          - \"'IOS' in version_output.stdout[0]\"\n      when: ansible_network_os == 'ios'\n</code></pre>","tags":["ansible","network-cli"]},{"location":"blog/ansible---network-settings/#when-to-use-network_cli-and-when-not","title":"When to Use network_cli (and When Not)","text":"<ul> <li>Use <code>network_cli</code> for most network devices (Cisco IOS, NX-OS, Arista EOS, Juniper, etc.) that support SSH CLI access.</li> <li>Do NOT use <code>network_cli</code> for:</li> <li>Devices that only support API/NETCONF/REST (use <code>httpapi</code>, <code>netconf</code>, or <code>restconf</code> connection plugins instead).</li> <li>Linux servers (use the default <code>ssh</code> connection).</li> </ul>","tags":["ansible","network-cli"]},{"location":"blog/ansible---network-settings/#ssh-settings-for-network-devices","title":"SSH Settings for Network Devices","text":"<ul> <li>Ensure SSH is enabled on all network devices.</li> <li>Use strong passwords or SSH keys.</li> <li>For lab/dev, you can disable host key checking (see <code>ansible.cfg</code> above).</li> <li>If using SSH keys, add:   <pre><code>ansible_ssh_private_key_file: /path/to/key\n</code></pre>   to your host/group vars.</li> </ul>","tags":["ansible","network-cli"]},{"location":"blog/ansible---network-settings/#more-resources","title":"More Resources","text":"<ul> <li>Ansible Network Guide</li> <li>Ansible network_cli connection</li> <li>Ansible ios_facts module</li> </ul>","tags":["ansible","network-cli"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/","title":"Getting Started with Ansible Network Automation: A Practical Guide","text":"<p>Ansible has become the de facto standard for network automation, offering a simple yet powerful way to automate network device configurations. This guide will walk you through the fundamentals of using Ansible for network automation, from basic concepts to practical implementations.</p>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#why-ansible-for-network-automation","title":"Why Ansible for Network Automation?","text":"<p>Ansible offers several advantages for network automation:</p> <ul> <li>Agentless: No software installation required on network devices</li> <li>Declarative: Describe desired state rather than procedural steps</li> <li>Idempotent: Safe to run multiple times without side effects</li> <li>Extensible: Rich ecosystem of modules and collections</li> <li>Human-readable: YAML-based playbooks are easy to understand</li> </ul>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#prerequisites","title":"Prerequisites","text":"<p>Before diving into Ansible network automation, ensure you have:</p> <ul> <li>Python 3.10+ installed</li> <li>Network devices with SSH/API access</li> <li>Basic understanding of YAML syntax</li> <li>Familiarity with network concepts (VLANs, routing, etc.)</li> </ul>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#installation-and-setup","title":"Installation and Setup","text":"","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#1-install-ansible","title":"1. Install Ansible","text":"<pre><code># Using pip (recommended)\npip install ansible\n\n# Using package manager (Ubuntu/Debian)\nsudo apt update\nsudo apt install ansible\n\n# Using package manager (CentOS/RHEL)\nsudo yum install ansible\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#2-install-network-collections","title":"2. Install Network Collections","text":"<pre><code># Install Cisco IOS collection\nansible-galaxy collection install cisco.ios\n\n# Install Arista EOS collection\nansible-galaxy collection install arista.eos\n\n# Install Juniper JunOS collection\nansible-galaxy collection install junipernetworks.junos\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#3-create-project-structure","title":"3. Create Project Structure","text":"<pre><code>mkdir network-automation\ncd network-automation\nmkdir {inventory,playbooks,group_vars,host_vars}\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#basic-concepts","title":"Basic Concepts","text":"","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#inventory","title":"Inventory","text":"<p>The inventory file defines your network devices:</p> <pre><code># inventory/hosts\n[switches]\nswitch01 ansible_host=192.168.1.10\nswitch02 ansible_host=192.168.1.11\nswitch03 ansible_host=192.168.1.12\n\n[routers]\nrouter01 ansible_host=192.168.1.1\nrouter02 ansible_host=192.168.1.2\n\n[network_devices:children]\nswitches\nrouters\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#group-variables","title":"Group Variables","text":"<p>Define common variables for device groups:</p> <pre><code># group_vars/network_devices.yml\nansible_network_os: ios\nansible_connection: network_cli\nansible_user: admin\nansible_password: \"{{ vault_network_password }}\"\nansible_become: yes\nansible_become_method: enable\nansible_become_password: \"{{ vault_enable_password }}\"\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#host-variables","title":"Host Variables","text":"<p>Define device-specific variables:</p> <pre><code># host_vars/switch01.yml\ndevice_hostname: SW-CORE-01\nmanagement_ip: 192.168.1.10\nlocation: Data Center A\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#your-first-network-playbook","title":"Your First Network Playbook","text":"","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#basic-vlan-configuration","title":"Basic VLAN Configuration","text":"<pre><code># playbooks/configure_vlans.yml\n---\n- name: Configure VLANs on Network Switches\n  hosts: switches\n  gather_facts: no\n\n  vars:\n    vlans:\n      - id: 10\n        name: DATA\n        description: Data VLAN\n      - id: 20\n        name: VOICE\n        description: Voice VLAN\n      - id: 30\n        name: MGMT\n        description: Management VLAN\n\n  tasks:\n    - name: Configure VLANs\n      cisco.ios.vlans:\n        config:\n          - vlan_id: \"{{ item.id }}\"\n            name: \"{{ item.name }}\"\n            state: present\n        state: merged\n      loop: \"{{ vlans }}\"\n      register: vlan_result\n\n    - name: Display VLAN configuration results\n      debug:\n        var: vlan_result\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#interface-configuration","title":"Interface Configuration","text":"<pre><code># playbooks/configure_interfaces.yml\n---\n- name: Configure Switch Interfaces\n  hosts: switches\n  gather_facts: no\n\n  tasks:\n    - name: Configure access ports\n      cisco.ios.interfaces:\n        config:\n          - name: GigabitEthernet1/0/1\n            description: Access Port - PC1\n            mode: access\n            access:\n              vlan: 10\n            enabled: true\n          - name: GigabitEthernet1/0/2\n            description: Access Port - PC2\n            mode: access\n            access:\n              vlan: 20\n            enabled: true\n        state: merged\n\n    - name: Configure trunk ports\n      cisco.ios.interfaces:\n        config:\n          - name: GigabitEthernet1/0/48\n            description: Trunk to Router\n            mode: trunk\n            trunk:\n              allowed_vlans: 10,20,30\n              native_vlan: 1\n            enabled: true\n        state: merged\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#advanced-examples","title":"Advanced Examples","text":"","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#backup-configurations","title":"Backup Configurations","text":"<pre><code># playbooks/backup_configs.yml\n---\n- name: Backup Network Device Configurations\n  hosts: network_devices\n  gather_facts: no\n\n  tasks:\n    - name: Create backup directory\n      file:\n        path: \"backups/{{ inventory_hostname }}\"\n        state: directory\n      delegate_to: localhost\n\n    - name: Backup running configuration\n      cisco.ios.config:\n        backup: yes\n      register: backup_output\n\n    - name: Copy backup file to local machine\n      fetch:\n        src: \"{{ backup_output.backup_path }}\"\n        dest: \"backups/{{ inventory_hostname }}/\"\n        flat: yes\n      delegate_to: localhost\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#configuration-validation","title":"Configuration Validation","text":"<pre><code># playbooks/validate_config.yml\n---\n- name: Validate Network Configuration\n  hosts: network_devices\n  gather_facts: no\n\n  tasks:\n    - name: Check interface status\n      cisco.ios.interfaces:\n        state: gathered\n      register: interface_facts\n\n    - name: Validate interface configurations\n      assert:\n        that:\n          - item.enabled == true\n          - item.description is defined\n        fail_msg: \"Interface {{ item.name }} is not properly configured\"\n        success_msg: \"Interface {{ item.name }} is properly configured\"\n      loop: \"{{ interface_facts.gathered }}\"\n      when: item.name.startswith('GigabitEthernet')\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#best-practices","title":"Best Practices","text":"","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#1-use-variables-and-templates","title":"1. Use Variables and Templates","text":"<pre><code># group_vars/all.yml\nnetwork_config:\n  vlans:\n    data: 10\n    voice: 20\n    management: 30\n  interfaces:\n    access_ports: [1, 2, 3, 4]\n    trunk_ports: [48]\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#2-implement-error-handling","title":"2. Implement Error Handling","text":"<pre><code># playbooks/robust_config.yml\n---\n- name: Robust Network Configuration\n  hosts: switches\n  gather_facts: no\n\n  tasks:\n    - name: Configure VLANs with error handling\n      cisco.ios.vlans:\n        config:\n          - vlan_id: \"{{ item.id }}\"\n            name: \"{{ item.name }}\"\n        state: merged\n      loop: \"{{ vlans }}\"\n      register: vlan_result\n      failed_when: vlan_result.failed\n      retries: 3\n      delay: 10\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#3-use-tags-for-selective-execution","title":"3. Use Tags for Selective Execution","text":"<pre><code># playbooks/comprehensive_config.yml\n---\n- name: Comprehensive Network Configuration\n  hosts: switches\n  gather_facts: no\n\n  tasks:\n    - name: Configure VLANs\n      cisco.ios.vlans:\n        config: \"{{ vlans }}\"\n        state: merged\n      tags: vlans\n\n    - name: Configure interfaces\n      cisco.ios.interfaces:\n        config: \"{{ interfaces }}\"\n        state: merged\n      tags: interfaces\n\n    - name: Configure routing\n      cisco.ios.routing:\n        config: \"{{ routing }}\"\n        state: merged\n      tags: routing\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#cicd-integration","title":"CI/CD Integration","text":"","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#gitlab-cicd-pipeline","title":"GitLab CI/CD Pipeline","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - validate\n  - test\n  - deploy\n\nvalidate_config:\n  stage: validate\n  script:\n    - ansible-playbook --check playbooks/configure_vlans.yml\n\ntest_config:\n  stage: test\n  script:\n    - ansible-playbook --limit test_environment playbooks/configure_vlans.yml\n\ndeploy_config:\n  stage: deploy\n  script:\n    - ansible-playbook playbooks/configure_vlans.yml\n  when: manual\n  only:\n    - main\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/network-automation.yml\nname: Network Automation\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.9'\n    - name: Install dependencies\n      run: |\n        pip install ansible\n        ansible-galaxy collection install cisco.ios\n    - name: Validate configuration\n      run: ansible-playbook --check playbooks/configure_vlans.yml\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#monitoring-and-validation","title":"Monitoring and Validation","text":"","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#health-checks","title":"Health Checks","text":"<pre><code># playbooks/health_check.yml\n---\n- name: Network Health Check\n  hosts: network_devices\n  gather_facts: no\n\n  tasks:\n    - name: Check device connectivity\n      cisco.ios.ping:\n        dest: \"{{ item }}\"\n        count: 3\n      loop: \"{{ ping_targets }}\"\n      register: ping_results\n\n    - name: Check interface status\n      cisco.ios.interfaces:\n        state: gathered\n      register: interface_status\n\n    - name: Generate health report\n      template:\n        src: templates/health_report.j2\n        dest: \"reports/{{ inventory_hostname }}_health.html\"\n      delegate_to: localhost\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":"","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#1-connection-issues","title":"1. Connection Issues","text":"<pre><code># Test connectivity\nansible network_devices -m ping\n\n# Check SSH connection\nssh admin@192.168.1.10\n\n# Verify inventory\nansible-inventory --list\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#2-permission-issues","title":"2. Permission Issues","text":"<pre><code># Ensure proper privilege escalation\nansible_become: yes\nansible_become_method: enable\nansible_become_password: \"{{ vault_enable_password }}\"\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#3-module-issues","title":"3. Module Issues","text":"<pre><code># Check available modules\nansible-doc -l | grep ios\n\n# Get module documentation\nansible-doc cisco.ios.vlans\n</code></pre>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#conclusion","title":"Conclusion","text":"<p>Ansible provides a powerful and flexible platform for network automation. By following the practices outlined in this guide, you can build robust, scalable automation solutions that improve network reliability and operational efficiency.</p> <p>Remember to: - Start with simple tasks and gradually increase complexity - Use version control for all playbooks and configurations - Implement proper testing and validation - Document your automation workflows - Continuously improve and refine your processes</p>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>Ansible Network Automation Documentation</li> <li>Cisco IOS Collection</li> <li>Network Automation Best Practices</li> <li>Ansible Network Automation Examples</li> </ul>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/getting-started-with-ansible-network-automation-a-practical-guide/#related-tutorials","title":"Related Tutorials","text":"<p>For more in-depth learning, check out our comprehensive Ansible tutorials:</p> <ul> <li>Ansible Tutorial 1: Core Concepts - Learn the fundamental concepts of Ansible including playbooks, tasks, and inventory management</li> <li>Ansible Tutorial 2: Working with Modules - Explore Ansible modules and how to use them effectively for automation</li> <li>Ansible Tutorial 3: Variables and Facts - Master Ansible variables, facts, and templating for dynamic automation</li> </ul> <p>This guide provides a foundation for Ansible network automation. For more advanced topics, check out our other articles on specific automation scenarios and best practices. </p>","tags":["ansible","network automation","netdevops","automation","networking","tutorial"]},{"location":"blog/setup-proxmox-cluster/","title":"Setup Proxmox Cluster","text":"<p>Proxmox is a powerful open-source virtualization platform. In this post, I'll show you how to set up a basic Proxmox cluster for your home lab or small business.</p>","tags":["proxmox","virtualisation"]},{"location":"blog/setup-proxmox-cluster/#important-note","title":"Important Note","text":"<p>Only hosts that do not have any virtual guests running can be added to a cluster!</p>","tags":["proxmox","virtualisation"]},{"location":"blog/setup-proxmox-cluster/#step-1-prepare-all-nodes","title":"Step 1: Prepare All Nodes","text":"<ul> <li>Ensure all nodes are running the same Proxmox version.</li> <li>Set unique hostnames and static IP addresses for each node.</li> <li>Make sure <code>/etc/hosts</code> is correct on all nodes (add all cluster node IPs and hostnames).</li> </ul> <p>Example <code>/etc/hosts</code>: <pre><code>192.168.1.101  pve1\n192.168.1.102  pve2\n192.168.1.103  pve3\n</code></pre></p>","tags":["proxmox","virtualisation"]},{"location":"blog/setup-proxmox-cluster/#step-2-initialize-the-cluster-on-the-firstmaster-node","title":"Step 2: Initialize the Cluster (on the first/master node)","text":"<p>Replace <code>CLUSTERNAME</code> with your desired cluster name and <code>IP</code> with the master node's IP address:</p> <pre><code>pvecm create CLUSTERNAME\n</code></pre> <p>Check cluster status: <pre><code>pvecm status\n</code></pre></p>","tags":["proxmox","virtualisation"]},{"location":"blog/setup-proxmox-cluster/#step-3-add-additional-nodes-to-the-cluster","title":"Step 3: Add Additional Nodes to the Cluster","text":"<p>On each additional node, join the cluster using the master node's IP address:</p> <pre><code>pvecm add &lt;MASTER_NODE_IP&gt;\n</code></pre> <p>You will be prompted for the root password of the master node.</p> <p>Check status on any node: <pre><code>pvecm nodes\n</code></pre></p>","tags":["proxmox","virtualisation"]},{"location":"blog/setup-proxmox-cluster/#step-4-troubleshooting-corosync-issues","title":"Step 4: Troubleshooting Corosync Issues","text":"<p>If you have issues adding a new node (e.g., corosync service hangs), try the following steps on the master node:</p> <pre><code>systemctl stop pve-cluster\nsystemctl stop corosync\npmxcfs -l\nrm /etc/pve/corosync.conf\nrm -r /etc/corosync/*\nkillall pmxcfs\nsystemctl start pve-cluster\n</code></pre>","tags":["proxmox","virtualisation"]},{"location":"blog/setup-proxmox-cluster/#step-5-verify-cluster-health","title":"Step 5: Verify Cluster Health","text":"<p>On any node, check: <pre><code>pvecm status\npvecm nodes\n</code></pre></p> <p>For more information, see the Proxmox documentation.</p>","tags":["proxmox","virtualisation"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/","title":"Terraform for Network Infrastructure as Code: A Complete Guide","text":"<p>Terraform has revolutionized how organizations manage network infrastructure by treating it as code. This comprehensive guide explores how to use Terraform for network automation, from basic concepts to advanced networking scenarios.</p>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#what-is-infrastructure-as-code-iac","title":"What is Infrastructure as Code (IaC)?","text":"<p>Infrastructure as Code is the practice of managing and provisioning computing infrastructure through machine-readable definition files rather than physical hardware configuration or interactive configuration tools. Terraform is one of the most popular IaC tools, offering:</p> <ul> <li>Declarative Configuration: Define desired state rather than procedural steps</li> <li>Version Control: Track infrastructure changes in Git</li> <li>Automation: Eliminate manual configuration processes</li> <li>Consistency: Ensure identical environments across deployments</li> <li>Scalability: Manage complex infrastructure efficiently</li> </ul>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#getting-started-with-terraform","title":"Getting Started with Terraform","text":"","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#installation","title":"Installation","text":"<pre><code># Download and install Terraform\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt update &amp;&amp; sudo apt install terraform\n\n# Verify installation\nterraform version\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#basic-project-structure","title":"Basic Project Structure","text":"<pre><code>network-terraform/\n\u251c\u2500\u2500 main.tf\n\u251c\u2500\u2500 variables.tf\n\u251c\u2500\u2500 outputs.tf\n\u251c\u2500\u2500 terraform.tfvars\n\u251c\u2500\u2500 providers.tf\n\u2514\u2500\u2500 modules/\n    \u251c\u2500\u2500 vpc/\n    \u251c\u2500\u2500 subnets/\n    \u2514\u2500\u2500 security/\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#core-concepts","title":"Core Concepts","text":"","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#providers","title":"Providers","text":"<p>Providers are plugins that Terraform uses to interact with cloud providers, SaaS providers, and other APIs.</p> <pre><code># providers.tf\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 3.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#variables","title":"Variables","text":"<p>Define input variables for your configuration:</p> <pre><code># variables.tf\nvariable \"aws_region\" {\n  description = \"AWS region\"\n  type        = string\n  default     = \"us-west-2\"\n}\n\nvariable \"vpc_cidr\" {\n  description = \"CIDR block for VPC\"\n  type        = string\n  default     = \"10.0.0.0/16\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n  validation {\n    condition     = contains([\"dev\", \"staging\", \"prod\"], var.environment)\n    error_message = \"Environment must be dev, staging, or prod.\"\n  }\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#resources","title":"Resources","text":"<p>Resources are the infrastructure objects that Terraform manages:</p> <pre><code># main.tf\nresource \"aws_vpc\" \"main\" {\n  cidr_block           = var.vpc_cidr\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = \"${var.environment}-vpc\"\n    Environment = var.environment\n  }\n}\n\nresource \"aws_subnet\" \"public\" {\n  count             = length(var.public_subnets)\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = var.public_subnets[count.index]\n  availability_zone = var.availability_zones[count.index]\n\n  tags = {\n    Name        = \"${var.environment}-public-${count.index + 1}\"\n    Environment = var.environment\n  }\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#network-infrastructure-examples","title":"Network Infrastructure Examples","text":"","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#vpc-and-subnet-configuration","title":"VPC and Subnet Configuration","text":"<pre><code># modules/vpc/main.tf\nresource \"aws_vpc\" \"this\" {\n  cidr_block           = var.vpc_cidr\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-vpc\"\n  })\n}\n\nresource \"aws_subnet\" \"public\" {\n  count             = length(var.public_subnets)\n  vpc_id            = aws_vpc.this.id\n  cidr_block        = var.public_subnets[count.index]\n  availability_zone = var.availability_zones[count.index]\n\n  map_public_ip_on_launch = true\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-public-${count.index + 1}\"\n  })\n}\n\nresource \"aws_subnet\" \"private\" {\n  count             = length(var.private_subnets)\n  vpc_id            = aws_vpc.this.id\n  cidr_block        = var.private_subnets[count.index]\n  availability_zone = var.availability_zones[count.index]\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-private-${count.index + 1}\"\n  })\n}\n\nresource \"aws_internet_gateway\" \"this\" {\n  vpc_id = aws_vpc.this.id\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-igw\"\n  })\n}\n\nresource \"aws_nat_gateway\" \"this\" {\n  count         = length(var.public_subnets)\n  allocation_id = aws_eip.nat[count.index].id\n  subnet_id     = aws_subnet.public[count.index].id\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-nat-${count.index + 1}\"\n  })\n}\n\nresource \"aws_eip\" \"nat\" {\n  count = length(var.public_subnets)\n  vpc   = true\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-eip-${count.index + 1}\"\n  })\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#security-groups-and-network-acls","title":"Security Groups and Network ACLs","text":"<pre><code># modules/security/main.tf\nresource \"aws_security_group\" \"web\" {\n  name_prefix = \"${var.name}-web-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = var.allowed_ssh_cidr\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-web-sg\"\n  })\n}\n\nresource \"aws_security_group\" \"database\" {\n  name_prefix = \"${var.name}-db-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    from_port       = 3306\n    to_port         = 3306\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.web.id]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-db-sg\"\n  })\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#load-balancer-configuration","title":"Load Balancer Configuration","text":"<pre><code># modules/alb/main.tf\nresource \"aws_lb\" \"this\" {\n  name               = \"${var.name}-alb\"\n  internal           = var.internal\n  load_balancer_type = \"application\"\n  security_groups    = var.security_groups\n  subnets            = var.subnets\n\n  enable_deletion_protection = var.enable_deletion_protection\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-alb\"\n  })\n}\n\nresource \"aws_lb_target_group\" \"this\" {\n  count    = length(var.target_groups)\n  name     = \"${var.name}-tg-${count.index}\"\n  port     = var.target_groups[count.index].port\n  protocol = var.target_groups[count.index].protocol\n  vpc_id   = var.vpc_id\n\n  health_check {\n    enabled             = true\n    healthy_threshold   = 2\n    interval            = 30\n    matcher             = \"200\"\n    path                = var.target_groups[count.index].health_check_path\n    port                = \"traffic-port\"\n    protocol            = var.target_groups[count.index].protocol\n    timeout             = 5\n    unhealthy_threshold = 2\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-tg-${count.index}\"\n  })\n}\n\nresource \"aws_lb_listener\" \"this\" {\n  count             = length(var.listeners)\n  load_balancer_arn = aws_lb.this.arn\n  port              = var.listeners[count.index].port\n  protocol          = var.listeners[count.index].protocol\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = aws_lb_target_group.this[var.listeners[count.index].target_group_index].arn\n  }\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#advanced-networking-scenarios","title":"Advanced Networking Scenarios","text":"","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#multi-region-deployment","title":"Multi-Region Deployment","text":"<pre><code># multi-region/main.tf\nmodule \"vpc_us_west\" {\n  source = \"../modules/vpc\"\n\n  providers = {\n    aws = aws.us-west-2\n  }\n\n  name = \"us-west-2\"\n  vpc_cidr = \"10.1.0.0/16\"\n  public_subnets = [\"10.1.1.0/24\", \"10.1.2.0/24\"]\n  private_subnets = [\"10.1.10.0/24\", \"10.1.11.0/24\"]\n  availability_zones = [\"us-west-2a\", \"us-west-2b\"]\n}\n\nmodule \"vpc_us_east\" {\n  source = \"../modules/vpc\"\n\n  providers = {\n    aws = aws.us-east-1\n  }\n\n  name = \"us-east-1\"\n  vpc_cidr = \"10.2.0.0/16\"\n  public_subnets = [\"10.2.1.0/24\", \"10.2.2.0/24\"]\n  private_subnets = [\"10.2.10.0/24\", \"10.2.11.0/24\"]\n  availability_zones = [\"us-east-1a\", \"us-east-1b\"]\n}\n\n# VPC Peering\nresource \"aws_vpc_peering_connection\" \"us_west_to_us_east\" {\n  provider = aws.us-west-2\n  vpc_id   = module.vpc_us_west.vpc_id\n  peer_vpc_id = module.vpc_us_east.vpc_id\n  peer_region = \"us-east-1\"\n\n  tags = {\n    Name = \"us-west-2-to-us-east-1\"\n  }\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#transit-gateway-configuration","title":"Transit Gateway Configuration","text":"<pre><code># modules/transit-gateway/main.tf\nresource \"aws_ec2_transit_gateway\" \"this\" {\n  description = \"${var.name} Transit Gateway\"\n\n  default_route_table_association = \"enable\"\n  default_route_table_propagation = \"enable\"\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-tgw\"\n  })\n}\n\nresource \"aws_ec2_transit_gateway_vpc_attachment\" \"this\" {\n  count = length(var.vpc_attachments)\n\n  subnet_ids         = var.vpc_attachments[count.index].subnet_ids\n  transit_gateway_id = aws_ec2_transit_gateway.this.id\n  vpc_id             = var.vpc_attachments[count.index].vpc_id\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-tgw-attachment-${count.index}\"\n  })\n}\n\nresource \"aws_ec2_transit_gateway_route_table\" \"this\" {\n  count = length(var.route_tables)\n\n  transit_gateway_id = aws_ec2_transit_gateway.this.id\n\n  tags = merge(var.tags, {\n    Name = \"${var.name}-tgw-rt-${count.index}\"\n  })\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#best-practices","title":"Best Practices","text":"","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#1-use-modules-for-reusability","title":"1. Use Modules for Reusability","text":"<pre><code># modules/network/main.tf\nmodule \"vpc\" {\n  source = \"../vpc\"\n\n  name = var.name\n  vpc_cidr = var.vpc_cidr\n  public_subnets = var.public_subnets\n  private_subnets = var.private_subnets\n  availability_zones = var.availability_zones\n}\n\nmodule \"security\" {\n  source = \"../security\"\n\n  name = var.name\n  vpc_id = module.vpc.vpc_id\n  allowed_ssh_cidr = var.allowed_ssh_cidr\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#2-implement-state-management","title":"2. Implement State Management","text":"<pre><code># backend.tf\nterraform {\n  backend \"s3\" {\n    bucket = \"my-terraform-state\"\n    key    = \"network/terraform.tfstate\"\n    region = \"us-west-2\"\n\n    dynamodb_table = \"terraform-locks\"\n    encrypt        = true\n  }\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#3-use-data-sources-for-dynamic-configuration","title":"3. Use Data Sources for Dynamic Configuration","text":"<pre><code># data.tf\ndata \"aws_availability_zones\" \"available\" {\n  state = \"available\"\n}\n\ndata \"aws_ami\" \"latest_amazon_linux\" {\n  most_recent = true\n  owners      = [\"amazon\"]\n\n  filter {\n    name   = \"name\"\n    values = [\"amzn2-ami-hvm-*-x86_64-gp2\"]\n  }\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#4-implement-proper-tagging","title":"4. Implement Proper Tagging","text":"<pre><code># locals.tf\nlocals {\n  common_tags = {\n    Environment = var.environment\n    Project     = var.project\n    Owner       = var.owner\n    ManagedBy   = \"Terraform\"\n  }\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#cicd-integration","title":"CI/CD Integration","text":"","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#gitlab-cicd-pipeline","title":"GitLab CI/CD Pipeline","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - validate\n  - plan\n  - apply\n\nvariables:\n  TF_ROOT: ${CI_PROJECT_DIR}/terraform\n\nvalidate:\n  stage: validate\n  script:\n    - cd $TF_ROOT\n    - terraform init\n    - terraform validate\n    - terraform fmt -check\n\nplan:\n  stage: plan\n  script:\n    - cd $TF_ROOT\n    - terraform init\n    - terraform plan -out=plan.tfplan\n  artifacts:\n    paths:\n      - $TF_ROOT/plan.tfplan\n    expire_in: 1 week\n\napply:\n  stage: apply\n  script:\n    - cd $TF_ROOT\n    - terraform init\n    - terraform apply plan.tfplan\n  when: manual\n  only:\n    - main\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/terraform.yml\nname: Terraform\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v1\n\n    - name: Terraform Init\n      run: terraform init\n\n    - name: Terraform Validate\n      run: terraform validate\n\n    - name: Terraform Plan\n      run: terraform plan\n      if: github.event_name == 'pull_request'\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#monitoring-and-validation","title":"Monitoring and Validation","text":"","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#output-configuration","title":"Output Configuration","text":"<pre><code># outputs.tf\noutput \"vpc_id\" {\n  description = \"The ID of the VPC\"\n  value       = aws_vpc.main.id\n}\n\noutput \"public_subnet_ids\" {\n  description = \"List of public subnet IDs\"\n  value       = aws_subnet.public[*].id\n}\n\noutput \"private_subnet_ids\" {\n  description = \"List of private subnet IDs\"\n  value       = aws_subnet.private[*].id\n}\n\noutput \"load_balancer_dns\" {\n  description = \"The DNS name of the load balancer\"\n  value       = aws_lb.main.dns_name\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#validation-rules","title":"Validation Rules","text":"<pre><code># validation.tf\nvariable \"vpc_cidr\" {\n  description = \"CIDR block for VPC\"\n  type        = string\n\n  validation {\n    condition     = can(cidrhost(var.vpc_cidr, 0))\n    error_message = \"Must be a valid CIDR block.\"\n  }\n}\n\nvariable \"subnet_cidrs\" {\n  description = \"List of subnet CIDR blocks\"\n  type        = list(string)\n\n  validation {\n    condition = alltrue([\n      for cidr in var.subnet_cidrs : can(cidrhost(cidr, 0))\n    ])\n    error_message = \"All subnet CIDR blocks must be valid.\"\n  }\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":"","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#1-state-management-issues","title":"1. State Management Issues","text":"<pre><code># Refresh state\nterraform refresh\n\n# Import existing resources\nterraform import aws_vpc.main vpc-12345678\n\n# Move resources\nterraform state mv aws_subnet.old aws_subnet.new\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#2-dependency-issues","title":"2. Dependency Issues","text":"<pre><code># Use depends_on for explicit dependencies\nresource \"aws_instance\" \"web\" {\n  ami           = data.aws_ami.latest.id\n  instance_type = \"t3.micro\"\n\n  depends_on = [aws_security_group.web]\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#3-variable-validation","title":"3. Variable Validation","text":"<pre><code>variable \"instance_type\" {\n  description = \"EC2 instance type\"\n  type        = string\n\n  validation {\n    condition     = contains([\"t3.micro\", \"t3.small\", \"t3.medium\"], var.instance_type)\n    error_message = \"Instance type must be t3.micro, t3.small, or t3.medium.\"\n  }\n}\n</code></pre>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#conclusion","title":"Conclusion","text":"<p>Terraform provides a powerful and flexible platform for managing network infrastructure as code. By following the practices outlined in this guide, you can build robust, scalable, and maintainable network infrastructure.</p> <p>Key takeaways: - Use modules for reusability and maintainability - Implement proper state management - Follow naming conventions and tagging strategies - Integrate with CI/CD pipelines - Implement validation and testing - Document your infrastructure code</p>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/terraform-for-network-infrastructure-as-code-a-complete-guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>Terraform Documentation</li> <li>Terraform Registry</li> <li>Terraform Best Practices</li> <li>Network Infrastructure Examples</li> </ul> <p>This guide provides a comprehensive overview of using Terraform for network infrastructure as code. For more advanced topics, check out our other articles on specific Terraform modules and best practices. </p>","tags":["terraform","infrastructure as code","netdevops","automation","networking","cloud"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/","title":"Monitoring Networks with Prometheus and Grafana: A Complete Guide","text":"<p>Network monitoring is a critical component of NetDevOps, providing visibility into network performance, health, and availability. This guide explores how to implement comprehensive network monitoring using Prometheus and Grafana, from basic setup to advanced dashboards and alerting.</p>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#why-prometheus-and-grafana-for-network-monitoring","title":"Why Prometheus and Grafana for Network Monitoring?","text":"<p>Prometheus and Grafana form a powerful combination for network monitoring:</p> <ul> <li>Prometheus: Time-series database with powerful querying capabilities</li> <li>Grafana: Rich visualization and dashboard platform</li> <li>Scalability: Handle large-scale network monitoring</li> <li>Flexibility: Support for custom metrics and integrations</li> <li>Open Source: Cost-effective and community-driven</li> </ul>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#understanding-the-monitoring-stack","title":"Understanding the Monitoring Stack","text":"","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#prometheus-architecture","title":"Prometheus Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Prometheus    \u2502    \u2502   Node Exporter \u2502    \u2502   Network       \u2502\n\u2502   Server        \u2502\u25c4\u2500\u2500\u2500\u2524   (on hosts)    \u2502\u25c4\u2500\u2500\u2500\u2524   Devices       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Grafana       \u2502    \u2502   Alertmanager  \u2502    \u2502   Custom        \u2502\n\u2502   Dashboards    \u2502    \u2502   (Alerts)      \u2502    \u2502   Exporters     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#installation-and-setup","title":"Installation and Setup","text":"","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#1-install-prometheus","title":"1. Install Prometheus","text":"<pre><code># Download Prometheus\nwget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz\ntar xvf prometheus-*.tar.gz\ncd prometheus-*\n\n# Create systemd service\nsudo tee /etc/systemd/system/prometheus.service &lt;&lt; EOF\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nExecStart=/usr/local/bin/prometheus \\\n  --config.file /etc/prometheus/prometheus.yml \\\n  --storage.tsdb.path /var/lib/prometheus/ \\\n  --web.console.templates=/etc/prometheus/consoles \\\n  --web.console.libraries=/etc/prometheus/console_libraries \\\n  --web.listen-address=0.0.0.0:9090\n\n[Install]\nWantedBy=default.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable prometheus\nsudo systemctl start prometheus\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#2-install-grafana","title":"2. Install Grafana","text":"<pre><code># Add Grafana repository\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\necho \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Install Grafana\nsudo apt update\nsudo apt install grafana\n\n# Start Grafana\nsudo systemctl enable grafana-server\nsudo systemctl start grafana-server\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#3-install-node-exporter","title":"3. Install Node Exporter","text":"<pre><code># Download Node Exporter\nwget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\ntar xvf node_exporter-*.tar.gz\ncd node_exporter-*\n\n# Create systemd service\nsudo tee /etc/systemd/system/node_exporter.service &lt;&lt; EOF\n[Unit]\nDescription=Node Exporter\nAfter=network.target\n\n[Service]\nUser=node_exporter\nExecStart=/usr/local/bin/node_exporter\n\n[Install]\nWantedBy=default.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable node_exporter\nsudo systemctl start node_exporter\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#configuration","title":"Configuration","text":"","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code># /etc/prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"alert_rules.yml\"\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - localhost:9093\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node_exporter'\n    static_configs:\n      - targets: ['localhost:9100']\n\n  - job_name: 'network_devices'\n    static_configs:\n      - targets: ['192.168.1.1:9100', '192.168.1.2:9100']\n    scrape_interval: 30s\n\n  - job_name: 'snmp_exporter'\n    static_configs:\n      - targets: ['192.168.1.1', '192.168.1.2']\n    metrics_path: /snmp\n    params:\n      module: [if_mib]\n    scrape_interval: 30s\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9116\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#snmp-exporter-configuration","title":"SNMP Exporter Configuration","text":"<pre><code># /etc/snmp_exporter/snmp.yml\nmodules:\n  if_mib:\n    walk:\n      - 1.3.6.1.2.1.2.2.1.1  # ifIndex\n      - 1.3.6.1.2.1.2.2.1.2  # ifDescr\n      - 1.3.6.1.2.1.2.2.1.3  # ifType\n      - 1.3.6.1.2.1.2.2.1.4  # ifMtu\n      - 1.3.6.1.2.1.2.2.1.5  # ifSpeed\n      - 1.3.6.1.2.1.2.2.1.6  # ifPhysAddress\n      - 1.3.6.1.2.1.2.2.1.7  # ifAdminStatus\n      - 1.3.6.1.2.1.2.2.1.8  # ifOperStatus\n      - 1.3.6.1.2.1.2.2.1.10 # ifInOctets\n      - 1.3.6.1.2.1.2.2.1.16 # ifOutOctets\n      - 1.3.6.1.2.1.2.2.1.14 # ifInErrors\n      - 1.3.6.1.2.1.2.2.1.20 # ifOutErrors\n    version: 2\n    auth:\n      community: public\n    retries: 3\n    timeout: 10s\n    interval: 30s\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#network-specific-monitoring","title":"Network-Specific Monitoring","text":"","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#interface-monitoring","title":"Interface Monitoring","text":"<pre><code># Custom network metrics exporter\n#!/usr/bin/env python3\nimport time\nimport subprocess\nimport re\nfrom prometheus_client import start_http_server, Gauge\n\n# Define metrics\ninterface_up = Gauge('interface_up', 'Interface operational status', ['interface'])\ninterface_speed = Gauge('interface_speed', 'Interface speed in Mbps', ['interface'])\ninterface_errors = Gauge('interface_errors', 'Interface error count', ['interface', 'type'])\n\ndef get_interface_stats():\n    try:\n        # Get interface statistics using ip command\n        result = subprocess.run(['ip', '-s', 'link'], capture_output=True, text=True)\n\n        for line in result.stdout.split('\\n'):\n            if ':' in line and not line.startswith(' '):\n                # Parse interface name\n                interface_match = re.search(r'(\\d+):\\s+(\\w+):', line)\n                if interface_match:\n                    interface = interface_match.group(2)\n\n                    # Get interface status\n                    status_result = subprocess.run(['ip', 'link', 'show', interface], \n                                                 capture_output=True, text=True)\n                    if 'UP' in status_result.stdout:\n                        interface_up.labels(interface=interface).set(1)\n                    else:\n                        interface_up.labels(interface=interface).set(0)\n\n    except Exception as e:\n        print(f\"Error getting interface stats: {e}\")\n\nif __name__ == '__main__':\n    start_http_server(8000)\n    while True:\n        get_interface_stats()\n        time.sleep(15)\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#bandwidth-monitoring","title":"Bandwidth Monitoring","text":"<pre><code># bandwidth_monitor.py\nimport psutil\nimport time\nfrom prometheus_client import start_http_server, Gauge\n\n# Define metrics\nbytes_sent = Gauge('network_bytes_sent', 'Bytes sent per interface', ['interface'])\nbytes_recv = Gauge('network_bytes_recv', 'Bytes received per interface', ['interface'])\npackets_sent = Gauge('network_packets_sent', 'Packets sent per interface', ['interface'])\npackets_recv = Gauge('network_packets_recv', 'Packets received per interface', ['interface'])\n\ndef collect_network_metrics():\n    net_io = psutil.net_io_counters(pernic=True)\n\n    for interface, stats in net_io.items():\n        bytes_sent.labels(interface=interface).set(stats.bytes_sent)\n        bytes_recv.labels(interface=interface).set(stats.bytes_recv)\n        packets_sent.labels(interface=interface).set(stats.packets_sent)\n        packets_recv.labels(interface=interface).set(stats.packets_recv)\n\nif __name__ == '__main__':\n    start_http_server(8001)\n    while True:\n        collect_network_metrics()\n        time.sleep(15)\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#grafana-dashboards","title":"Grafana Dashboards","text":"","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#network-overview-dashboard","title":"Network Overview Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"Network Overview\",\n    \"panels\": [\n      {\n        \"title\": \"Interface Status\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"interface_up\",\n            \"legendFormat\": \"{{interface}}\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Bandwidth Utilization\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(ifInOctets[5m]) * 8 / 1000000\",\n            \"legendFormat\": \"{{instance}} - In (Mbps)\"\n          },\n          {\n            \"expr\": \"rate(ifOutOctets[5m]) * 8 / 1000000\",\n            \"legendFormat\": \"{{instance}} - Out (Mbps)\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Interface Errors\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(ifInErrors[5m])\",\n            \"legendFormat\": \"{{instance}} - In Errors\"\n          },\n          {\n            \"expr\": \"rate(ifOutErrors[5m])\",\n            \"legendFormat\": \"{{instance}} - Out Errors\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#custom-network-dashboard","title":"Custom Network Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"Network Performance\",\n    \"panels\": [\n      {\n        \"title\": \"Network Latency\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))\",\n            \"legendFormat\": \"95th percentile latency\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Packet Loss\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(icmp_packet_loss_total[5m])\",\n            \"legendFormat\": \"Packet loss rate\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Active Connections\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"netstat_tcp_established\",\n            \"legendFormat\": \"TCP connections\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#alerting-configuration","title":"Alerting Configuration","text":"","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#alert-rules","title":"Alert Rules","text":"<pre><code># /etc/prometheus/alert_rules.yml\ngroups:\n  - name: network_alerts\n    rules:\n      - alert: InterfaceDown\n        expr: interface_up == 0\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Interface {{ $labels.interface }} is down\"\n          description: \"Interface {{ $labels.interface }} has been down for more than 1 minute\"\n\n      - alert: HighBandwidthUsage\n        expr: rate(ifInOctets[5m]) * 8 / 1000000 &gt; 100\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High bandwidth usage on {{ $labels.instance }}\"\n          description: \"Interface {{ $labels.interface }} is using more than 100 Mbps\"\n\n      - alert: InterfaceErrors\n        expr: rate(ifInErrors[5m]) &gt; 0.1\n        for: 2m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High error rate on {{ $labels.instance }}\"\n          description: \"Interface {{ $labels.interface }} has error rate &gt; 0.1 errors/sec\"\n\n      - alert: HighLatency\n        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) &gt; 0.5\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High latency detected\"\n          description: \"95th percentile latency is above 500ms\"\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#alertmanager-configuration","title":"Alertmanager Configuration","text":"<pre><code># /etc/alertmanager/alertmanager.yml\nglobal:\n  smtp_smarthost: 'localhost:587'\n  smtp_from: 'alertmanager@example.com'\n\nroute:\n  group_by: ['alertname']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 1h\n  receiver: 'web.hook'\n\nreceivers:\n  - name: 'web.hook'\n    webhook_configs:\n      - url: 'http://127.0.0.1:5001/'\n\ninhibit_rules:\n  - source_match:\n      severity: 'critical'\n    target_match:\n      severity: 'warning'\n    equal: ['alertname', 'dev', 'instance']\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#advanced-monitoring-scenarios","title":"Advanced Monitoring Scenarios","text":"","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#docker-container-monitoring","title":"Docker Container Monitoring","text":"<pre><code># docker-compose.yml for monitoring stack\nversion: '3.8'\nservices:\n  prometheus:\n    image: prom/prometheus:latest\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=200h'\n      - '--web.enable-lifecycle'\n\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - grafana_data:/var/lib/grafana\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n\n  node-exporter:\n    image: prom/node-exporter:latest\n    ports:\n      - \"9100:9100\"\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n    command:\n      - '--path.procfs=/host/proc'\n      - '--path.sysfs=/host/sys'\n      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'\n\nvolumes:\n  prometheus_data:\n  grafana_data:\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#custom-network-metrics","title":"Custom Network Metrics","text":"<pre><code># custom_network_exporter.py\nimport subprocess\nimport time\nfrom prometheus_client import start_http_server, Gauge, Counter\n\n# Define custom metrics\nnetwork_connections = Gauge('network_connections_total', 'Total network connections', ['protocol', 'state'])\nnetwork_bandwidth = Gauge('network_bandwidth_bytes', 'Network bandwidth in bytes', ['interface', 'direction'])\nnetwork_packet_loss = Counter('network_packet_loss_total', 'Total packet loss', ['destination'])\n\ndef get_network_connections():\n    try:\n        result = subprocess.run(['ss', '-tuln'], capture_output=True, text=True)\n        lines = result.stdout.split('\\n')[1:]  # Skip header\n\n        tcp_established = 0\n        tcp_listen = 0\n        udp_listen = 0\n\n        for line in lines:\n            if 'tcp' in line and 'ESTAB' in line:\n                tcp_established += 1\n            elif 'tcp' in line and 'LISTEN' in line:\n                tcp_listen += 1\n            elif 'udp' in line and 'UNCONN' in line:\n                udp_listen += 1\n\n        network_connections.labels(protocol='tcp', state='established').set(tcp_established)\n        network_connections.labels(protocol='tcp', state='listen').set(tcp_listen)\n        network_connections.labels(protocol='udp', state='listen').set(udp_listen)\n\n    except Exception as e:\n        print(f\"Error getting network connections: {e}\")\n\ndef ping_test():\n    destinations = ['8.8.8.8', '1.1.1.1', 'google.com']\n\n    for dest in destinations:\n        try:\n            result = subprocess.run(['ping', '-c', '1', '-W', '1', dest], \n                                  capture_output=True, text=True)\n            if result.returncode != 0:\n                network_packet_loss.labels(destination=dest).inc()\n        except Exception as e:\n            print(f\"Error pinging {dest}: {e}\")\n\nif __name__ == '__main__':\n    start_http_server(8002)\n    while True:\n        get_network_connections()\n        ping_test()\n        time.sleep(30)\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#performance-optimization","title":"Performance Optimization","text":"","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#prometheus-configuration-optimization","title":"Prometheus Configuration Optimization","text":"<pre><code># Optimized prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    monitor: 'network-monitor'\n\nstorage:\n  tsdb:\n    retention.time: 15d\n    retention.size: 50GB\n\nscrape_configs:\n  - job_name: 'network_devices'\n    scrape_interval: 30s\n    scrape_timeout: 10s\n    static_configs:\n      - targets: ['192.168.1.1:9100', '192.168.1.2:9100']\n    metric_relabel_configs:\n      - source_labels: [__name__]\n        regex: '.*'\n        action: keep\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#grafana-performance-tuning","title":"Grafana Performance Tuning","text":"<pre><code># /etc/grafana/grafana.ini\n[server]\nhttp_port = 3000\nprotocol = http\n\n[database]\ntype = sqlite3\npath = /var/lib/grafana/grafana.db\n\n[session]\nprovider = file\n\n[security]\nadmin_user = admin\nadmin_password = admin\n\n[users]\nallow_sign_up = false\n\n[server]\nroot_url = http://localhost:3000/\n\n[log]\nmode = console\nlevel = info\n</code></pre>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#troubleshooting","title":"Troubleshooting","text":"","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li> <p>Prometheus not scraping targets <pre><code># Check target status\ncurl http://localhost:9090/api/v1/targets\n\n# Check configuration\npromtool check config /etc/prometheus/prometheus.yml\n</code></pre></p> </li> <li> <p>Grafana not connecting to Prometheus <pre><code># Test Prometheus connection\ncurl http://localhost:9090/api/v1/query?query=up\n\n# Check Grafana logs\nsudo journalctl -u grafana-server -f\n</code></pre></p> </li> <li> <p>High memory usage <pre><code># Optimize retention and scrape intervals\nglobal:\n  scrape_interval: 30s  # Increase from 15s\n\nstorage:\n  tsdb:\n    retention.time: 7d  # Reduce from 15d\n</code></pre></p> </li> </ol>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#conclusion","title":"Conclusion","text":"<p>Prometheus and Grafana provide a powerful foundation for network monitoring in NetDevOps environments. By implementing the configurations and best practices outlined in this guide, you can achieve comprehensive visibility into your network infrastructure.</p> <p>Key takeaways: - Start with basic monitoring and gradually add complexity - Use custom exporters for network-specific metrics - Implement proper alerting and notification - Optimize performance for large-scale deployments - Regular maintenance and updates are essential</p>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/monitoring-networks-with-prometheus-and-grafana-a-complete-guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>Prometheus Documentation</li> <li>Grafana Documentation</li> <li>SNMP Exporter</li> <li>Network Monitoring Best Practices</li> </ul> <p>This guide provides a comprehensive overview of network monitoring with Prometheus and Grafana. For more advanced topics, check out our other articles on specific monitoring scenarios and best practices. </p>","tags":["monitoring","prometheus","grafana","netdevops","observability","networking"]},{"location":"blog/network-automation-development-setup/","title":"NetDevOps Dev Setup","text":"<p>Setting up a modern development environment for network automation can be challenging. In this post, I'll walk you through my NetDevOps dev setup, including tools, tips, and best practices.</p> <p>Repository: network_automation_dev_setup</p>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#features","title":"Features","text":"<ul> <li>Install Docker</li> <li>Install LLDAP server</li> <li>Install Nautobot CMDB</li> <li>Install AWX</li> <li>Install Gitea</li> <li>Install Nginx</li> </ul>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#warning","title":"\u26a0\ufe0f Warning","text":"<p>This setup is for DEV/TEST only. Do NOT use in production environments!</p>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Update and restart your target machine.</li> <li>Install dependencies:</li> <li>Debian/Ubuntu:      <pre><code>sudo apt install python3-pip git\n</code></pre></li> <li>CentOS/RHEL:      <pre><code>sudo yum install python3-pip git\n</code></pre></li> <li>Clone the repository: <pre><code>git clone https://github.com/bsmeding/network_automation_dev_setup\ncd network_automation_dev_setup\n</code></pre></li> <li>As a non-root user:</li> <li>Install Python dependencies:      <pre><code>pip3 install -r requirements.txt\n</code></pre></li> <li>Install Ansible roles:      <pre><code>ansible-galaxy install -r ./roles/requirements.yml\n</code></pre></li> <li>Install Ansible collections:      <pre><code>ansible-galaxy install -r ./collections/requirements.yml\n</code></pre></li> <li>Edit the <code>inventory</code> file and set correct IP addresses.</li> <li>Edit <code>group_vars/all</code> and add your login username.</li> <li>Install Nautobot:      <pre><code>ansible-playbook install_nautobot.yml -i ./inventory -kK\n</code></pre></li> </ol>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#updating","title":"Updating","text":"<ul> <li>Update roles:   <pre><code>ansible-galaxy install -r ./roles/requirements.yml --force\n</code></pre></li> <li>Update collections:   <pre><code>ansible-galaxy install -r ./collections/requirements.yml --force\n</code></pre></li> <li>To update images/versions, check the variables section or re-run the playbook to pull the latest image.</li> </ul>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#variables","title":"Variables","text":"<p>Variables can be set in the playbook, or in <code>group_vars</code> or <code>host_vars</code> files. All roles have defaults that can be overridden.</p> <p>See role variables for: - Docker   - Also see geerlingguy.docker role - Nautobot - Ansible AWX - LDAP - Nginx Reverse Proxy</p>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#full-install","title":"Full Install","text":"<p>To install all tools on one server, use the <code>install_full.yml</code> playbook. Make sure the hostname (e.g. <code>srv1</code>) matches your inventory file.</p> <p>All settings for the full install are in roles/full_install_config/defaults/main.yml.</p> <p>Full install will: - Install Docker - Install LLDAP server - Install Nautobot CMDB - Install AWX - Install Gitea - Install Nginx - Configure LLDAP as authentication source for Nautobot and AWX (Gitea must be set manually) - Configure Nginx to serve all containers on port 80/443 based on URL</p>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#urls","title":"URLs","text":"<p>Change URLs according to your setup and/or DNS settings. Or add these to your local hosts file: <pre><code>&lt;serverip&gt;  git.lab.local cmdb.lab.local awx.lab.local ldap.lab.local\n</code></pre></p>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#default-logins","title":"Default Logins","text":"","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#ldap","title":"LDAP","text":"<ul> <li>Login: <code>admin</code> / <code>devnetops</code></li> <li>URL: <code>http://&lt;serverip&gt;:8080</code> or <code>http://ldap.lab.local</code></li> <li>Default users:</li> <li><code>user01</code> / <code>password01</code></li> <li><code>user02</code> / <code>password02</code></li> </ul>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#nautobot","title":"Nautobot","text":"<ul> <li>Login: <code>admin</code> / <code>devnetops</code> or LDAP</li> <li>URL: <code>http://&lt;serverip&gt;:8081</code> or <code>http://cmdb.lab.local</code></li> </ul>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#gitea","title":"Gitea","text":"<ul> <li>First user created via registration form is admin</li> <li>URL: <code>http://&lt;serverip&gt;:8082</code> or <code>http://git.lab.local</code></li> <li>To add LDAP to Gitea, see this guide</li> <li>LDAP server: <code>ldap</code> (container name, as all containers share a Docker network)</li> </ul>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/network-automation-development-setup/#awx","title":"AWX","text":"<ul> <li>URL: <code>http://&lt;serverip&gt;:8083</code> or <code>http://awx.lab.local</code></li> <li>Login: <code>admin</code> / <code>devnetops</code> or LDAP </li> </ul>","tags":["ansible","netdevops","devnetops","student","course","git","gitea","nginx","awx","lldap","docker"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/","title":"AI Agents in Network Automation: The Future of Intelligent Networking","text":"<p>Artificial Intelligence (AI) agents are transforming network automation by introducing intelligent, autonomous capabilities that go beyond traditional rule-based automation. This comprehensive guide explores how AI agents are revolutionizing network operations, from intelligent troubleshooting to predictive maintenance and autonomous network management.</p>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#what-are-ai-agents-in-networking","title":"What are AI Agents in Networking?","text":"<p>AI agents in networking are intelligent software systems that can: - Autonomously monitor network health and performance - Intelligently troubleshoot issues without human intervention - Predict and prevent network problems before they occur - Learn and adapt from network behavior patterns - Make decisions based on complex data analysis</p> <p>As Network to Code explains, \"AI is reshaping network automation by introducing intelligent decision-making capabilities that can handle complex, dynamic network environments more effectively than traditional automation approaches.\"</p>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#types-of-ai-agents-in-networking","title":"Types of AI Agents in Networking","text":"","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#1-monitoring-and-observability-agents","title":"1. Monitoring and Observability Agents","text":"<pre><code># network_monitoring_agent.py\nimport asyncio\nimport aiohttp\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\nfrom prometheus_client import start_http_server, Gauge, Counter\n\nclass NetworkMonitoringAgent:\n    def __init__(self):\n        self.anomaly_detector = IsolationForest(contamination=0.1)\n        self.metrics_history = []\n        self.alert_threshold = 0.8\n\n        # Prometheus metrics\n        self.anomaly_score = Gauge('network_anomaly_score', 'Anomaly detection score')\n        self.alert_count = Counter('network_alerts_total', 'Total alerts generated')\n\n    async def collect_metrics(self):\n        \"\"\"Collect network metrics from various sources\"\"\"\n        metrics = {\n            'bandwidth_utilization': await self.get_bandwidth_utilization(),\n            'latency': await self.get_latency(),\n            'packet_loss': await self.get_packet_loss(),\n            'error_rate': await self.get_error_rate(),\n            'connection_count': await self.get_connection_count()\n        }\n        return metrics\n\n    async def detect_anomalies(self, metrics):\n        \"\"\"Detect anomalies using machine learning\"\"\"\n        features = np.array([\n            metrics['bandwidth_utilization'],\n            metrics['latency'],\n            metrics['packet_loss'],\n            metrics['error_rate'],\n            metrics['connection_count']\n        ]).reshape(1, -1)\n\n        # Update anomaly detector\n        self.metrics_history.append(features[0])\n        if len(self.metrics_history) &gt; 100:\n            self.metrics_history.pop(0)\n            self.anomaly_detector.fit(np.array(self.metrics_history))\n\n        # Predict anomaly score\n        anomaly_score = self.anomaly_detector.decision_function(features)[0]\n        self.anomaly_score.set(anomaly_score)\n\n        return anomaly_score &lt; -self.alert_threshold\n\n    async def get_bandwidth_utilization(self):\n        \"\"\"Get current bandwidth utilization\"\"\"\n        # Implementation would connect to network devices\n        return np.random.uniform(0, 100)\n\n    async def get_latency(self):\n        \"\"\"Get current network latency\"\"\"\n        return np.random.uniform(1, 100)\n\n    async def get_packet_loss(self):\n        \"\"\"Get current packet loss rate\"\"\"\n        return np.random.uniform(0, 5)\n\n    async def get_error_rate(self):\n        \"\"\"Get current error rate\"\"\"\n        return np.random.uniform(0, 2)\n\n    async def get_connection_count(self):\n        \"\"\"Get current connection count\"\"\"\n        return np.random.uniform(100, 10000)\n\n    async def run(self):\n        \"\"\"Main monitoring loop\"\"\"\n        start_http_server(8000)\n\n        while True:\n            try:\n                metrics = await self.collect_metrics()\n                is_anomaly = await self.detect_anomalies(metrics)\n\n                if is_anomaly:\n                    self.alert_count.inc()\n                    await self.trigger_alert(metrics)\n\n                await asyncio.sleep(30)\n\n            except Exception as e:\n                print(f\"Error in monitoring loop: {e}\")\n                await asyncio.sleep(60)\n\n    async def trigger_alert(self, metrics):\n        \"\"\"Trigger alert when anomaly is detected\"\"\"\n        print(f\"ANOMALY DETECTED: {metrics}\")\n        # Implementation would send alerts via various channels\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#2-intelligent-troubleshooting-agents","title":"2. Intelligent Troubleshooting Agents","text":"<pre><code># troubleshooting_agent.py\nimport asyncio\nimport json\nfrom typing import Dict, List, Optional\nfrom dataclasses import dataclass\n\n@dataclass\nclass NetworkIssue:\n    severity: str\n    description: str\n    affected_components: List[str]\n    suggested_actions: List[str]\n    confidence: float\n\nclass IntelligentTroubleshootingAgent:\n    def __init__(self):\n        self.knowledge_base = self.load_knowledge_base()\n        self.troubleshooting_history = []\n\n    def load_knowledge_base(self) -&gt; Dict:\n        \"\"\"Load troubleshooting knowledge base\"\"\"\n        return {\n            \"high_latency\": {\n                \"symptoms\": [\"latency &gt; 100ms\", \"packet_loss &gt; 1%\"],\n                \"causes\": [\n                    \"network congestion\",\n                    \"router overload\",\n                    \"bandwidth saturation\",\n                    \"misconfigured QoS\"\n                ],\n                \"solutions\": [\n                    \"check bandwidth utilization\",\n                    \"verify QoS configuration\",\n                    \"analyze routing tables\",\n                    \"check for network loops\"\n                ]\n            },\n            \"interface_down\": {\n                \"symptoms\": [\"interface_status = down\", \"no_traffic\"],\n                \"causes\": [\n                    \"physical cable issue\",\n                    \"port configuration error\",\n                    \"device failure\",\n                    \"power issue\"\n                ],\n                \"solutions\": [\n                    \"check physical connections\",\n                    \"verify interface configuration\",\n                    \"test with different cable\",\n                    \"check device power status\"\n                ]\n            },\n            \"high_error_rate\": {\n                \"symptoms\": [\"error_rate &gt; 0.1%\", \"interface_errors &gt; 0\"],\n                \"causes\": [\n                    \"cable quality issues\",\n                    \"interface configuration mismatch\",\n                    \"hardware failure\",\n                    \"electromagnetic interference\"\n                ],\n                \"solutions\": [\n                    \"replace network cable\",\n                    \"check interface settings\",\n                    \"verify duplex/speed settings\",\n                    \"check for interference sources\"\n                ]\n            }\n        }\n\n    async def analyze_network_state(self, metrics: Dict) -&gt; List[NetworkIssue]:\n        \"\"\"Analyze network state and identify issues\"\"\"\n        issues = []\n\n        # Check for high latency\n        if metrics.get('latency', 0) &gt; 100:\n            issue = NetworkIssue(\n                severity=\"medium\",\n                description=\"High network latency detected\",\n                affected_components=[\"network_path\"],\n                suggested_actions=self.knowledge_base[\"high_latency\"][\"solutions\"],\n                confidence=0.85\n            )\n            issues.append(issue)\n\n        # Check for interface issues\n        if metrics.get('interface_status') == 'down':\n            issue = NetworkIssue(\n                severity=\"high\",\n                description=\"Network interface is down\",\n                affected_components=[\"network_interface\"],\n                suggested_actions=self.knowledge_base[\"interface_down\"][\"solutions\"],\n                confidence=0.95\n            )\n            issues.append(issue)\n\n        # Check for high error rates\n        if metrics.get('error_rate', 0) &gt; 0.1:\n            issue = NetworkIssue(\n                severity=\"medium\",\n                description=\"High error rate detected\",\n                affected_components=[\"network_interface\"],\n                suggested_actions=self.knowledge_base[\"high_error_rate\"][\"solutions\"],\n                confidence=0.80\n            )\n            issues.append(issue)\n\n        return issues\n\n    async def generate_troubleshooting_plan(self, issues: List[NetworkIssue]) -&gt; Dict:\n        \"\"\"Generate automated troubleshooting plan\"\"\"\n        plan = {\n            \"priority\": \"high\" if any(i.severity == \"high\" for i in issues) else \"medium\",\n            \"estimated_duration\": len(issues) * 15,  # 15 minutes per issue\n            \"steps\": []\n        }\n\n        for issue in sorted(issues, key=lambda x: x.severity == \"high\", reverse=True):\n            for action in issue.suggested_actions:\n                plan[\"steps\"].append({\n                    \"action\": action,\n                    \"issue\": issue.description,\n                    \"confidence\": issue.confidence,\n                    \"automated\": self.can_automate_action(action)\n                })\n\n        return plan\n\n    def can_automate_action(self, action: str) -&gt; bool:\n        \"\"\"Check if an action can be automated\"\"\"\n        automated_actions = [\n            \"check bandwidth utilization\",\n            \"verify interface configuration\",\n            \"analyze routing tables\",\n            \"check interface settings\"\n        ]\n        return action in automated_actions\n\n    async def execute_troubleshooting_plan(self, plan: Dict) -&gt; Dict:\n        \"\"\"Execute the troubleshooting plan\"\"\"\n        results = {\n            \"executed_steps\": [],\n            \"successful_actions\": [],\n            \"failed_actions\": [],\n            \"recommendations\": []\n        }\n\n        for step in plan[\"steps\"]:\n            if step[\"automated\"]:\n                try:\n                    result = await self.execute_action(step[\"action\"])\n                    results[\"executed_steps\"].append({\n                        \"action\": step[\"action\"],\n                        \"result\": result,\n                        \"success\": result.get(\"success\", False)\n                    })\n\n                    if result.get(\"success\", False):\n                        results[\"successful_actions\"].append(step[\"action\"])\n                    else:\n                        results[\"failed_actions\"].append(step[\"action\"])\n\n                except Exception as e:\n                    results[\"failed_actions\"].append(step[\"action\"])\n                    print(f\"Error executing {step['action']}: {e}\")\n            else:\n                results[\"recommendations\"].append(step[\"action\"])\n\n        return results\n\n    async def execute_action(self, action: str) -&gt; Dict:\n        \"\"\"Execute a specific troubleshooting action\"\"\"\n        # This would integrate with network automation tools\n        if action == \"check bandwidth utilization\":\n            return await self.check_bandwidth_utilization()\n        elif action == \"verify interface configuration\":\n            return await self.verify_interface_config()\n        elif action == \"analyze routing tables\":\n            return await self.analyze_routing_tables()\n        else:\n            return {\"success\": False, \"error\": \"Action not implemented\"}\n\n    async def check_bandwidth_utilization(self) -&gt; Dict:\n        \"\"\"Check bandwidth utilization\"\"\"\n        # Implementation would query network devices\n        return {\"success\": True, \"utilization\": 75.5}\n\n    async def verify_interface_config(self) -&gt; Dict:\n        \"\"\"Verify interface configuration\"\"\"\n        # Implementation would check device configurations\n        return {\"success\": True, \"config_valid\": True}\n\n    async def analyze_routing_tables(self) -&gt; Dict:\n        \"\"\"Analyze routing tables\"\"\"\n        # Implementation would analyze routing information\n        return {\"success\": True, \"routing_optimal\": True}\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#3-predictive-maintenance-agents","title":"3. Predictive Maintenance Agents","text":"<pre><code># predictive_maintenance_agent.py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom datetime import datetime, timedelta\n\nclass PredictiveMaintenanceAgent:\n    def __init__(self):\n        self.model = RandomForestRegressor(n_estimators=100, random_state=42)\n        self.scaler = StandardScaler()\n        self.is_trained = False\n        self.maintenance_threshold = 0.7\n\n    def prepare_features(self, device_data: Dict) -&gt; np.ndarray:\n        \"\"\"Prepare features for prediction\"\"\"\n        features = [\n            device_data.get('uptime', 0),\n            device_data.get('temperature', 0),\n            device_data.get('cpu_utilization', 0),\n            device_data.get('memory_utilization', 0),\n            device_data.get('interface_errors', 0),\n            device_data.get('packet_loss', 0),\n            device_data.get('fan_speed', 0),\n            device_data.get('power_consumption', 0)\n        ]\n        return np.array(features).reshape(1, -1)\n\n    def train_model(self, historical_data: List[Dict]):\n        \"\"\"Train the predictive maintenance model\"\"\"\n        if len(historical_data) &lt; 100:\n            print(\"Insufficient data for training\")\n            return\n\n        # Prepare training data\n        X = []\n        y = []\n\n        for record in historical_data:\n            features = self.prepare_features(record['device_data'])\n            X.append(features[0])\n            y.append(record['maintenance_needed'])\n\n        X = np.array(X)\n        y = np.array(y)\n\n        # Scale features\n        X_scaled = self.scaler.fit_transform(X)\n\n        # Train model\n        self.model.fit(X_scaled, y)\n        self.is_trained = True\n\n        print(f\"Model trained with {len(historical_data)} samples\")\n\n    def predict_maintenance_needs(self, device_data: Dict) -&gt; Dict:\n        \"\"\"Predict maintenance needs for a device\"\"\"\n        if not self.is_trained:\n            return {\"error\": \"Model not trained\"}\n\n        features = self.prepare_features(device_data)\n        features_scaled = self.scaler.transform(features)\n\n        prediction = self.model.predict(features_scaled)[0]\n        probability = self.model.predict_proba(features_scaled)[0] if hasattr(self.model, 'predict_proba') else [1-prediction, prediction]\n\n        return {\n            \"maintenance_probability\": prediction,\n            \"needs_maintenance\": prediction &gt; self.maintenance_threshold,\n            \"confidence\": max(probability),\n            \"recommended_actions\": self.get_maintenance_recommendations(device_data, prediction)\n        }\n\n    def get_maintenance_recommendations(self, device_data: Dict, prediction: float) -&gt; List[str]:\n        \"\"\"Get maintenance recommendations based on prediction\"\"\"\n        recommendations = []\n\n        if prediction &gt; 0.8:\n            recommendations.append(\"Schedule immediate maintenance\")\n        elif prediction &gt; 0.6:\n            recommendations.append(\"Schedule maintenance within 1 week\")\n        elif prediction &gt; 0.4:\n            recommendations.append(\"Monitor closely and schedule maintenance within 1 month\")\n\n        # Add specific recommendations based on device data\n        if device_data.get('temperature', 0) &gt; 80:\n            recommendations.append(\"Check cooling system and ventilation\")\n\n        if device_data.get('interface_errors', 0) &gt; 100:\n            recommendations.append(\"Investigate interface errors and consider cable replacement\")\n\n        if device_data.get('cpu_utilization', 0) &gt; 90:\n            recommendations.append(\"Consider hardware upgrade or load balancing\")\n\n        return recommendations\n\n    async def monitor_devices(self, devices: List[Dict]) -&gt; Dict:\n        \"\"\"Monitor multiple devices for maintenance needs\"\"\"\n        results = {\n            \"devices_checked\": len(devices),\n            \"maintenance_alerts\": [],\n            \"recommendations\": []\n        }\n\n        for device in devices:\n            prediction = self.predict_maintenance_needs(device)\n\n            if prediction.get(\"needs_maintenance\", False):\n                results[\"maintenance_alerts\"].append({\n                    \"device_id\": device.get(\"id\"),\n                    \"device_name\": device.get(\"name\"),\n                    \"probability\": prediction[\"maintenance_probability\"],\n                    \"recommendations\": prediction[\"recommended_actions\"]\n                })\n\n        return results\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#integration-with-network-automation-tools","title":"Integration with Network Automation Tools","text":"","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#ansible-integration","title":"Ansible Integration","text":"<pre><code># ai_enhanced_playbook.yml\n---\n- name: AI-Enhanced Network Configuration\n  hosts: network_devices\n  gather_facts: no\n\n  vars:\n    ai_agent_endpoint: \"http://ai-agent:8000/api\"\n\n  tasks:\n    - name: Get AI recommendations\n      uri:\n        url: \"{{ ai_agent_endpoint }}/recommendations\"\n        method: POST\n        body_format: json\n        body:\n          device_type: \"{{ ansible_network_os }}\"\n          current_config: \"{{ lookup('file', 'current_config.txt') }}\"\n          performance_metrics: \"{{ lookup('file', 'metrics.json') }}\"\n      register: ai_recommendations\n      delegate_to: localhost\n\n    - name: Apply AI-recommended configurations\n      cisco.ios.config:\n        lines: \"{{ item }}\"\n        parents: \"{{ item.parents | default([]) }}\"\n      loop: \"{{ ai_recommendations.json.recommendations }}\"\n      when: item.confidence &gt; 0.8\n      register: config_results\n\n    - name: Validate AI recommendations\n      cisco.ios.ping:\n        dest: \"{{ item }}\"\n        count: 3\n      loop: \"{{ ai_recommendations.json.test_targets }}\"\n      when: config_results.changed\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#terraform-integration","title":"Terraform Integration","text":"<pre><code># ai_enhanced_terraform.tf\ndata \"external\" \"ai_network_design\" {\n  program = [\"python3\", \"${path.module}/ai_network_designer.py\"]\n\n  query = {\n    requirements = jsonencode({\n      expected_traffic = var.expected_traffic\n      availability_requirement = var.availability_requirement\n      budget_constraint = var.budget_constraint\n      geographic_distribution = var.geographic_distribution\n    })\n  }\n}\n\nlocals {\n  ai_design = jsondecode(data.external.ai_network_design.result.design)\n}\n\nresource \"aws_vpc\" \"ai_optimized\" {\n  cidr_block = local.ai_design.vpc_cidr\n\n  tags = {\n    Name = \"AI-Optimized VPC\"\n    DesignedBy = \"AI Agent\"\n  }\n}\n\nresource \"aws_subnet\" \"ai_subnets\" {\n  count = length(local.ai_design.subnets)\n\n  vpc_id     = aws_vpc.ai_optimized.id\n  cidr_block = local.ai_design.subnets[count.index].cidr\n  availability_zone = local.ai_design.subnets[count.index].az\n\n  tags = {\n    Name = local.ai_design.subnets[count.index].name\n    Purpose = local.ai_design.subnets[count.index].purpose\n  }\n}\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#ai-agent-architecture","title":"AI Agent Architecture","text":"","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code># docker-compose.yml for AI agents\nversion: '3.8'\nservices:\n  monitoring-agent:\n    image: network-ai/monitoring-agent:latest\n    ports:\n      - \"8001:8000\"\n    environment:\n      - PROMETHEUS_URL=http://prometheus:9090\n      - ALERT_THRESHOLD=0.8\n    volumes:\n      - ./config/monitoring.yml:/app/config.yml\n\n  troubleshooting-agent:\n    image: network-ai/troubleshooting-agent:latest\n    ports:\n      - \"8002:8000\"\n    environment:\n      - KNOWLEDGE_BASE_PATH=/app/knowledge\n      - ANSIBLE_CONTROLLER=http://ansible:8080\n    volumes:\n      - ./knowledge:/app/knowledge\n\n  predictive-agent:\n    image: network-ai/predictive-agent:latest\n    ports:\n      - \"8003:8000\"\n    environment:\n      - MODEL_PATH=/app/models\n      - TRAINING_DATA_PATH=/app/data\n    volumes:\n      - ./models:/app/models\n      - ./data:/app/data\n\n  ai-orchestrator:\n    image: network-ai/orchestrator:latest\n    ports:\n      - \"8000:8000\"\n    environment:\n      - MONITORING_AGENT=http://monitoring-agent:8000\n      - TROUBLESHOOTING_AGENT=http://troubleshooting-agent:8000\n      - PREDICTIVE_AGENT=http://predictive-agent:8000\n    depends_on:\n      - monitoring-agent\n      - troubleshooting-agent\n      - predictive-agent\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#best-practices-for-ai-agents","title":"Best Practices for AI Agents","text":"","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#1-data-quality-and-validation","title":"1. Data Quality and Validation","text":"<pre><code># data_validation.py\nimport pandas as pd\nfrom typing import Dict, List, Optional\n\nclass DataValidator:\n    def __init__(self):\n        self.validation_rules = {\n            'latency': {'min': 0, 'max': 1000, 'unit': 'ms'},\n            'bandwidth': {'min': 0, 'max': 100000, 'unit': 'Mbps'},\n            'packet_loss': {'min': 0, 'max': 100, 'unit': '%'},\n            'cpu_utilization': {'min': 0, 'max': 100, 'unit': '%'}\n        }\n\n    def validate_metrics(self, metrics: Dict) -&gt; Dict:\n        \"\"\"Validate network metrics\"\"\"\n        validation_results = {\n            'valid': True,\n            'errors': [],\n            'warnings': []\n        }\n\n        for metric, value in metrics.items():\n            if metric in self.validation_rules:\n                rule = self.validation_rules[metric]\n\n                if not (rule['min'] &lt;= value &lt;= rule['max']):\n                    validation_results['valid'] = False\n                    validation_results['errors'].append(\n                        f\"{metric}: {value} {rule['unit']} is outside valid range [{rule['min']}, {rule['max']}]\"\n                    )\n\n                # Check for suspicious values\n                if value &gt; rule['max'] * 0.9:\n                    validation_results['warnings'].append(\n                        f\"{metric}: {value} {rule['unit']} is approaching maximum\"\n                    )\n\n        return validation_results\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#2-explainable-ai","title":"2. Explainable AI","text":"<pre><code># explainable_ai.py\nimport shap\nimport numpy as np\nfrom typing import Dict, List\n\nclass ExplainableAI:\n    def __init__(self, model):\n        self.model = model\n        self.explainer = None\n\n    def create_explainer(self, training_data: np.ndarray):\n        \"\"\"Create SHAP explainer for the model\"\"\"\n        self.explainer = shap.TreeExplainer(self.model)\n\n    def explain_prediction(self, features: np.ndarray, feature_names: List[str]) -&gt; Dict:\n        \"\"\"Explain model prediction using SHAP\"\"\"\n        if self.explainer is None:\n            return {\"error\": \"Explainer not initialized\"}\n\n        shap_values = self.explainer.shap_values(features)\n\n        explanation = {\n            'prediction': self.model.predict(features)[0],\n            'feature_importance': {},\n            'reasoning': []\n        }\n\n        for i, feature_name in enumerate(feature_names):\n            importance = abs(shap_values[0][i])\n            explanation['feature_importance'][feature_name] = importance\n\n            if importance &gt; 0.1:  # Significant feature\n                direction = \"increased\" if shap_values[0][i] &gt; 0 else \"decreased\"\n                explanation['reasoning'].append(\n                    f\"{feature_name} {direction} the prediction by {importance:.3f}\"\n                )\n\n        return explanation\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#3-continuous-learning","title":"3. Continuous Learning","text":"<pre><code># continuous_learning.py\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom typing import List, Dict\n\nclass ContinuousLearningAgent:\n    def __init__(self):\n        self.model = RandomForestClassifier(n_estimators=100, random_state=42)\n        self.performance_history = []\n        self.retrain_threshold = 0.05  # 5% performance degradation\n\n    def update_model(self, new_data: List[Dict], new_labels: List[int]):\n        \"\"\"Update model with new data\"\"\"\n        # Convert to numpy arrays\n        X_new = np.array([d['features'] for d in new_data])\n        y_new = np.array(new_labels)\n\n        # Evaluate current model performance\n        current_performance = self.evaluate_performance(X_new, y_new)\n        self.performance_history.append(current_performance)\n\n        # Check if retraining is needed\n        if len(self.performance_history) &gt; 10:\n            recent_performance = np.mean(self.performance_history[-10:])\n            baseline_performance = np.mean(self.performance_history[:-10])\n\n            if baseline_performance - recent_performance &gt; self.retrain_threshold:\n                print(\"Performance degradation detected, retraining model...\")\n                self.retrain_model(X_new, y_new)\n\n    def retrain_model(self, X: np.ndarray, y: np.ndarray):\n        \"\"\"Retrain the model with new data\"\"\"\n        self.model.fit(X, y)\n        print(\"Model retrained successfully\")\n\n    def evaluate_performance(self, X: np.ndarray, y: np.ndarray) -&gt; float:\n        \"\"\"Evaluate model performance\"\"\"\n        predictions = self.model.predict(X)\n        accuracy = np.mean(predictions == y)\n        return accuracy\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#security-considerations","title":"Security Considerations","text":"","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#ai-agent-security","title":"AI Agent Security","text":"<pre><code># ai_security.py\nimport hashlib\nimport hmac\nimport time\nfrom typing import Dict, Optional\n\nclass AISecurityManager:\n    def __init__(self, secret_key: str):\n        self.secret_key = secret_key.encode('utf-8')\n        self.allowed_actions = {\n            'read_metrics': ['monitoring_agent'],\n            'modify_config': ['troubleshooting_agent'],\n            'predict_maintenance': ['predictive_agent']\n        }\n\n    def authenticate_request(self, request: Dict) -&gt; bool:\n        \"\"\"Authenticate AI agent request\"\"\"\n        if 'signature' not in request or 'timestamp' not in request:\n            return False\n\n        # Check timestamp (prevent replay attacks)\n        if abs(time.time() - request['timestamp']) &gt; 300:  # 5 minutes\n            return False\n\n        # Verify signature\n        expected_signature = self.generate_signature(request)\n        return hmac.compare_digest(request['signature'], expected_signature)\n\n    def generate_signature(self, data: Dict) -&gt; str:\n        \"\"\"Generate HMAC signature for data\"\"\"\n        message = f\"{data['action']}:{data['timestamp']}:{data['data']}\"\n        signature = hmac.new(self.secret_key, message.encode('utf-8'), hashlib.sha256)\n        return signature.hexdigest()\n\n    def authorize_action(self, agent_id: str, action: str) -&gt; bool:\n        \"\"\"Authorize agent action\"\"\"\n        return agent_id in self.allowed_actions.get(action, [])\n</code></pre>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#conclusion","title":"Conclusion","text":"<p>AI agents represent the next evolution in network automation, providing intelligent, autonomous capabilities that can significantly improve network operations. By implementing the patterns and best practices outlined in this guide, organizations can build robust, secure, and effective AI-powered network automation systems.</p> <p>Key takeaways: - Start with specific use cases and gradually expand - Ensure data quality and validation - Implement explainable AI for transparency - Focus on security and access control - Continuously monitor and improve AI performance</p>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/ai-agents-in-network-automation-the-future-of-intelligent-networking/#additional-resources","title":"Additional Resources","text":"<ul> <li>AI in NetDevOps: Reshaping Network Automation</li> <li>AI Agents in Networking</li> <li>Machine Learning for Network Operations</li> </ul> <p>This guide provides a comprehensive overview of AI agents in network automation. For more advanced topics, check out our other articles on specific AI applications and best practices. </p>","tags":["ai","artificial intelligence","network automation","netdevops","ai agents","machine learning"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/","title":"CI/CD Pipelines for Network Automation: Building Reliable Deployment Workflows","text":"<p>Continuous Integration and Continuous Deployment (CI/CD) pipelines are essential for modern network automation, enabling reliable, repeatable, and auditable network changes. This comprehensive guide explores how to implement CI/CD pipelines specifically designed for network automation workflows.</p>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#why-cicd-for-network-automation","title":"Why CI/CD for Network Automation?","text":"<p>CI/CD pipelines for network automation provide:</p> <ul> <li>Automated Testing: Validate configurations before deployment</li> <li>Consistent Deployments: Ensure identical environments across stages</li> <li>Rollback Capabilities: Quickly revert problematic changes</li> <li>Audit Trail: Track all network changes and approvals</li> <li>Reduced Human Error: Minimize manual configuration mistakes</li> <li>Faster Deployment: Automate repetitive tasks</li> </ul>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#cicd-pipeline-architecture-for-networks","title":"CI/CD Pipeline Architecture for Networks","text":"","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#basic-pipeline-flow","title":"Basic Pipeline Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Code      \u2502\u2500\u2500\u2500\u25b6\u2502   Build &amp;   \u2502\u2500\u2500\u2500\u25b6\u2502   Test      \u2502\u2500\u2500\u2500\u25b6\u2502   Deploy    \u2502\n\u2502   Commit    \u2502    \u2502   Validate  \u2502    \u2502   Stage     \u2502    \u2502   Production\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#advanced-network-pipeline","title":"Advanced Network Pipeline","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Network   \u2502\u2500\u2500\u2500\u25b6\u2502   Syntax    \u2502\u2500\u2500\u2500\u25b6\u2502   Unit      \u2502\u2500\u2500\u2500\u25b6\u2502   Integration\u2502\n\u2502   Config    \u2502    \u2502   Check     \u2502    \u2502   Tests     \u2502    \u2502   Tests     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                              \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Rollback  \u2502\u25c0\u2500\u2500\u2500\u2502   Monitor   \u2502\u25c0\u2500\u2500\u2500\u2502   Deploy    \u2502\u25c0\u2500\u2500\u2500\u2502   Security  \u2502\n\u2502   Plan      \u2502    \u2502   &amp; Alert   \u2502    \u2502   Production\u2502    \u2502   Scan      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#gitlab-cicd-implementation","title":"GitLab CI/CD Implementation","text":"","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#basic-network-pipeline","title":"Basic Network Pipeline","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - validate\n  - test\n  - deploy\n  - monitor\n\nvariables:\n  ANSIBLE_FORCE_COLOR: \"true\"\n  ANSIBLE_HOST_KEY_CHECKING: \"false\"\n\n# Validate stage\nvalidate_config:\n  stage: validate\n  image: python:3.9\n  before_script:\n    - pip install ansible yamllint\n  script:\n    - yamllint playbooks/\n    - ansible-playbook --check --diff playbooks/validate.yml\n  only:\n    - merge_requests\n    - main\n\n# Test stage\ntest_network_config:\n  stage: test\n  image: python:3.9\n  before_script:\n    - pip install ansible\n    - echo \"$SSH_PRIVATE_KEY\" &gt; ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n  script:\n    - ansible-playbook -i inventory/test playbooks/test_network.yml\n  environment:\n    name: test\n    url: https://test-network.example.com\n  only:\n    - merge_requests\n    - main\n\n# Deploy stage\ndeploy_to_staging:\n  stage: deploy\n  image: python:3.9\n  before_script:\n    - pip install ansible\n    - echo \"$SSH_PRIVATE_KEY\" &gt; ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n  script:\n    - ansible-playbook -i inventory/staging playbooks/deploy.yml\n  environment:\n    name: staging\n    url: https://staging-network.example.com\n  only:\n    - main\n  when: manual\n\ndeploy_to_production:\n  stage: deploy\n  image: python:3.9\n  before_script:\n    - pip install ansible\n    - echo \"$SSH_PRIVATE_KEY\" &gt; ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n  script:\n    - ansible-playbook -i inventory/production playbooks/deploy.yml\n  environment:\n    name: production\n    url: https://production-network.example.com\n  only:\n    - main\n  when: manual\n  rules:\n    - if: $CI_COMMIT_BRANCH == \"main\"\n      when: manual\n      allow_failure: false\n\n# Monitor stage\nmonitor_deployment:\n  stage: monitor\n  image: python:3.9\n  before_script:\n    - pip install requests\n  script:\n    - python scripts/monitor_deployment.py\n  environment:\n    name: production\n  only:\n    - main\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#advanced-network-pipeline-with-security","title":"Advanced Network Pipeline with Security","text":"<pre><code># .gitlab-ci.yml - Advanced\nstages:\n  - validate\n  - security\n  - test\n  - deploy\n  - monitor\n  - rollback\n\nvariables:\n  ANSIBLE_FORCE_COLOR: \"true\"\n  ANSIBLE_HOST_KEY_CHECKING: \"false\"\n  NETWORK_CONFIG_PATH: \"network_configs/\"\n\n# Validate stage\nvalidate_network_config:\n  stage: validate\n  image: python:3.9\n  before_script:\n    - pip install ansible yamllint jsonschema\n  script:\n    - echo \"Validating YAML syntax...\"\n    - yamllint network_configs/\n    - echo \"Validating JSON schema...\"\n    - python scripts/validate_schema.py\n    - echo \"Checking Ansible syntax...\"\n    - ansible-playbook --check --diff playbooks/validate.yml\n  artifacts:\n    reports:\n      yamllint: yamllint-report.xml\n  only:\n    - merge_requests\n    - main\n\n# Security stage\nsecurity_scan:\n  stage: security\n  image: python:3.9\n  before_script:\n    - pip install bandit safety\n  script:\n    - echo \"Running security scan...\"\n    - bandit -r . -f json -o bandit-report.json\n    - safety check --json --output safety-report.json\n  artifacts:\n    reports:\n      bandit: bandit-report.json\n      safety: safety-report.json\n  allow_failure: true\n  only:\n    - merge_requests\n    - main\n\n# Test stage\nunit_tests:\n  stage: test\n  image: python:3.9\n  before_script:\n    - pip install pytest pytest-ansible\n  script:\n    - pytest tests/unit/ -v --junitxml=unit-test-results.xml\n  artifacts:\n    reports:\n      junit: unit-test-results.xml\n  only:\n    - merge_requests\n    - main\n\nintegration_tests:\n  stage: test\n  image: python:3.9\n  before_script:\n    - pip install ansible\n    - echo \"$SSH_PRIVATE_KEY\" &gt; ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n  script:\n    - ansible-playbook -i inventory/test playbooks/test_integration.yml\n  environment:\n    name: test\n  only:\n    - merge_requests\n    - main\n\n# Deploy stage\ndeploy_staging:\n  stage: deploy\n  image: python:3.9\n  before_script:\n    - pip install ansible\n    - echo \"$SSH_PRIVATE_KEY\" &gt; ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n  script:\n    - ansible-playbook -i inventory/staging playbooks/deploy.yml\n    - ansible-playbook -i inventory/staging playbooks/verify.yml\n  environment:\n    name: staging\n  only:\n    - main\n  when: manual\n\ndeploy_production:\n  stage: deploy\n  image: python:3.9\n  before_script:\n    - pip install ansible\n    - echo \"$SSH_PRIVATE_KEY\" &gt; ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n  script:\n    - ansible-playbook -i inventory/production playbooks/deploy.yml\n    - ansible-playbook -i inventory/production playbooks/verify.yml\n  environment:\n    name: production\n  only:\n    - main\n  when: manual\n  rules:\n    - if: $CI_COMMIT_BRANCH == \"main\"\n      when: manual\n      allow_failure: false\n\n# Monitor stage\nmonitor_deployment:\n  stage: monitor\n  image: python:3.9\n  before_script:\n    - pip install requests prometheus_client\n  script:\n    - python scripts/monitor_deployment.py\n    - python scripts/health_check.py\n  environment:\n    name: production\n  only:\n    - main\n\n# Rollback stage\nrollback_deployment:\n  stage: rollback\n  image: python:3.9\n  before_script:\n    - pip install ansible\n    - echo \"$SSH_PRIVATE_KEY\" &gt; ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n  script:\n    - ansible-playbook -i inventory/production playbooks/rollback.yml\n  environment:\n    name: production\n  when: manual\n  allow_failure: false\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#github-actions-implementation","title":"GitHub Actions Implementation","text":"","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#network-automation-workflow","title":"Network Automation Workflow","text":"<pre><code># .github/workflows/network-automation.yml\nname: Network Automation Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  ANSIBLE_FORCE_COLOR: true\n  ANSIBLE_HOST_KEY_CHECKING: false\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install dependencies\n      run: |\n        pip install ansible yamllint jsonschema\n\n    - name: Validate YAML syntax\n      run: yamllint network_configs/\n\n    - name: Validate JSON schema\n      run: python scripts/validate_schema.py\n\n    - name: Check Ansible syntax\n      run: ansible-playbook --check --diff playbooks/validate.yml\n\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install security tools\n      run: |\n        pip install bandit safety\n\n    - name: Run Bandit security scan\n      run: bandit -r . -f json -o bandit-report.json\n\n    - name: Run Safety check\n      run: safety check --json --output safety-report.json\n\n    - name: Upload security reports\n      uses: actions/upload-artifact@v3\n      with:\n        name: security-reports\n        path: |\n          bandit-report.json\n          safety-report.json\n\n  test:\n    runs-on: ubuntu-latest\n    needs: [validate, security-scan]\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install dependencies\n      run: |\n        pip install ansible pytest pytest-ansible\n\n    - name: Run unit tests\n      run: pytest tests/unit/ -v --junitxml=unit-test-results.xml\n\n    - name: Upload test results\n      uses: actions/upload-artifact@v3\n      with:\n        name: test-results\n        path: unit-test-results.xml\n\n  deploy-staging:\n    runs-on: ubuntu-latest\n    needs: [test]\n    if: github.ref == 'refs/heads/main'\n    environment: staging\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install Ansible\n      run: pip install ansible\n\n    - name: Setup SSH key\n      run: |\n        echo \"${{ secrets.SSH_PRIVATE_KEY }}\" &gt; ~/.ssh/id_rsa\n        chmod 600 ~/.ssh/id_rsa\n\n    - name: Deploy to staging\n      run: |\n        ansible-playbook -i inventory/staging playbooks/deploy.yml\n        ansible-playbook -i inventory/staging playbooks/verify.yml\n\n  deploy-production:\n    runs-on: ubuntu-latest\n    needs: [deploy-staging]\n    if: github.ref == 'refs/heads/main'\n    environment: production\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install Ansible\n      run: pip install ansible\n\n    - name: Setup SSH key\n      run: |\n        echo \"${{ secrets.SSH_PRIVATE_KEY }}\" &gt; ~/.ssh/id_rsa\n        chmod 600 ~/.ssh/id_rsa\n\n    - name: Deploy to production\n      run: |\n        ansible-playbook -i inventory/production playbooks/deploy.yml\n        ansible-playbook -i inventory/production playbooks/verify.yml\n\n  monitor:\n    runs-on: ubuntu-latest\n    needs: [deploy-production]\n    if: github.ref == 'refs/heads/main'\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install monitoring tools\n      run: |\n        pip install requests prometheus_client\n\n    - name: Monitor deployment\n      run: |\n        python scripts/monitor_deployment.py\n        python scripts/health_check.py\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#jenkins-pipeline-implementation","title":"Jenkins Pipeline Implementation","text":"","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#declarative-pipeline","title":"Declarative Pipeline","text":"<pre><code>// Jenkinsfile\npipeline {\n    agent any\n\n    environment {\n        ANSIBLE_FORCE_COLOR = 'true'\n        ANSIBLE_HOST_KEY_CHECKING = 'false'\n        PYTHON_VERSION = '3.9'\n    }\n\n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n            }\n        }\n\n        stage('Setup Environment') {\n            steps {\n                sh '''\n                    python3 -m venv venv\n                    source venv/bin/activate\n                    pip install ansible yamllint jsonschema bandit safety pytest pytest-ansible\n                '''\n            }\n        }\n\n        stage('Validate') {\n            steps {\n                sh '''\n                    source venv/bin/activate\n                    echo \"Validating YAML syntax...\"\n                    yamllint network_configs/\n                    echo \"Validating JSON schema...\"\n                    python scripts/validate_schema.py\n                    echo \"Checking Ansible syntax...\"\n                    ansible-playbook --check --diff playbooks/validate.yml\n                '''\n            }\n        }\n\n        stage('Security Scan') {\n            steps {\n                sh '''\n                    source venv/bin/activate\n                    echo \"Running security scan...\"\n                    bandit -r . -f json -o bandit-report.json || true\n                    safety check --json --output safety-report.json || true\n                '''\n            }\n            post {\n                always {\n                    archiveArtifacts artifacts: '*-report.json', allowEmptyArchive: true\n                }\n            }\n        }\n\n        stage('Unit Tests') {\n            steps {\n                sh '''\n                    source venv/bin/activate\n                    pytest tests/unit/ -v --junitxml=unit-test-results.xml\n                '''\n            }\n            post {\n                always {\n                    publishTestResults testResultsPattern: 'unit-test-results.xml'\n                }\n            }\n        }\n\n        stage('Integration Tests') {\n            when {\n                branch 'main'\n            }\n            steps {\n                withCredentials([sshUserPrivateKey(credentialsId: 'network-ssh-key', keyFileVariable: 'SSH_KEY')]) {\n                    sh '''\n                        source venv/bin/activate\n                        cp $SSH_KEY ~/.ssh/id_rsa\n                        chmod 600 ~/.ssh/id_rsa\n                        ansible-playbook -i inventory/test playbooks/test_integration.yml\n                    '''\n                }\n            }\n        }\n\n        stage('Deploy to Staging') {\n            when {\n                branch 'main'\n            }\n            steps {\n                withCredentials([sshUserPrivateKey(credentialsId: 'network-ssh-key', keyFileVariable: 'SSH_KEY')]) {\n                    sh '''\n                        source venv/bin/activate\n                        cp $SSH_KEY ~/.ssh/id_rsa\n                        chmod 600 ~/.ssh/id_rsa\n                        ansible-playbook -i inventory/staging playbooks/deploy.yml\n                        ansible-playbook -i inventory/staging playbooks/verify.yml\n                    '''\n                }\n            }\n        }\n\n        stage('Deploy to Production') {\n            when {\n                branch 'main'\n            }\n            input {\n                message \"Deploy to production?\"\n                ok \"Deploy\"\n            }\n            steps {\n                withCredentials([sshUserPrivateKey(credentialsId: 'network-ssh-key', keyFileVariable: 'SSH_KEY')]) {\n                    sh '''\n                        source venv/bin/activate\n                        cp $SSH_KEY ~/.ssh/id_rsa\n                        chmod 600 ~/.ssh/id_rsa\n                        ansible-playbook -i inventory/production playbooks/deploy.yml\n                        ansible-playbook -i inventory/production playbooks/verify.yml\n                    '''\n                }\n            }\n        }\n\n        stage('Monitor') {\n            when {\n                branch 'main'\n            }\n            steps {\n                sh '''\n                    source venv/bin/activate\n                    pip install requests prometheus_client\n                    python scripts/monitor_deployment.py\n                    python scripts/health_check.py\n                '''\n            }\n        }\n    }\n\n    post {\n        always {\n            cleanWs()\n        }\n        success {\n            echo 'Pipeline completed successfully!'\n        }\n        failure {\n            echo 'Pipeline failed!'\n        }\n    }\n}\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#supporting-scripts-and-tools","title":"Supporting Scripts and Tools","text":"","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#configuration-validation-script","title":"Configuration Validation Script","text":"<pre><code># scripts/validate_schema.py\nimport json\nimport jsonschema\nimport sys\nfrom pathlib import Path\n\ndef validate_network_config(config_file: Path, schema_file: Path) -&gt; bool:\n    \"\"\"Validate network configuration against JSON schema\"\"\"\n    try:\n        with open(config_file, 'r') as f:\n            config = json.load(f)\n\n        with open(schema_file, 'r') as f:\n            schema = json.load(f)\n\n        jsonschema.validate(instance=config, schema=schema)\n        print(f\"\u2713 {config_file} is valid\")\n        return True\n\n    except jsonschema.ValidationError as e:\n        print(f\"\u2717 {config_file} validation failed: {e}\")\n        return False\n    except Exception as e:\n        print(f\"\u2717 Error validating {config_file}: {e}\")\n        return False\n\ndef main():\n    config_dir = Path(\"network_configs\")\n    schema_file = Path(\"schemas/network_config.schema.json\")\n\n    if not config_dir.exists():\n        print(\"Network configs directory not found\")\n        sys.exit(1)\n\n    if not schema_file.exists():\n        print(\"Schema file not found\")\n        sys.exit(1)\n\n    config_files = list(config_dir.glob(\"*.json\"))\n    if not config_files:\n        print(\"No JSON config files found\")\n        sys.exit(0)\n\n    valid_count = 0\n    total_count = len(config_files)\n\n    for config_file in config_files:\n        if validate_network_config(config_file, schema_file):\n            valid_count += 1\n\n    print(f\"\\nValidation complete: {valid_count}/{total_count} files valid\")\n\n    if valid_count != total_count:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#deployment-monitoring-script","title":"Deployment Monitoring Script","text":"<pre><code># scripts/monitor_deployment.py\nimport requests\nimport time\nimport json\nfrom typing import Dict, List\nfrom prometheus_client import Gauge, push_to_gateway\n\nclass DeploymentMonitor:\n    def __init__(self, prometheus_url: str = \"http://localhost:9090\"):\n        self.prometheus_url = prometheus_url\n        self.deployment_status = Gauge('deployment_status', 'Deployment status', ['environment'])\n        self.deployment_duration = Gauge('deployment_duration_seconds', 'Deployment duration')\n\n    def check_service_health(self, service_url: str) -&gt; Dict:\n        \"\"\"Check service health endpoint\"\"\"\n        try:\n            response = requests.get(f\"{service_url}/health\", timeout=10)\n            return {\n                'status': 'healthy' if response.status_code == 200 else 'unhealthy',\n                'response_time': response.elapsed.total_seconds(),\n                'status_code': response.status_code\n            }\n        except Exception as e:\n            return {\n                'status': 'error',\n                'error': str(e),\n                'response_time': None,\n                'status_code': None\n            }\n\n    def check_network_connectivity(self, targets: List[str]) -&gt; Dict:\n        \"\"\"Check network connectivity to targets\"\"\"\n        results = {}\n        for target in targets:\n            try:\n                response = requests.get(f\"http://{target}/ping\", timeout=5)\n                results[target] = {\n                    'reachable': response.status_code == 200,\n                    'response_time': response.elapsed.total_seconds()\n                }\n            except Exception as e:\n                results[target] = {\n                    'reachable': False,\n                    'error': str(e)\n                }\n        return results\n\n    def monitor_deployment(self, environment: str, services: List[str], targets: List[str]):\n        \"\"\"Monitor deployment progress\"\"\"\n        print(f\"Monitoring deployment to {environment}...\")\n\n        start_time = time.time()\n        max_wait_time = 300  # 5 minutes\n        check_interval = 30  # 30 seconds\n\n        while time.time() - start_time &lt; max_wait_time:\n            # Check service health\n            service_status = {}\n            for service in services:\n                service_status[service] = self.check_service_health(service)\n\n            # Check network connectivity\n            network_status = self.check_network_connectivity(targets)\n\n            # Calculate overall status\n            healthy_services = sum(1 for s in service_status.values() if s['status'] == 'healthy')\n            reachable_targets = sum(1 for t in network_status.values() if t['reachable'])\n\n            overall_status = 1.0 if (healthy_services == len(services) and \n                                   reachable_targets == len(targets)) else 0.0\n\n            # Update Prometheus metrics\n            self.deployment_status.labels(environment=environment).set(overall_status)\n            self.deployment_duration.set(time.time() - start_time)\n\n            print(f\"Status: {overall_status:.2f} \"\n                  f\"({healthy_services}/{len(services)} services, \"\n                  f\"{reachable_targets}/{len(targets)} targets)\")\n\n            if overall_status == 1.0:\n                print(f\"\u2713 Deployment to {environment} successful!\")\n                return True\n\n            time.sleep(check_interval)\n\n        print(f\"\u2717 Deployment to {environment} failed - timeout reached\")\n        return False\n\ndef main():\n    monitor = DeploymentMonitor()\n\n    # Configuration\n    environment = \"production\"\n    services = [\n        \"https://api.example.com\",\n        \"https://web.example.com\",\n        \"https://db.example.com\"\n    ]\n    targets = [\n        \"router1.example.com\",\n        \"switch1.example.com\",\n        \"firewall1.example.com\"\n    ]\n\n    success = monitor.monitor_deployment(environment, services, targets)\n\n    if not success:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#rollback-script","title":"Rollback Script","text":"<pre><code># scripts/rollback.py\nimport subprocess\nimport sys\nimport json\nfrom pathlib import Path\nfrom typing import Dict, List\n\nclass NetworkRollback:\n    def __init__(self, inventory_path: str, backup_dir: str = \"backups\"):\n        self.inventory_path = inventory_path\n        self.backup_dir = Path(backup_dir)\n\n    def get_available_backups(self) -&gt; List[Dict]:\n        \"\"\"Get list of available backups\"\"\"\n        backups = []\n        if self.backup_dir.exists():\n            for backup_file in self.backup_dir.glob(\"*.json\"):\n                try:\n                    with open(backup_file, 'r') as f:\n                        backup_data = json.load(f)\n                    backups.append({\n                        'file': backup_file,\n                        'timestamp': backup_data.get('timestamp'),\n                        'description': backup_data.get('description'),\n                        'environment': backup_data.get('environment')\n                    })\n                except Exception as e:\n                    print(f\"Error reading backup {backup_file}: {e}\")\n\n        return sorted(backups, key=lambda x: x['timestamp'], reverse=True)\n\n    def execute_rollback(self, backup_file: Path) -&gt; bool:\n        \"\"\"Execute rollback using backup configuration\"\"\"\n        try:\n            # Run Ansible rollback playbook\n            cmd = [\n                'ansible-playbook',\n                '-i', self.inventory_path,\n                'playbooks/rollback.yml',\n                '-e', f'backup_file={backup_file}'\n            ]\n\n            result = subprocess.run(cmd, capture_output=True, text=True)\n\n            if result.returncode == 0:\n                print(f\"\u2713 Rollback completed successfully using {backup_file}\")\n                return True\n            else:\n                print(f\"\u2717 Rollback failed: {result.stderr}\")\n                return False\n\n        except Exception as e:\n            print(f\"\u2717 Error during rollback: {e}\")\n            return False\n\n    def verify_rollback(self) -&gt; bool:\n        \"\"\"Verify rollback was successful\"\"\"\n        try:\n            cmd = [\n                'ansible-playbook',\n                '-i', self.inventory_path,\n                'playbooks/verify.yml'\n            ]\n\n            result = subprocess.run(cmd, capture_output=True, text=True)\n            return result.returncode == 0\n\n        except Exception as e:\n            print(f\"\u2717 Error verifying rollback: {e}\")\n            return False\n\ndef main():\n    if len(sys.argv) &lt; 2:\n        print(\"Usage: python rollback.py &lt;inventory_path&gt; [backup_file]\")\n        sys.exit(1)\n\n    inventory_path = sys.argv[1]\n    backup_file = sys.argv[2] if len(sys.argv) &gt; 2 else None\n\n    rollback = NetworkRollback(inventory_path)\n\n    if backup_file:\n        # Use specified backup file\n        backup_path = Path(backup_file)\n        if not backup_path.exists():\n            print(f\"Backup file {backup_file} not found\")\n            sys.exit(1)\n    else:\n        # List available backups and let user choose\n        backups = rollback.get_available_backups()\n\n        if not backups:\n            print(\"No backup files found\")\n            sys.exit(1)\n\n        print(\"Available backups:\")\n        for i, backup in enumerate(backups):\n            print(f\"{i+1}. {backup['timestamp']} - {backup['description']}\")\n\n        try:\n            choice = int(input(\"Select backup to rollback to: \")) - 1\n            if 0 &lt;= choice &lt; len(backups):\n                backup_path = backups[choice]['file']\n            else:\n                print(\"Invalid choice\")\n                sys.exit(1)\n        except (ValueError, KeyboardInterrupt):\n            print(\"Rollback cancelled\")\n            sys.exit(1)\n\n    # Execute rollback\n    if rollback.execute_rollback(backup_path):\n        if rollback.verify_rollback():\n            print(\"\u2713 Rollback verification successful\")\n        else:\n            print(\"\u2717 Rollback verification failed\")\n            sys.exit(1)\n    else:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#best-practices","title":"Best Practices","text":"","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#1-environment-separation","title":"1. Environment Separation","text":"<pre><code># environments.yml\nenvironments:\n  development:\n    inventory: inventory/dev\n    vars_file: group_vars/dev.yml\n    vault_file: vault/dev.yml\n\n  staging:\n    inventory: inventory/staging\n    vars_file: group_vars/staging.yml\n    vault_file: vault/staging.yml\n\n  production:\n    inventory: inventory/production\n    vars_file: group_vars/production.yml\n    vault_file: vault/production.yml\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#2-configuration-management","title":"2. Configuration Management","text":"<pre><code># config_management.yml\nconfig_structure:\n  network_configs:\n    - routers/\n    - switches/\n    - firewalls/\n    - load_balancers/\n\n  templates:\n    - jinja2_templates/\n    - terraform_templates/\n\n  scripts:\n    - validation/\n    - deployment/\n    - monitoring/\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#3-security-considerations","title":"3. Security Considerations","text":"<pre><code># security.yml\nsecurity_measures:\n  - encrypted_credentials: true\n  - access_control: true\n  - audit_logging: true\n  - change_approval: true\n\n  secrets_management:\n    - vault: true\n    - environment_variables: true\n    - encrypted_files: true\n</code></pre>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#conclusion","title":"Conclusion","text":"<p>CI/CD pipelines for network automation provide a robust foundation for reliable, auditable, and efficient network deployments. By implementing the patterns and best practices outlined in this guide, organizations can achieve:</p> <ul> <li>Consistent Deployments: Automated, repeatable processes</li> <li>Reduced Risk: Comprehensive testing and validation</li> <li>Faster Recovery: Automated rollback capabilities</li> <li>Better Compliance: Complete audit trails</li> <li>Improved Collaboration: Clear approval workflows</li> </ul> <p>Key takeaways: - Start with basic validation and testing - Implement security scanning and compliance checks - Use environment-specific configurations - Monitor deployments and implement rollback procedures - Document and version all network configurations</p>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/cicd-pipelines-for-network-automation-building-reliable-deployment-workflows/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitLab CI/CD Documentation</li> <li>GitHub Actions Documentation</li> <li>Jenkins Pipeline Documentation</li> <li>Ansible Best Practices</li> </ul> <p>This guide provides a comprehensive overview of CI/CD pipelines for network automation. For more advanced topics, check out our other articles on specific automation scenarios and best practices. </p>","tags":["ci-cd","network automation","netdevops","jenkins","gitlab","github-actions","automation"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/","title":"Nautobot: The Ultimate Network Automation Platform for NetDevOps","text":"<p>Nautobot has emerged as a leading network automation platform, providing a comprehensive solution for network source of truth, automation workflows, and integration capabilities. This guide explores how Nautobot serves as the foundation for modern NetDevOps environments.</p>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#what-is-nautobot","title":"What is Nautobot?","text":"<p>Nautobot is an open-source network automation platform that provides:</p> <ul> <li>Network Source of Truth (SSoT): Centralized repository for network data</li> <li>Network Automation: Built-in automation capabilities and workflows</li> <li>API-First Design: RESTful API for seamless integration</li> <li>Extensible Architecture: Plugin system for custom functionality</li> <li>Web Interface: Intuitive web UI for network management</li> <li>Git Integration: Version control for network configurations</li> </ul>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#core-features-and-capabilities","title":"Core Features and Capabilities","text":"","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#1-network-source-of-truth","title":"1. Network Source of Truth","text":"<p>Nautobot serves as a centralized repository for all network-related data:</p> <pre><code># Example: Network device data model\nfrom nautobot.dcim.models import Device, Site, Rack\nfrom nautobot.ipam.models import IPAddress, Prefix, VLAN\n\n# Device management\ndevice = Device.objects.create(\n    name=\"router-core-01\",\n    device_type=device_type,\n    site=site,\n    status=status_active,\n    primary_ip4=primary_ip,\n    platform=platform_ios\n)\n\n# IP address management\nip_address = IPAddress.objects.create(\n    address=\"192.168.1.1/24\",\n    status=status_active,\n    assigned_object=device\n)\n\n# VLAN management\nvlan = VLAN.objects.create(\n    vid=100,\n    name=\"DATA\",\n    site=site,\n    status=status_active\n)\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#2-restful-api","title":"2. RESTful API","text":"<p>Nautobot provides a comprehensive REST API for programmatic access:</p> <pre><code># API client example\nimport requests\nimport json\n\nclass NautobotAPI:\n    def __init__(self, base_url, token):\n        self.base_url = base_url\n        self.headers = {\n            'Authorization': f'Token {token}',\n            'Content-Type': 'application/json'\n        }\n\n    def get_devices(self):\n        \"\"\"Get all devices\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/api/dcim/devices/\",\n            headers=self.headers\n        )\n        return response.json()\n\n    def create_device(self, device_data):\n        \"\"\"Create a new device\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/api/dcim/devices/\",\n            headers=self.headers,\n            json=device_data\n        )\n        return response.json()\n\n    def update_device(self, device_id, device_data):\n        \"\"\"Update an existing device\"\"\"\n        response = requests.patch(\n            f\"{self.base_url}/api/dcim/devices/{device_id}/\",\n            headers=self.headers,\n            json=device_data\n        )\n        return response.json()\n\n    def delete_device(self, device_id):\n        \"\"\"Delete a device\"\"\"\n        response = requests.delete(\n            f\"{self.base_url}/api/dcim/devices/{device_id}/\",\n            headers=self.headers\n        )\n        return response.status_code == 204\n\n# Usage example\napi = NautobotAPI(\"https://nautobot.example.com\", \"your-token\")\n\n# Get all devices\ndevices = api.get_devices()\nprint(f\"Found {len(devices['results'])} devices\")\n\n# Create a new device\nnew_device = {\n    \"name\": \"switch-access-01\",\n    \"device_type\": 1,\n    \"site\": 1,\n    \"status\": \"active\",\n    \"platform\": 1\n}\nresult = api.create_device(new_device)\nprint(f\"Created device: {result['name']}\")\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#3-custom-jobs-and-automation","title":"3. Custom Jobs and Automation","text":"<p>Nautobot supports custom jobs for automation workflows:</p> <pre><code># Custom job example\nfrom nautobot.core.jobs import Job, StringVar, ObjectVar\nfrom nautobot.dcim.models import Device\nfrom nautobot.ipam.models import IPAddress\n\nclass DeviceConfigurationJob(Job):\n    \"\"\"Job to configure network devices\"\"\"\n\n    class Meta:\n        name = \"Device Configuration\"\n        description = \"Configure network devices with specified settings\"\n\n    # Job variables\n    device = ObjectVar(\n        model=Device,\n        description=\"Device to configure\"\n    )\n    configuration_type = StringVar(\n        description=\"Type of configuration to apply\",\n        choices=[\n            (\"vlan\", \"VLAN Configuration\"),\n            (\"routing\", \"Routing Configuration\"),\n            (\"security\", \"Security Configuration\")\n        ]\n    )\n\n    def run(self, data, commit):\n        device = data['device']\n        config_type = data['configuration_type']\n\n        self.log_info(f\"Starting configuration for {device.name}\")\n\n        try:\n            if config_type == \"vlan\":\n                self.configure_vlans(device)\n            elif config_type == \"routing\":\n                self.configure_routing(device)\n            elif config_type == \"security\":\n                self.configure_security(device)\n\n            self.log_success(f\"Configuration completed for {device.name}\")\n\n        except Exception as e:\n            self.log_error(f\"Configuration failed for {device.name}: {str(e)}\")\n            raise\n\n    def configure_vlans(self, device):\n        \"\"\"Configure VLANs on device\"\"\"\n        vlans = device.site.vlans.filter(status='active')\n\n        for vlan in vlans:\n            self.log_info(f\"Configuring VLAN {vlan.vid} - {vlan.name}\")\n            # Implementation would generate and apply VLAN configuration\n\n    def configure_routing(self, device):\n        \"\"\"Configure routing on device\"\"\"\n        self.log_info(\"Configuring routing protocols\")\n        # Implementation would configure routing protocols\n\n    def configure_security(self, device):\n        \"\"\"Configure security on device\"\"\"\n        self.log_info(\"Configuring security settings\")\n        # Implementation would configure security policies\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#integration-with-network-automation-tools","title":"Integration with Network Automation Tools","text":"","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#ansible-integration","title":"Ansible Integration","text":"<pre><code># Ansible inventory plugin for Nautobot\n# inventory/nautobot.yml\nplugin: nautobot\napi_token: \"{{ lookup('env', 'NAUTOBOT_TOKEN') }}\"\nurl: \"{{ lookup('env', 'NAUTOBOT_URL') }}\"\nquery_filters:\n  - status: active\ngroup_by:\n  - site\n  - rack\n  - device_type\n</code></pre> <pre><code># Ansible playbook using Nautobot data\n---\n- name: Configure Network Devices from Nautobot\n  hosts: all\n  gather_facts: no\n\n  vars:\n    nautobot_url: \"https://nautobot.example.com\"\n    nautobot_token: \"{{ vault_nautobot_token }}\"\n\n  tasks:\n    - name: Get device information from Nautobot\n      uri:\n        url: \"{{ nautobot_url }}/api/dcim/devices/?name={{ inventory_hostname }}\"\n        method: GET\n        headers:\n          Authorization: \"Token {{ nautobot_token }}\"\n          Content-Type: \"application/json\"\n      register: device_info\n      delegate_to: localhost\n\n    - name: Set device facts\n      set_fact:\n        device_data: \"{{ device_info.json.results[0] }}\"\n        primary_ip: \"{{ device_data.primary_ip4.address | default('') }}\"\n        site_name: \"{{ device_data.site.name }}\"\n        device_type: \"{{ device_data.device_type.model }}\"\n\n    - name: Configure device based on Nautobot data\n      cisco.ios.config:\n        lines: \"{{ item }}\"\n        parents: \"{{ item.parents | default([]) }}\"\n      loop: \"{{ lookup('template', 'configs/' + device_type + '.j2') | from_yaml }}\"\n      when: device_data.status == 'active'\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#terraform-integration","title":"Terraform Integration","text":"<pre><code># Terraform provider for Nautobot\nterraform {\n  required_providers {\n    nautobot = {\n      source = \"nautobot/nautobot\"\n      version = \"~&gt; 1.0\"\n    }\n  }\n}\n\nprovider \"nautobot\" {\n  url   = \"https://nautobot.example.com\"\n  token = var.nautobot_token\n}\n\n# Create a site\nresource \"nautobot_site\" \"main\" {\n  name = \"Main Data Center\"\n  slug = \"main-dc\"\n  status = \"active\"\n}\n\n# Create a device\nresource \"nautobot_device\" \"router\" {\n  name = \"router-core-01\"\n  device_type_id = data.nautobot_device_type.router.id\n  site_id = nautobot_site.main.id\n  status = \"active\"\n  platform_id = data.nautobot_platform.ios.id\n}\n\n# Create IP addresses\nresource \"nautobot_ip_address\" \"primary\" {\n  address = \"192.168.1.1/24\"\n  status = \"active\"\n  assigned_object_type = \"dcim.device\"\n  assigned_object_id = nautobot_device.router.id\n}\n\n# Data sources\ndata \"nautobot_device_type\" \"router\" {\n  model = \"ISR4321\"\n}\n\ndata \"nautobot_platform\" \"ios\" {\n  name = \"Cisco IOS\"\n}\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#advanced-automation-workflows","title":"Advanced Automation Workflows","text":"","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#network-provisioning-workflow","title":"Network Provisioning Workflow","text":"<pre><code># Network provisioning workflow\nfrom nautobot.core.jobs import Job, ObjectVar, StringVar\nfrom nautobot.dcim.models import Device, Site, Rack\nfrom nautobot.ipam.models import IPAddress, Prefix, VLAN\n\nclass NetworkProvisioningJob(Job):\n    \"\"\"Automated network provisioning workflow\"\"\"\n\n    class Meta:\n        name = \"Network Provisioning\"\n        description = \"Provision new network infrastructure\"\n\n    site = ObjectVar(\n        model=Site,\n        description=\"Site for new infrastructure\"\n    )\n    device_type = StringVar(\n        description=\"Type of device to provision\",\n        choices=[\n            (\"router\", \"Router\"),\n            (\"switch\", \"Switch\"),\n            (\"firewall\", \"Firewall\")\n        ]\n    )\n    quantity = StringVar(\n        description=\"Number of devices to provision\",\n        default=\"1\"\n    )\n\n    def run(self, data, commit):\n        site = data['site']\n        device_type = data['device_type']\n        quantity = int(data['quantity'])\n\n        self.log_info(f\"Starting provisioning of {quantity} {device_type}(s) at {site.name}\")\n\n        try:\n            # Allocate IP addresses\n            ip_addresses = self.allocate_ip_addresses(site, quantity)\n\n            # Create devices\n            devices = self.create_devices(site, device_type, quantity, ip_addresses)\n\n            # Configure devices\n            self.configure_devices(devices)\n\n            # Update documentation\n            self.update_documentation(devices)\n\n            self.log_success(f\"Successfully provisioned {quantity} {device_type}(s)\")\n\n        except Exception as e:\n            self.log_error(f\"Provisioning failed: {str(e)}\")\n            raise\n\n    def allocate_ip_addresses(self, site, quantity):\n        \"\"\"Allocate IP addresses for new devices\"\"\"\n        ip_addresses = []\n\n        # Find available prefix\n        prefix = Prefix.objects.filter(\n            site=site,\n            status='active',\n            prefix='192.168.1.0/24'\n        ).first()\n\n        if not prefix:\n            raise Exception(\"No available prefix found\")\n\n        # Find available IP addresses\n        used_ips = set(IPAddress.objects.filter(\n            address__net_contained_or_equal=prefix.prefix\n        ).values_list('address', flat=True))\n\n        for i in range(quantity):\n            for j in range(2, 255):\n                candidate_ip = f\"192.168.1.{j}/24\"\n                if candidate_ip not in used_ips:\n                    ip_address = IPAddress.objects.create(\n                        address=candidate_ip,\n                        status='reserved'\n                    )\n                    ip_addresses.append(ip_address)\n                    break\n\n        return ip_addresses\n\n    def create_devices(self, site, device_type, quantity, ip_addresses):\n        \"\"\"Create device records\"\"\"\n        devices = []\n\n        for i in range(quantity):\n            device_name = f\"{device_type}-{site.slug}-{i+1:02d}\"\n\n            device = Device.objects.create(\n                name=device_name,\n                site=site,\n                device_type_id=self.get_device_type_id(device_type),\n                status='planned',\n                primary_ip4=ip_addresses[i] if i &lt; len(ip_addresses) else None\n            )\n\n            devices.append(device)\n            self.log_info(f\"Created device: {device_name}\")\n\n        return devices\n\n    def configure_devices(self, devices):\n        \"\"\"Configure devices via automation\"\"\"\n        for device in devices:\n            self.log_info(f\"Configuring {device.name}\")\n            # Implementation would trigger Ansible playbook or other automation\n\n    def update_documentation(self, devices):\n        \"\"\"Update network documentation\"\"\"\n        self.log_info(\"Updating network documentation\")\n        # Implementation would update documentation systems\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#network-monitoring-integration","title":"Network Monitoring Integration","text":"<pre><code># Network monitoring integration\nfrom nautobot.core.jobs import Job\nfrom nautobot.dcim.models import Device\nimport requests\nimport json\n\nclass NetworkMonitoringJob(Job):\n    \"\"\"Network monitoring and health check job\"\"\"\n\n    class Meta:\n        name = \"Network Monitoring\"\n        description = \"Monitor network device health and status\"\n\n    def run(self, data, commit):\n        self.log_info(\"Starting network monitoring\")\n\n        # Get all active devices\n        devices = Device.objects.filter(status='active')\n\n        for device in devices:\n            try:\n                health_status = self.check_device_health(device)\n                self.update_device_status(device, health_status)\n\n            except Exception as e:\n                self.log_error(f\"Error monitoring {device.name}: {str(e)}\")\n\n    def check_device_health(self, device):\n        \"\"\"Check device health via SNMP or API\"\"\"\n        if not device.primary_ip4:\n            return {'status': 'unknown', 'error': 'No primary IP'}\n\n        ip_address = str(device.primary_ip4.address.ip)\n\n        try:\n            # Check device reachability\n            response = requests.get(\n                f\"http://{ip_address}/health\",\n                timeout=5\n            )\n\n            if response.status_code == 200:\n                return {'status': 'healthy', 'response_time': response.elapsed.total_seconds()}\n            else:\n                return {'status': 'unhealthy', 'error': f\"HTTP {response.status_code}\"}\n\n        except requests.exceptions.RequestException as e:\n            return {'status': 'unreachable', 'error': str(e)}\n\n    def update_device_status(self, device, health_status):\n        \"\"\"Update device status in Nautobot\"\"\"\n        if health_status['status'] == 'healthy':\n            self.log_info(f\"{device.name}: Healthy\")\n        elif health_status['status'] == 'unhealthy':\n            self.log_warning(f\"{device.name}: Unhealthy - {health_status.get('error', 'Unknown error')}\")\n        else:\n            self.log_error(f\"{device.name}: Unreachable - {health_status.get('error', 'Unknown error')}\")\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#custom-plugins-and-extensions","title":"Custom Plugins and Extensions","text":"","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#custom-device-type-plugin","title":"Custom Device Type Plugin","text":"<pre><code># Custom device type plugin\nfrom nautobot.core.api import ValidatedModelSerializer\nfrom nautobot.core.models import BaseModel\nfrom django.db import models\n\nclass CustomDeviceType(BaseModel):\n    \"\"\"Custom device type with additional fields\"\"\"\n\n    name = models.CharField(max_length=100)\n    manufacturer = models.CharField(max_length=100)\n    model = models.CharField(max_length=100)\n    power_consumption = models.IntegerField(help_text=\"Power consumption in watts\")\n    rack_units = models.IntegerField(help_text=\"Rack units required\")\n\n    class Meta:\n        ordering = ['manufacturer', 'model']\n\nclass CustomDeviceTypeSerializer(ValidatedModelSerializer):\n    \"\"\"API serializer for custom device type\"\"\"\n\n    class Meta:\n        model = CustomDeviceType\n        fields = [\n            'id', 'name', 'manufacturer', 'model',\n            'power_consumption', 'rack_units', 'created', 'last_updated'\n        ]\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#custom-automation-plugin","title":"Custom Automation Plugin","text":"<pre><code># Custom automation plugin\nfrom nautobot.core.jobs import Job, ObjectVar\nfrom nautobot.dcim.models import Device\n\nclass CustomAutomationJob(Job):\n    \"\"\"Custom automation job\"\"\"\n\n    class Meta:\n        name = \"Custom Automation\"\n        description = \"Custom network automation workflow\"\n\n    device = ObjectVar(\n        model=Device,\n        description=\"Device to automate\"\n    )\n\n    def run(self, data, commit):\n        device = data['device']\n\n        self.log_info(f\"Running custom automation on {device.name}\")\n\n        # Custom automation logic here\n        result = self.execute_custom_automation(device)\n\n        if result['success']:\n            self.log_success(f\"Custom automation completed for {device.name}\")\n        else:\n            self.log_error(f\"Custom automation failed for {device.name}: {result['error']}\")\n\n    def execute_custom_automation(self, device):\n        \"\"\"Execute custom automation logic\"\"\"\n        # Implementation would contain custom automation logic\n        return {'success': True, 'message': 'Automation completed'}\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#best-practices-for-nautobot-implementation","title":"Best Practices for Nautobot Implementation","text":"","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#1-data-modeling","title":"1. Data Modeling","text":"<pre><code># Best practices for data modeling\nfrom nautobot.dcim.models import Device, Site, Rack\nfrom nautobot.ipam.models import IPAddress, Prefix, VLAN\n\nclass NetworkDataManager:\n    \"\"\"Network data management best practices\"\"\"\n\n    @staticmethod\n    def create_device_with_validation(name, site, device_type):\n        \"\"\"Create device with proper validation\"\"\"\n        # Check for duplicate names\n        if Device.objects.filter(name=name).exists():\n            raise ValueError(f\"Device {name} already exists\")\n\n        # Validate site exists\n        if not Site.objects.filter(id=site.id).exists():\n            raise ValueError(\"Invalid site\")\n\n        # Create device\n        device = Device.objects.create(\n            name=name,\n            site=site,\n            device_type=device_type,\n            status='active'\n        )\n\n        return device\n\n    @staticmethod\n    def allocate_ip_address(device, prefix):\n        \"\"\"Allocate IP address for device\"\"\"\n        # Find available IP in prefix\n        used_ips = set(IPAddress.objects.filter(\n            address__net_contained_or_equal=prefix\n        ).values_list('address', flat=True))\n\n        for i in range(2, 255):\n            candidate_ip = f\"{prefix.network_address + i}/24\"\n            if candidate_ip not in used_ips:\n                ip_address = IPAddress.objects.create(\n                    address=candidate_ip,\n                    status='active',\n                    assigned_object=device\n                )\n                return ip_address\n\n        raise ValueError(\"No available IP addresses in prefix\")\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#2-api-usage","title":"2. API Usage","text":"<pre><code># Best practices for API usage\nimport requests\nfrom typing import Dict, List, Optional\n\nclass NautobotAPIClient:\n    \"\"\"Nautobot API client with best practices\"\"\"\n\n    def __init__(self, base_url: str, token: str):\n        self.base_url = base_url.rstrip('/')\n        self.session = requests.Session()\n        self.session.headers.update({\n            'Authorization': f'Token {token}',\n            'Content-Type': 'application/json'\n        })\n\n    def get_devices(self, filters: Optional[Dict] = None) -&gt; List[Dict]:\n        \"\"\"Get devices with pagination support\"\"\"\n        url = f\"{self.base_url}/api/dcim/devices/\"\n        params = filters or {}\n\n        all_results = []\n\n        while url:\n            response = self.session.get(url, params=params)\n            response.raise_for_status()\n\n            data = response.json()\n            all_results.extend(data['results'])\n\n            url = data.get('next')\n            params = {}  # Clear params for subsequent requests\n\n        return all_results\n\n    def create_device(self, device_data: Dict) -&gt; Dict:\n        \"\"\"Create device with validation\"\"\"\n        # Validate required fields\n        required_fields = ['name', 'device_type', 'site']\n        for field in required_fields:\n            if field not in device_data:\n                raise ValueError(f\"Missing required field: {field}\")\n\n        response = self.session.post(\n            f\"{self.base_url}/api/dcim/devices/\",\n            json=device_data\n        )\n        response.raise_for_status()\n\n        return response.json()\n\n    def update_device(self, device_id: int, device_data: Dict) -&gt; Dict:\n        \"\"\"Update device with validation\"\"\"\n        response = self.session.patch(\n            f\"{self.base_url}/api/dcim/devices/{device_id}/\",\n            json=device_data\n        )\n        response.raise_for_status()\n\n        return response.json()\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#3-job-development","title":"3. Job Development","text":"<pre><code># Best practices for job development\nfrom nautobot.core.jobs import Job, ObjectVar, StringVar\nfrom nautobot.dcim.models import Device\nimport logging\n\nclass BestPracticeJob(Job):\n    \"\"\"Job with best practices implementation\"\"\"\n\n    class Meta:\n        name = \"Best Practice Job\"\n        description = \"Example job with best practices\"\n\n    device = ObjectVar(\n        model=Device,\n        description=\"Target device\"\n    )\n    action = StringVar(\n        description=\"Action to perform\",\n        choices=[\n            (\"backup\", \"Backup Configuration\"),\n            (\"deploy\", \"Deploy Configuration\"),\n            (\"verify\", \"Verify Configuration\")\n        ]\n    )\n\n    def run(self, data, commit):\n        device = data['device']\n        action = data['action']\n\n        # Set up logging\n        logger = logging.getLogger(__name__)\n\n        try:\n            self.log_info(f\"Starting {action} for {device.name}\")\n\n            # Execute action\n            if action == \"backup\":\n                result = self.backup_configuration(device)\n            elif action == \"deploy\":\n                result = self.deploy_configuration(device)\n            elif action == \"verify\":\n                result = self.verify_configuration(device)\n\n            # Log results\n            if result['success']:\n                self.log_success(f\"{action} completed successfully for {device.name}\")\n                logger.info(f\"Job completed: {action} for {device.name}\")\n            else:\n                self.log_error(f\"{action} failed for {device.name}: {result['error']}\")\n                logger.error(f\"Job failed: {action} for {device.name} - {result['error']}\")\n\n        except Exception as e:\n            error_msg = f\"Unexpected error during {action}: {str(e)}\"\n            self.log_error(error_msg)\n            logger.exception(error_msg)\n            raise\n\n    def backup_configuration(self, device):\n        \"\"\"Backup device configuration\"\"\"\n        # Implementation\n        return {'success': True, 'backup_file': f\"{device.name}_config.txt\"}\n\n    def deploy_configuration(self, device):\n        \"\"\"Deploy configuration to device\"\"\"\n        # Implementation\n        return {'success': True, 'deployed': True}\n\n    def verify_configuration(self, device):\n        \"\"\"Verify device configuration\"\"\"\n        # Implementation\n        return {'success': True, 'verified': True}\n</code></pre>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#conclusion","title":"Conclusion","text":"<p>Nautobot provides a comprehensive platform for network automation in NetDevOps environments. By implementing the patterns and best practices outlined in this guide, organizations can achieve:</p> <ul> <li>Centralized Network Management: Single source of truth for network data</li> <li>Automated Workflows: Streamlined network operations</li> <li>Integration Capabilities: Seamless integration with existing tools</li> <li>Scalability: Support for large-scale network environments</li> <li>Extensibility: Custom plugins and automation capabilities</li> </ul> <p>Key takeaways: - Start with proper data modeling and validation - Implement comprehensive API usage patterns - Develop robust automation jobs and workflows - Follow security and access control best practices - Continuously monitor and optimize performance</p>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/nautobot-the-ultimate-network-automation-platform-for-netdevops/#additional-resources","title":"Additional Resources","text":"<ul> <li>Nautobot Documentation</li> <li>Nautobot API Reference</li> <li>Nautobot Plugin Development</li> <li>Network Automation Best Practices</li> </ul> <p>This guide provides a comprehensive overview of Nautobot as a network automation platform. For more advanced topics, check out our other articles on specific Nautobot features and integration patterns. </p>","tags":["nautobot","network automation","netdevops","source of truth","automation","networking"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/","title":"Automate Code Quality: ansible-lint, yaml-lint, and CI/CD Integration","text":"<p>Code quality is crucial in network automation and DevOps practices. When working with Ansible playbooks and YAML files, automated linting helps catch errors early, enforce best practices, and maintain consistent code standards. In this comprehensive guide, we'll explore how to use <code>ansible-lint</code> and <code>yaml-lint</code>, and integrate them into your CI/CD pipelines for automated code quality checks.</p>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#what-is-linting","title":"What is Linting?","text":"<p>Linting is a static code analysis tool that checks your code for potential errors, style violations, and suspicious constructs. For Ansible and YAML files, linting helps:</p> <ul> <li>Catch syntax errors before deployment</li> <li>Enforce coding standards and best practices</li> <li>Improve code readability and maintainability</li> <li>Prevent common mistakes that could cause runtime issues</li> <li>Ensure consistency across team members</li> </ul>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#ansible-lint-ansible-code-quality-tool","title":"ansible-lint: Ansible Code Quality Tool","text":"<p>ansible-lint is the official linting tool for Ansible playbooks, roles, and collections. It checks your Ansible code against a set of rules and best practices.</p>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#installation","title":"Installation","text":"<pre><code># Install via pip\npip install ansible-lint\n\n# Install via package manager (Ubuntu/Debian)\nsudo apt install ansible-lint\n\n# Install via package manager (macOS)\nbrew install ansible-lint\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#basic-usage","title":"Basic Usage","text":"<pre><code># Lint a single playbook\nansible-lint playbook.yml\n\n# Lint an entire directory\nansible-lint .\n\n# Lint with specific rules\nansible-lint --rules=no-tabs,no-jinja-when playbook.yml\n\n# Generate a report\nansible-lint --format=json playbook.yml &gt; lint-report.json\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#configuration-file-ansible-lint","title":"Configuration File (.ansible-lint)","text":"<p>Create a <code>.ansible-lint</code> file in your project root to customize linting behavior:</p> <pre><code>---\n# Enable/disable specific rules\nenable_list:\n  - no-tabs\n  - no-jinja-when\n  - no-handler\n  - no-changed-when\n  - no-jinja-nesting\n\n# Disable specific rules\ndisable_list:\n  - no-log-password  # If you need to log passwords for debugging\n\n# Customize rule severity\nwarn_list:\n  - no-tabs\n  - no-jinja-when\n\n# Set minimum Ansible version\nmin_ansible_version: \"2.10\"\n\n# Customize output format\nformat: rich  # Options: rich, json, codeclimate, quiet, parseable\n\n# Exclude files/directories\nexclude_paths:\n  - \"tests/\"\n  - \"molecule/\"\n  - \"*.j2\"\n\n# Set custom rules directory\nrulesdir: \"custom_rules/\"\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#common-ansible-lint-rules","title":"Common ansible-lint Rules","text":"<p>Here are some essential rules to enable:</p> <pre><code>enable_list:\n  # Code style\n  - no-tabs                    # No tabs in YAML files\n  - no-jinja-when             # Avoid Jinja2 in when conditions\n  - no-handler                # Avoid handlers when possible\n  - no-changed-when           # Always specify changed_when\n  - no-jinja-nesting          # Avoid nested Jinja2 expressions\n\n  # Security\n  - no-log-password           # Don't log passwords\n  - no-command                # Avoid raw commands\n  - no-shell                  # Avoid shell module\n\n  # Best practices\n  - no-relative-paths         # Use absolute paths\n  - no-risky-file-permissions # Avoid risky file permissions\n  - no-risky-shell-pipe       # Avoid shell pipes\n  - no-unsafe-reads           # Avoid unsafe file reads\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#yaml-lint-yaml-syntax-validation","title":"yaml-lint: YAML Syntax Validation","text":"<p>yaml-lint is a Python-based linter for YAML files that checks syntax, formatting, and style.</p>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#installation_1","title":"Installation","text":"<pre><code># Install via pip\npip install yamllint\n\n# Install via package manager (Ubuntu/Debian)\nsudo apt install yamllint\n\n# Install via package manager (macOS)\nbrew install yamllint\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#basic-usage_1","title":"Basic Usage","text":"<pre><code># Lint a single file\nyamllint playbook.yml\n\n# Lint entire directory\nyamllint .\n\n# Lint with specific configuration\nyamllint -c .yamllint playbook.yml\n\n# Generate detailed output\nyamllint --format=parsable playbook.yml\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#configuration-file-yamllint","title":"Configuration File (.yamllint)","text":"<p>Create a <code>.yamllint</code> file to customize YAML linting rules:</p> <pre><code>---\nextends: default\n\nrules:\n  # Line length\n  line-length:\n    max: 120\n    level: warning\n\n  # Indentation\n  indentation:\n    spaces: 2\n    indent-sequences: true\n\n  # Trailing spaces\n  trailing-spaces: enable\n\n  # Empty lines\n  empty-lines:\n    max: 1\n    max-end: 1\n\n  # Comments\n  comments:\n    min-spaces-from-content: 1\n\n  # Document start\n  document-start: disable\n\n  # Truthy values\n  truthy:\n    check-keys: false\n\n  # Hyphens\n  hyphens:\n    max-spaces-before: 1\n    max-spaces-after: 1\n\n  # Commas\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n\n  # Colons\n  colons:\n    max-spaces-before: 0\n    max-spaces-after: 1\n\n  # Braces\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n\n  # Brackets\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>GitHub Actions provides excellent support for automated linting. Here's a comprehensive workflow:</p>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#complete-github-actions-workflow","title":"Complete GitHub Actions Workflow","text":"<pre><code>name: Code Quality Checks\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.9, 3.10, 3.11]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v5\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Cache pip dependencies\n      uses: actions/cache@v4\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install ansible ansible-lint yamllint\n\n    - name: Run yamllint\n      run: |\n        yamllint -c .yamllint .\n\n    - name: Run ansible-lint\n      run: |\n        ansible-lint --format=rich .\n\n    - name: Upload lint results\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: lint-results-${{ matrix.python-version }}\n        path: |\n          lint-report.json\n          yamllint-report.txt\n        retention-days: 7\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#advanced-github-actions-with-multiple-tools","title":"Advanced GitHub Actions with Multiple Tools","text":"<pre><code>name: Advanced Code Quality\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  yaml-lint:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-python@v5\n      with:\n        python-version: '3.11'\n    - run: pip install yamllint\n    - run: yamllint -c .yamllint .\n\n  ansible-lint:\n    runs-on: ubuntu-latest\n    needs: yaml-lint\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-python@v5\n      with:\n        python-version: '3.11'\n    - run: pip install ansible ansible-lint\n    - run: ansible-lint --format=rich .\n\n  security-scan:\n    runs-on: ubuntu-latest\n    needs: [yaml-lint, ansible-lint]\n    steps:\n    - uses: actions/checkout@v4\n    - name: Run Bandit security scan\n      uses: python-security/bandit@main\n      with:\n        args: -r . -f json -o bandit-report.json\n    - name: Upload security report\n      uses: actions/upload-artifact@v4\n      with:\n        name: security-report\n        path: bandit-report.json\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#gitlab-cicd-integration","title":"GitLab CI/CD Integration","text":"<p>GitLab CI/CD provides robust pipeline capabilities for linting:</p>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#basic-gitlab-ci-pipeline","title":"Basic GitLab CI Pipeline","text":"<pre><code>stages:\n  - lint\n  - test\n  - deploy\n\nvariables:\n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.pip-cache\"\n\ncache:\n  paths:\n    - .pip-cache/\n\nyamllint:\n  stage: lint\n  image: python:3.11-slim\n  before_script:\n    - pip install yamllint\n  script:\n    - yamllint -c .yamllint .\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n\nansible-lint:\n  stage: lint\n  image: python:3.11-slim\n  before_script:\n    - pip install ansible ansible-lint\n  script:\n    - ansible-lint --format=rich .\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n  artifacts:\n    reports:\n      junit: ansible-lint-report.xml\n    expire_in: 1 week\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#advanced-gitlab-ci-with-parallel-jobs","title":"Advanced GitLab CI with Parallel Jobs","text":"<pre><code>stages:\n  - lint\n  - test\n  - security\n  - deploy\n\nvariables:\n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.pip-cache\"\n\ncache:\n  paths:\n    - .pip-cache/\n\n.yamllint_template: &amp;yamllint_template\n  stage: lint\n  image: python:3.11-slim\n  before_script:\n    - pip install yamllint\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n\nyamllint-playbooks:\n  &lt;&lt;: *yamllint_template\n  script:\n    - yamllint -c .yamllint playbooks/\n  artifacts:\n    reports:\n      junit: yamllint-playbooks.xml\n\nyamllint-roles:\n  &lt;&lt;: *yamllint_template\n  script:\n    - yamllint -c .yamllint roles/\n  artifacts:\n    reports:\n      junit: yamllint-roles.xml\n\n.ansible_lint_template: &amp;ansible_lint_template\n  stage: lint\n  image: python:3.11-slim\n  before_script:\n    - pip install ansible ansible-lint\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n\nansible-lint-playbooks:\n  &lt;&lt;: *ansible_lint_template\n  script:\n    - ansible-lint playbooks/\n  artifacts:\n    reports:\n      junit: ansible-lint-playbooks.xml\n\nansible-lint-roles:\n  &lt;&lt;: *ansible_lint_template\n  script:\n    - ansible-lint roles/\n  artifacts:\n    reports:\n      junit: ansible-lint-roles.xml\n\nsecurity-scan:\n  stage: security\n  image: python:3.11-slim\n  before_script:\n    - pip install bandit safety\n  script:\n    - bandit -r . -f json -o bandit-report.json\n    - safety check --json --output safety-report.json\n  artifacts:\n    reports:\n      junit: security-report.xml\n    paths:\n      - bandit-report.json\n      - safety-report.json\n    expire_in: 1 week\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Install pre-commit hooks to catch issues before committing:</p>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#pre-commit-configyaml","title":".pre-commit-config.yaml","text":"<pre><code>repos:\n  - repo: https://github.com/ansible/ansible-lint\n    rev: v6.22.1\n    hooks:\n      - id: ansible-lint\n        args: [--format=rich]\n\n  - repo: https://github.com/adrienverge/yamllint\n    rev: v1.35.1\n    hooks:\n      - id: yamllint\n        args: [-c, .yamllint]\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-added-large-files\n      - id: check-merge-conflict\n      - id: check-case-conflict\n      - id: check-docstring-first\n      - id: check-json\n      - id: check-merge-conflict\n      - id: debug-statements\n      - id: name-tests-test\n      - id: requirements-txt-fixer\n      - id: fix-byte-order-marker\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#installation-and-usage","title":"Installation and Usage","text":"<pre><code># Install pre-commit\npip install pre-commit\n\n# Install the git hook scripts\npre-commit install\n\n# Run against all files\npre-commit run --all-files\n\n# Run specific hook\npre-commit run ansible-lint --all-files\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#best-practices-and-tips","title":"Best Practices and Tips","text":"","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#1-progressive-rule-adoption","title":"1. Progressive Rule Adoption","text":"<p>Start with essential rules and gradually add more:</p> <pre><code># Start with these basic rules\nenable_list:\n  - no-tabs\n  - no-jinja-when\n  - no-log-password\n\n# Gradually add more rules\nenable_list:\n  - no-tabs\n  - no-jinja-when\n  - no-log-password\n  - no-command\n  - no-shell\n  - no-relative-paths\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#2-custom-rules-for-your-organization","title":"2. Custom Rules for Your Organization","text":"<p>Create custom rules in a <code>custom_rules/</code> directory:</p> <pre><code># custom_rules/custom_rule.py\nfrom ansiblelint.rules import AnsibleLintRule\n\nclass CustomRule(AnsibleLintRule):\n    id = 'custom-rule'\n    shortdesc = 'Custom rule description'\n    description = 'Detailed description of the custom rule'\n    tags = ['custom']\n\n    def match(self, file, line):\n        # Your custom logic here\n        return False\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#3-integration-with-ide","title":"3. Integration with IDE","text":"<p>Configure your IDE for real-time linting:</p> <p>VS Code Settings (.vscode/settings.json): <pre><code>{\n    \"ansible.ansibleLint.enabled\": true,\n    \"ansible.ansibleLint.path\": \"ansible-lint\",\n    \"ansible.ansibleLint.configFile\": \".ansible-lint\",\n    \"yaml.validate\": true,\n    \"yaml.schemas\": {\n        \"https://json.schemastore.org/ansible-stable-2.9.json\": \"**/tasks/*.yml\",\n        \"https://json.schemastore.org/ansible-stable-2.9.json\": \"**/handlers/*.yml\"\n    }\n}\n</code></pre></p>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#4-performance-optimization","title":"4. Performance Optimization","text":"<p>For large projects, optimize linting performance:</p> <pre><code># Use parallel processing\nansible-lint --parallel .\n\n# Exclude unnecessary directories\nansible-lint --exclude=test/ --exclude=docs/ .\n\n# Use specific file patterns\nansible-lint \"**/*.yml\" \"**/*.yaml\"\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#5-reporting-and-metrics","title":"5. Reporting and Metrics","text":"<p>Generate detailed reports for analysis:</p> <pre><code># Generate JSON report\nansible-lint --format=json . &gt; lint-report.json\n\n# Generate CodeClimate format\nansible-lint --format=codeclimate . &gt; codeclimate.json\n\n# Generate JUnit XML for CI\nansible-lint --format=junit . &gt; ansible-lint.xml\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":"","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#1-false-positives","title":"1. False Positives","text":"<p>Handle false positives by disabling specific rules:</p> <pre><code># In .ansible-lint\ndisable_list:\n  - no-log-password  # If logging is required for debugging\n  - no-command       # If raw commands are necessary\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#2-performance-issues","title":"2. Performance Issues","text":"<p>Optimize for large codebases:</p> <pre><code># Use caching\nansible-lint --cache .ansible-lint-cache .\n\n# Limit file types\nansible-lint --exclude=\"*.j2\" --exclude=\"*.md\" .\n\n# Use specific directories\nansible-lint playbooks/ roles/\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#3-integration-issues","title":"3. Integration Issues","text":"<p>Common CI/CD integration problems:</p> <pre><code># GitHub Actions - Handle failures gracefully\n- name: Run ansible-lint\n  run: |\n    ansible-lint --format=rich . || {\n      echo \"Linting found issues. Check the output above.\"\n      exit 1\n    }\n  continue-on-error: false\n</code></pre>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#conclusion","title":"Conclusion","text":"<p>Automated linting with <code>ansible-lint</code> and <code>yaml-lint</code> is essential for maintaining code quality in Ansible projects. By integrating these tools into your CI/CD pipelines, you can:</p> <ul> <li>Catch errors early in the development process</li> <li>Enforce consistent coding standards across your team</li> <li>Improve code maintainability and readability</li> <li>Reduce deployment failures caused by syntax errors</li> <li>Build confidence in your automation code</li> </ul> <p>Start with basic linting rules and gradually expand your quality checks. Remember that the goal is to improve code quality, not to create unnecessary friction in your development workflow.</p>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/automate-code-quality-ansible-lint-yaml-lint-and-cicd-integration/#resources","title":"Resources","text":"<ul> <li>ansible-lint Documentation</li> <li>yamllint Documentation</li> <li>GitHub Actions Documentation</li> <li>GitLab CI/CD Documentation</li> <li>Pre-commit Framework</li> </ul> <p>For more automation and DevOps content, check out our Ansible tutorials and network automation guides. </p>","tags":["ansible","ansible-lint","yaml-lint","ci-cd","github-actions","gitlab-ci","code-quality","automation"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/","title":"Netdata Monitoring System - Real-Time, Free, and Easy","text":"<p>Netdata is a free, open-source, and lightweight monitoring solution for servers, containers, and applications. It provides real-time insights into your system\u2019s health, performance, and resource usage\u2014all with beautiful, interactive dashboards. Whether you\u2019re a home lab enthusiast or running enterprise infrastructure, Netdata is a fantastic tool to have in your monitoring arsenal.</p> <p></p>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#why-netdata","title":"Why Netdata?","text":"<ul> <li>Free &amp; Open Source: 100% free for personal and commercial use. GitHub repo</li> <li>Real-Time Monitoring: See metrics update instantly\u2014no more waiting for slow polling intervals.</li> <li>Lightweight: Minimal resource usage, suitable for even small VMs or Raspberry Pi.</li> <li>Easy Setup: Get started in minutes with a single command.</li> <li>Beautiful Dashboards: Interactive web UI with hundreds of prebuilt charts.</li> <li>Extensible: Monitor everything from CPU and memory to Docker, Nginx, databases, and more.</li> <li>Enterprise Features: Optional cloud, alerting, and team features for larger environments.</li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Home labs and personal servers</li> <li>Docker and Kubernetes monitoring</li> <li>Small business and enterprise infrastructure</li> <li>Troubleshooting performance issues</li> <li>Visualizing resource usage over time</li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#how-to-install-netdata","title":"How to Install Netdata","text":"","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#1-quick-start-one-line-install","title":"1. Quick Start (One-Line Install)","text":"<p>The fastest way to get Netdata running on most Linux systems:</p> <pre><code>bash &lt;(curl -Ss https://my-netdata.io/kickstart.sh)\n</code></pre> <ul> <li>This script auto-detects your OS and installs Netdata as a service.</li> <li>After install, access the dashboard at: http://localhost:19999</li> </ul> <p>Security Tip: Always review install scripts before running them in production.</p>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#2-docker-deployment","title":"2. Docker Deployment","text":"<p>Netdata is also available as a Docker container. For best practice, mount all persistent data under <code>/opt/netdata/</code> on your host:</p> <pre><code>docker run -d \\\n  --name=netdata \\\n  -p 19999:19999 \\\n  -v /opt/netdata/config:/etc/netdata \\\n  -v /opt/netdata/lib:/var/lib/netdata \\\n  -v /opt/netdata/cache:/var/cache/netdata \\\n  -v /etc/passwd:/host/etc/passwd:ro \\\n  -v /etc/group:/host/etc/group:ro \\\n  -v /proc:/host/proc:ro \\\n  -v /sys:/host/sys:ro \\\n  -v /etc/os-release:/host/etc/os-release:ro \\\n  --restart unless-stopped \\\n  --cap-add SYS_PTRACE \\\n  --security-opt apparmor=unconfined \\\n  netdata/netdata\n</code></pre> <ul> <li>This setup keeps all Netdata configuration, state, and cache files organized under <code>/opt/netdata/</code> on your host.</li> <li>Visit http://localhost:19999 after starting the container.</li> <li>For more options, see the Netdata Docker docs.</li> </ul> <p>Coming soon: I will publish an Ansible role to automate Netdata deployment with Docker as part of my automation resources. Stay tuned!</p>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#3-other-installation-methods","title":"3. Other Installation Methods","text":"<ul> <li>Kubernetes/Helm</li> <li>Debian/Ubuntu packages</li> <li>RPM packages</li> <li>Manual build</li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#basic-configuration","title":"Basic Configuration","text":"<p>Netdata works out of the box, but you can customize it for your needs.</p>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#main-config-file","title":"Main Config File","text":"<ul> <li>Location: <code>/opt/netdata/config/netdata.conf</code> (host) or <code>/etc/netdata/netdata.conf</code> (in container)</li> <li>To edit:   <pre><code>sudo nano /opt/netdata/config/netdata.conf\n</code></pre></li> <li>Example: Change the default dashboard port   <pre><code>[web]\n  bind to = 0.0.0.0:19999\n</code></pre></li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#enabledisable-plugins","title":"Enable/Disable Plugins","text":"<ul> <li>Netdata auto-detects most services, but you can enable/disable plugins in <code>/opt/netdata/config/netdata.conf</code> or in the <code>python.d</code> and <code>go.d</code> plugin directories under <code>/opt/netdata/config/</code>.</li> <li>Example: Enable the Nginx plugin   <pre><code>sudo nano /opt/netdata/config/python.d/nginx.conf\n</code></pre></li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#monitoring-network-devices-with-snmp-and-grpc","title":"Monitoring Network Devices with SNMP and gRPC","text":"<p>Netdata can monitor network devices such as switches, routers, and firewalls using standard protocols like SNMP (Simple Network Management Protocol) and gRPC. This allows you to visualize interface statistics, CPU/memory usage, and more from your network infrastructure alongside your servers and containers.</p>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#snmp-monitoring","title":"SNMP Monitoring","text":"<ul> <li>SNMP is widely supported by network devices for exposing metrics.</li> <li>Netdata uses the <code>snmp</code> plugin to poll devices and display their data.</li> <li>Typical use cases: switches, routers, firewalls, printers, UPS devices, etc.</li> </ul> <p>Example SNMP configuration (<code>/opt/netdata/config/python.d/snmp.conf</code>):</p> <pre><code>switch1:\n  community: public\n  host: 192.168.1.10\n  version: 2c\n  modules:\n    - system\n    - interfaces\n</code></pre> <ul> <li>After editing, restart Netdata: <code>sudo systemctl restart netdata</code> (or restart the container).</li> <li>See Netdata SNMP docs for more details and module options.</li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#grpc-monitoring","title":"gRPC Monitoring","text":"<ul> <li>gRPC is a modern, high-performance protocol used by some next-gen network devices and platforms.</li> <li>Netdata supports gRPC for certain integrations (see Netdata gRPC docs).</li> <li>Example use cases: cloud-native network appliances, SDN controllers, or custom telemetry exporters.</li> </ul> <p>Example gRPC configuration (<code>/opt/netdata/config/go.d/grpc.conf</code>):</p> <pre><code>grpc_example:\n  address: 192.168.1.20:50051\n  metrics:\n    - cpu\n    - memory\n</code></pre> <ul> <li>Adjust the address and metrics as needed for your device/platform.</li> </ul> <p>For more on network device monitoring and automation, see my network automation resources and Ansible tutorials.</p>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#first-steps-after-install","title":"First Steps After Install","text":"<ol> <li>Open the Dashboard: Go to http://localhost:19999 in your browser.</li> <li>Explore Metrics: Click through the charts for CPU, memory, disk, network, containers, and more.</li> <li>Set Up Alerts: Netdata comes with built-in alerting. Configure notifications in <code>/etc/netdata/health_alarm_notify.conf</code>.</li> <li>Add More Nodes: Use Netdata Cloud (free tier available) to monitor multiple systems from a single dashboard.</li> <li>Note: To use the Netdata Cloud dashboard, you need to create an online space (organization) in Netdata Cloud and link your nodes to it. This lets you manage and view all your systems in one place, invite team members, and access advanced features. See the official guide.</li> </ol>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#enterprise-cloud-features","title":"Enterprise &amp; Cloud Features","text":"<ul> <li>Netdata Cloud: Centralized monitoring, team access, and long-term metrics storage. Learn more</li> <li>Advanced Alerting: Integrate with Slack, email, PagerDuty, and more.</li> <li>Role-Based Access: Manage who can see and edit dashboards.</li> <li>Data Retention: Store metrics for longer periods in the cloud.</li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#screenshots-visuals","title":"Screenshots &amp; Visuals","text":"<p>Coming soon!</p> <ul> <li>[Insert screenshot - Netdata dashboard overview] </li> <li>[Insert screenshot - Docker container metrics] </li> <li>[Insert screenshot - Health alerts configuration] </li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#troubleshooting-tips","title":"Troubleshooting &amp; Tips","text":"<ul> <li>Netdata not starting? Check logs: <code>sudo journalctl -u netdata</code> or <code>docker logs netdata</code></li> <li>Firewall issues? Ensure port 19999 is open.</li> <li>Performance: Netdata is lightweight, but you can tune data collection and retention in the config.</li> <li>Security: For public dashboards, use a reverse proxy with authentication.</li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#resources-further-reading","title":"Resources &amp; Further Reading","text":"<ul> <li>Netdata Documentation</li> <li>Netdata GitHub</li> <li>Netdata Docker Hub</li> <li>Netdata Cloud</li> <li>Monitoring with Docker: Blog Post</li> <li>Other Monitoring Tools</li> </ul>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/netdata-monitoring-system-real-time-free-and-easy/#feedback","title":"Feedback","text":"<p>Have you used Netdata? Share your tips, questions, or screenshots in the comments! For more monitoring and automation content, check out our blog and network automation resources.</p>","tags":["netdata","monitoring","docker","open-source","linux"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/","title":"Automatically Publish Ansible Roles to Ansible Galaxy with GitHub Actions","text":"<p>Manually uploading your Ansible roles to Ansible Galaxy is tedious and error-prone. With GitHub Actions, you can automate this process so every new release is published automatically!</p>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>A GitHub repository containing a valid Ansible role (follows Ansible Galaxy role structure)</li> <li>An Ansible Galaxy account</li> <li>Your Galaxy namespace set up and linked to your GitHub account</li> </ul>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#2-get-your-ansible-galaxy-api-key","title":"2. Get Your Ansible Galaxy API Key","text":"<ol> <li>Log in to Ansible Galaxy.</li> <li>Click your profile icon \u2192 My Content.</li> <li>Go to API Key tab.</li> <li>Click Create API Key (if you don\u2019t have one).</li> <li>Copy the API key (you\u2019ll need it for GitHub secrets).</li> </ol>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#3-add-the-api-key-as-a-github-secret","title":"3. Add the API Key as a GitHub Secret","text":"<ol> <li>In your GitHub repo, go to Settings \u2192 Secrets and variables \u2192 Actions.</li> <li>Click New repository secret.</li> <li>Name it: <code>ANSIBLE_GALAXY_API_KEY</code></li> <li>Paste your API key as the value.</li> <li>Save.</li> </ol> <p>Tip: Never commit your API key to the repo! Always use secrets.</p>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#4-ensure-your-roles-namespace-and-metamainyml-are-correct","title":"4. Ensure Your Role\u2019s Namespace and meta/main.yml Are Correct","text":"<ul> <li> <p>Your role\u2019s <code>meta/main.yml</code> should have the correct <code>namespace</code> and <code>role_name</code> fields. Replace <code>&lt;your_namespace&gt;</code> and <code>&lt;your_role_name&gt;</code> with your actual Galaxy namespace and role name:     <pre><code>galaxy_info:\n  role_name: &lt;your_role_name&gt;\n  namespace: &lt;your_namespace&gt;\n  # ... other metadata ...\n</code></pre></p> </li> <li> <p>The GitHub repo name should match the Galaxy role convention: <code>ansible_role_&lt;role_name&gt;</code> (e.g., <code>ansible_role_nautobot_docker</code>).</p> </li> </ul>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#5-create-the-github-actions-workflow","title":"5. Create the GitHub Actions Workflow","text":"<p>Create a file at <code>.github/workflows/galaxy-publish.yml</code> in your repo. Replace <code>&lt;your_namespace&gt;</code> with your actual Galaxy namespace:</p> <pre><code>name: Publish Ansible Role to Galaxy\n\non:\n  push:\n    tags:\n      - 'v*'  # Only run on version tags, e.g., v1.0.0\n\njobs:\n  galaxy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: '3.x'\n\n      - name: Install Ansible\n        run: pip install ansible\n\n      - name: Publish to Ansible Galaxy\n        env:\n          ANSIBLE_GALAXY_API_KEY: ${{ secrets.ANSIBLE_GALAXY_API_KEY }}\n        run: |\n          ansible-galaxy role import \\\n            --api-key \"$ANSIBLE_GALAXY_API_KEY\" \\\n            &lt;your_namespace&gt; ${{ github.event.repository.name }}\n</code></pre> <p>Notes: - This workflow triggers only when you push a tag starting with <code>v</code> (e.g., <code>v1.2.3</code>). - It uses the secret for authentication. - Replace <code>&lt;your_namespace&gt;</code> with your actual Ansible Galaxy namespace. - If your repository name does not match your role name, adjust the last argument accordingly (e.g., use the actual role name instead of <code>${{ github.event.repository.name }}</code>).</p>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#6-tag-and-release-your-role","title":"6. Tag and Release Your Role","text":"<ol> <li>Bump the version in your role (e.g., in <code>meta/main.yml</code> or <code>CHANGELOG.md</code>).</li> <li>Create a git tag and push it:     <pre><code>git tag v1.0.0\ngit push origin v1.0.0\n</code></pre></li> <li>The workflow will run and publish your role to Galaxy!</li> </ol>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#7-troubleshooting","title":"7. Troubleshooting","text":"<ul> <li>Role not appearing on Galaxy? </li> <li>Check the Actions tab for errors.</li> <li>Ensure your <code>meta/main.yml</code> has the correct namespace and role name.</li> <li> <p>Make sure your GitHub repo is linked to your Galaxy namespace.</p> </li> <li> <p>API Key errors? </p> </li> <li> <p>Regenerate your API key and update the GitHub secret.</p> </li> <li> <p>Workflow not triggering? </p> </li> <li>Make sure you\u2019re pushing annotated tags (<code>git tag v1.0.0</code>).</li> </ul>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#8-best-practices","title":"8. Best Practices","text":"<ul> <li>Use semantic versioning for your tags.</li> <li>Keep your <code>meta/main.yml</code> up to date.</li> <li>Test your role locally before tagging and pushing.</li> <li>Use a <code>CHANGELOG.md</code> to track changes.</li> <li>Code Quality: Implement automated linting with ansible-lint and yaml-lint in your CI/CD pipeline.</li> </ul>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#9-references","title":"9. References","text":"<ul> <li>Ansible Galaxy: Importing Roles</li> <li>GitHub Actions Documentation</li> <li>Example: bsmeding/ansible_role_nautobot_docker</li> </ul>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/automatically-push-ansible-role-to-ansible-galaxy-with-github-actions/#10-feedback","title":"10. Feedback","text":"<p>Have questions or want to share your workflow? Leave a comment or connect with me on LinkedIn.</p> <p>Happy automating!</p>","tags":["ansible","ansible galaxy","github action","ci/cd","automation"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/","title":"Getting Started with Network Automation","text":"<p>I often get the question from Network Engineers: \"How / where do I need to start with Network automation?\" This blog post provides a comprehensive guide to start with network automation from beginning to expert level.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#what-basic-knowledge-is-needed","title":"What Basic Knowledge is Needed","text":"<p>Most automation tools are command-line based, so a basic understanding of Linux is essential. Here's what you need to know:</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#1-linux-basics","title":"1. Linux Basics","text":"<ul> <li>Navigate directories (<code>cd</code>, <code>ls</code>, <code>pwd</code>)</li> <li>Create and edit files (<code>touch</code>, <code>nano</code>, <code>vim</code>)</li> <li>Understand file permissions</li> <li>Basic shell commands</li> </ul> <p>For a comprehensive guide to Linux basics for network automation, see Linux Basics for Network Automation.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#2-development-environment","title":"2. Development Environment","text":"<p>After basic Linux understanding, you'll need: - IDE: Visual Studio Code, PyCharm, or even Vim/Emacs - Version Control: Git (GitHub, GitLab, Bitbucket, Azure DevOps) - YAML Understanding: Essential for Ansible playbooks</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#setting-up-visual-studio-code","title":"Setting Up Visual Studio Code","text":"<p>For network automation, I recommend Visual Studio Code. See Visual Studio Code for Network Automation for detailed setup instructions, including essential extensions and configurations.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#installing-ansible-in-a-virtual-environment","title":"Installing Ansible in a Virtual Environment","text":"<p>It's best practice to install Ansible in a Python virtual environment to avoid conflicts with system packages:</p> <pre><code># Create a virtual environment\npython3 -m venv automation_env\n\n# Activate the virtual environment\nsource automation_env/bin/activate    # Linux/macOS\n# automation_env\\Scripts\\activate     # Windows\n\n# Install Ansible\npip install ansible\n\n# Verify installation\nansible --version\n</code></pre> <p>For more detailed Ansible setup instructions, see Ansible Introduction &amp; Getting Started.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#3-yaml-syntax-basics","title":"3. YAML Syntax Basics","text":"<p>YAML is the foundation of Ansible playbooks. Here's a quick primer:</p> <pre><code># Basic YAML structure\n---\n- name: Example playbook\n  hosts: network_devices\n  gather_facts: false\n\n  vars:\n    snmp_community: public\n    ntp_servers:\n      - 192.168.1.1\n      - 192.168.1.2\n\n  tasks:\n    - name: Get device info\n      cisco.ios.ios_command:\n        commands: show version\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#next-steps-start-creating-your-first-automation","title":"Next Steps: Start Creating Your First Automation","text":"<p>First automation should always be small and easy to start. I recommend beginning with Ansible rather than pure Python code, unless you're already familiar with programming.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#why-start-with-ansible","title":"Why Start with Ansible?","text":"<ul> <li>No coding required: Use existing modules</li> <li>Declarative: Describe what you want, not how to do it</li> <li>Vendor-agnostic: Works with Cisco, Arista, Juniper, and more</li> <li>Large community: Plenty of examples and support</li> </ul>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#automation-steps-easy-to-advanced","title":"Automation Steps: Easy to Advanced","text":"<p>Don't try to automate a full device configuration directly. Start small and extend when successful.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#step-1-getting-information-from-network-devices","title":"Step 1: Getting Information from Network Devices","text":"<p>Start by creating a playbook to retrieve information from network devices. For testing, you can use: - Real devices in your network - Virtual devices with ContainerLab, VMware, VirtualBox, or other virtualization platforms</p> <p>I recommend VirtualBox for beginners (see my blog post 'getting-started-with-containerlab' for setup instructions).</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-basic-device-information-gathering","title":"Example: Basic Device Information Gathering","text":"<pre><code>---\n- name: Gather device information\n  hosts: network_devices\n  gather_facts: false\n\n  tasks:\n    - name: Get device version\n      cisco.ios.ios_command:\n        commands: \n          - show version\n          - show running-config | include hostname\n      register: device_info\n\n    - name: Display device information\n      debug:\n        msg: \"Device: {{ device_info.stdout[1] | regex_search('hostname (.+)') | regex_replace('hostname (.+)', '\\\\1') }}\"\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#inventory-setup","title":"Inventory Setup","text":"<p>Create an inventory file (<code>inventory.yml</code>):</p> <pre><code>all:\n  children:\n    network_devices:\n      children:\n        cisco_devices:\n          hosts:\n            switch01:\n              ansible_host: 192.168.1.10\n            switch02:\n              ansible_host: 192.168.1.11\n        arista_devices:\n          hosts:\n            spine01:\n              ansible_host: 192.168.1.20\n            spine02:\n              ansible_host: 192.168.1.21\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#group-variables","title":"Group Variables","text":"<p>Create <code>group_vars/cisco_devices.yml</code>:</p> <pre><code>---\nansible_network_os: ios\nansible_connection: network_cli\nansible_user: admin\nansible_password: \"{{ vault_cisco_password }}\"\nansible_become: yes\nansible_become_method: enable\nansible_become_password: \"{{ vault_cisco_enable }}\"\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#step-2-making-configuration-changes","title":"Step 2: Making Configuration Changes","text":"<p>After successfully gathering information, start making configuration changes.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-change-hostname","title":"Example: Change Hostname","text":"<pre><code>---\n- name: Change device hostname\n  hosts: network_devices\n  gather_facts: false\n\n  tasks:\n    - name: Configure hostname\n      cisco.ios.ios_config:\n        lines:\n          - hostname \"{{ inventory_hostname }}\"\n        save_when: modified\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-arista-eos-configuration","title":"Example: Arista EOS Configuration","text":"<pre><code>---\n- name: Configure Arista device\n  hosts: arista_devices\n  gather_facts: false\n\n  tasks:\n    - name: Set hostname\n      arista.eos.eos_config:\n        lines:\n          - hostname \"{{ inventory_hostname }}\"\n        save_when: modified\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#step-3-interface-management","title":"Step 3: Interface Management","text":"<p>Start with simple interface operations.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-enabledisable-interfaces","title":"Example: Enable/Disable Interfaces","text":"<pre><code>---\n- name: Manage interface status\n  hosts: network_devices\n  gather_facts: false\n\n  vars:\n    target_interfaces:\n      - GigabitEthernet0/1\n      - GigabitEthernet0/2\n\n  tasks:\n    - name: Shutdown specified interfaces\n      cisco.ios.ios_config:\n        lines:\n          - shutdown\n        parents: \"interface {{ item }}\"\n      loop: \"{{ target_interfaces }}\"\n      when: inventory_hostname in groups['cisco_devices']\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#step-4-interface-configuration","title":"Step 4: Interface Configuration","text":"<p>Move to more complex interface configurations.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-configure-interface-settings","title":"Example: Configure Interface Settings","text":"<pre><code>---\n- name: Configure interface settings\n  hosts: network_devices\n  gather_facts: false\n\n  vars:\n    interface_configs:\n      - interface: GigabitEthernet0/1\n        description: \"Server 1 Connection\"\n        vlan: 10\n      - interface: GigabitEthernet0/2\n        description: \"Server 2 Connection\"\n        vlan: 20\n\n  tasks:\n    - name: Configure interfaces\n      cisco.ios.ios_config:\n        lines:\n          - description \"{{ item.description }}\"\n          - switchport mode access\n          - switchport access vlan {{ item.vlan }}\n        parents: \"interface {{ item.interface }}\"\n      loop: \"{{ interface_configs }}\"\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#step-5-using-jinja2-templates","title":"Step 5: Using Jinja2 Templates","text":"<p>Templates allow you to create reusable configuration blocks.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-snmp-configuration-template","title":"Example: SNMP Configuration Template","text":"<p>Create <code>templates/snmp_config.j2</code>:</p> <pre><code>snmp-server community {{ snmp_community }} RO\nsnmp-server location {{ snmp_location }}\nsnmp-server contact {{ snmp_contact }}\n{% for server in ntp_servers %}\nntp server {{ server }}\n{% endfor %}\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#playbook-using-template","title":"Playbook Using Template","text":"<pre><code>---\n- name: Configure SNMP and NTP\n  hosts: network_devices\n  gather_facts: false\n\n  vars:\n    snmp_community: \"{{ vault_snmp_community }}\"\n    snmp_location: \"Data Center 1\"\n    snmp_contact: \"network-team@company.com\"\n    ntp_servers:\n      - 192.168.1.1\n      - 192.168.1.2\n\n  tasks:\n    - name: Apply SNMP and NTP configuration\n      cisco.ios.ios_config:\n        src: \"templates/snmp_config.j2\"\n        save_when: modified\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#step-6-creating-loops","title":"Step 6: Creating Loops","text":"<p>Use loops to process multiple items efficiently.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-batch-interface-operations","title":"Example: Batch Interface Operations","text":"<pre><code>---\n- name: Batch interface operations\n  hosts: network_devices\n  gather_facts: false\n\n  vars:\n    interfaces_to_disable:\n      - GigabitEthernet0/5\n      - GigabitEthernet0/6\n      - GigabitEthernet0/7\n\n  tasks:\n    - name: Disable unused interfaces\n      cisco.ios.ios_config:\n        lines:\n          - shutdown\n        parents: \"interface {{ item }}\"\n      loop: \"{{ interfaces_to_disable }}\"\n      when: \n        - inventory_hostname in groups['cisco_devices']\n        - item in interfaces_to_disable\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-using-group-variables-for-interface-selection","title":"Example: Using Group Variables for Interface Selection","text":"<p>Create <code>group_vars/access_switches.yml</code>:</p> <pre><code>---\naccess_ports:\n  - GigabitEthernet0/1\n  - GigabitEthernet0/2\n  - GigabitEthernet0/3\n  - GigabitEthernet0/4\n</code></pre> <pre><code>---\n- name: Configure access ports\n  hosts: access_switches\n  gather_facts: false\n\n  tasks:\n    - name: Configure access port settings\n      cisco.ios.ios_config:\n        lines:\n          - switchport mode access\n          - spanning-tree portfast\n          - spanning-tree bpduguard enable\n        parents: \"interface {{ item }}\"\n      loop: \"{{ access_ports }}\"\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#step-7-using-host-variables","title":"Step 7: Using Host Variables","text":"<p>Host variables allow you to override group variables for specific devices.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-host-specific-configuration","title":"Example: Host-Specific Configuration","text":"<p>Create <code>host_vars/switch01.yml</code>:</p> <pre><code>---\ncustom_vlans:\n  - id: 100\n    name: \"Management\"\n  - id: 200\n    name: \"Voice\"\n  - id: 300\n    name: \"Data\"\n</code></pre> <p>Create <code>templates/vlan_config.j2</code>:</p> <pre><code>{% for vlan in custom_vlans %}\nvlan {{ vlan.id }}\n name {{ vlan.name }}\n{% endfor %}\n</code></pre> <pre><code>---\n- name: Configure VLANs per device\n  hosts: network_devices\n  gather_facts: false\n\n  tasks:\n    - name: Apply VLAN configuration\n      cisco.ios.ios_config:\n        src: \"templates/vlan_config.j2\"\n        save_when: modified\n      when: custom_vlans is defined\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#step-8-configuration-management","title":"Step 8: Configuration Management","text":"<p>Learn to save, backup, and compare configurations.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-save-and-backup-configuration","title":"Example: Save and Backup Configuration","text":"<pre><code>---\n- name: Backup device configurations\n  hosts: network_devices\n  gather_facts: false\n\n  tasks:\n    - name: Get running configuration\n      cisco.ios.ios_config:\n        retrieve: running\n      register: running_config\n\n    - name: Save configuration to file\n      copy:\n        content: \"{{ running_config.running }}\"\n        dest: \"backups/{{ inventory_hostname }}_{{ ansible_date_time.iso8601 }}.cfg\"\n      delegate_to: localhost\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-configuration-diff","title":"Example: Configuration Diff","text":"<pre><code>---\n- name: Check configuration changes\n  hosts: network_devices\n  gather_facts: false\n\n  tasks:\n    - name: Get configuration diff\n      cisco.ios.ios_config:\n        lines:\n          - hostname \"{{ inventory_hostname }}\"\n        diff_against: running\n        diff_ignore_lines:\n          - \"Building configuration\"\n          - \"Current configuration\"\n      register: config_diff\n\n    - name: Display diff\n      debug:\n        msg: \"{{ config_diff.diff }}\"\n      when: config_diff.diff is defined\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#step-9-restore-backed-up-configuration","title":"Step 9: Restore Backed Up Configuration","text":"<p>Learn to restore configurations from backups.</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#example-restore-configuration","title":"Example: Restore Configuration","text":"<pre><code>---\n- name: Restore device configuration\n  hosts: network_devices\n  gather_facts: false\n\n  vars:\n    backup_file: \"backups/{{ inventory_hostname }}_2024-01-15T10:30:00Z.cfg\"\n\n  tasks:\n    - name: Restore configuration from backup\n      cisco.ios.ios_config:\n        src: \"{{ backup_file }}\"\n        save_when: modified\n      when: backup_file is file\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#advanced-topics","title":"Advanced Topics","text":"<p>Once you're comfortable with the basics, explore these advanced topics:</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#1-error-handling-and-rollback","title":"1. Error Handling and Rollback","text":"<pre><code>---\n- name: Configure with rollback capability\n  hosts: network_devices\n  gather_facts: false\n\n  tasks:\n    - name: Backup current configuration\n      cisco.ios.ios_config:\n        retrieve: running\n      register: backup_config\n\n    - name: Apply new configuration\n      cisco.ios.ios_config:\n        lines:\n          - hostname \"{{ inventory_hostname }}_new\"\n        save_when: modified\n      register: config_result\n\n    - name: Rollback on failure\n      cisco.ios.ios_config:\n        src: \"{{ backup_config.running }}\"\n        save_when: modified\n      when: config_result is failed\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#2-conditional-configuration","title":"2. Conditional Configuration","text":"<pre><code>---\n- name: Conditional configuration based on device type\n  hosts: network_devices\n  gather_facts: false\n\n  tasks:\n    - name: Configure access switch features\n      cisco.ios.ios_config:\n        lines:\n          - spanning-tree mode rapid-pvst\n          - spanning-tree extend system-id\n        parents: spanning-tree\n      when: inventory_hostname in groups['access_switches']\n\n    - name: Configure distribution switch features\n      cisco.ios.ios_config:\n        lines:\n          - spanning-tree mode rapid-pvst\n          - spanning-tree backbonefast\n        parents: spanning-tree\n      when: inventory_hostname in groups['distribution_switches']\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#3-integration-with-network-management-systems","title":"3. Integration with Network Management Systems","text":"<pre><code>---\n- name: Update NMS with device information\n  hosts: network_devices\n  gather_facts: false\n\n  tasks:\n    - name: Get device facts\n      cisco.ios.ios_facts:\n      register: device_facts\n\n    - name: Update NMS via API\n      uri:\n        url: \"https://nms.company.com/api/devices/{{ inventory_hostname }}\"\n        method: PUT\n        headers:\n          Content-Type: \"application/json\"\n          Authorization: \"Bearer {{ vault_nms_token }}\"\n        body_format: json\n        body:\n          hostname: \"{{ inventory_hostname }}\"\n          model: \"{{ device_facts.ansible_net_model }}\"\n          serial: \"{{ device_facts.ansible_net_serialnum }}\"\n          version: \"{{ device_facts.ansible_net_version }}\"\n      delegate_to: localhost\n</code></pre>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#best-practices","title":"Best Practices","text":"<ol> <li>Start Small: Begin with read-only operations</li> <li>Test in Lab: Always test in a non-production environment</li> <li>Version Control: Use Git for all your automation code</li> <li>Documentation: Document your playbooks and variables</li> <li>Security: Use Ansible Vault for sensitive information</li> <li>Backup: Always backup before making changes</li> <li>Rollback Plan: Have a plan to revert changes if needed</li> </ol>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/getting-started-with-network-automation-the-complete-guide/#conclusion","title":"Conclusion","text":"<p>Network automation doesn't have to be overwhelming. Start with simple information gathering, then gradually move to configuration changes. Use templates and variables to make your automation reusable and maintainable.</p> <p>Remember: Automation is a journey, not a destination. Start small, learn from each step, and gradually build your automation capabilities.</p> <p>For more advanced topics, check out my other blog posts on specific automation techniques and tools.</p> <p>Happy automating! \ud83d\ude80</p>","tags":["network automation","ansible","getting started","nocode","tutorial"]},{"location":"blog/nautobot-docker-images-with-pre-installed-apps/","title":"Nautobot Docker Apps","text":"<p>Nautobot is a powerful network automation platform, and with Docker you can easily deploy Nautobot and its ecosystem of apps and plugins. In this post, I'll show you how to get started with Nautobot in Docker, explore some useful apps, and share tips for a smooth deployment.</p>","tags":["nautobot","docker","network automation","cmdb","ssot","plugins","apps"]},{"location":"blog/nautobot-docker-images-with-pre-installed-apps/#nautobot-docker-images-with-pre-installed-apps","title":"Nautobot Docker Images with Pre-Installed Apps","text":"<p>Managing and extending Nautobot with plugins and apps can be challenging, especially for users who are not familiar with Docker, Docker builds, or Python package management. To make things easier, I maintain a set of Docker images based on the official Nautobot images, but with almost all major Nautobot apps pre-installed and ready to use.</p>","tags":["nautobot","docker","network automation","cmdb","ssot","plugins","apps"]},{"location":"blog/nautobot-docker-images-with-pre-installed-apps/#what-are-these-images","title":"\ud83d\ude80 What Are These Images?","text":"<ul> <li>Based on the official Nautobot images (latest two major versions: 1.x and 2.x)</li> <li>All major Nautobot apps pre-installed (see full list of apps)</li> <li>No need to build or install plugins manually</li> <li>Just activate the plugins you want in your <code>nautobot_config.py</code></li> <li>Available on Docker Hub: bsmeding/nautobot</li> </ul>","tags":["nautobot","docker","network automation","cmdb","ssot","plugins","apps"]},{"location":"blog/nautobot-docker-images-with-pre-installed-apps/#included-nautobot-apps","title":"\ud83e\udde9 Included Nautobot Apps","text":"<p>The images include (but are not limited to): - Nautobot ChatOps - Nautobot Data Validation Engine - Nautobot Device Lifecycle Management - Nautobot Device Onboarding - Nautobot Firewall Models - Nautobot Golden Configuration - Nautobot Plugin Nornir - Nautobot Single Source of Truth (SSoT)</p> <p>For the full and up-to-date list, see the Nautobot Apps documentation.</p>","tags":["nautobot","docker","network automation","cmdb","ssot","plugins","apps"]},{"location":"blog/nautobot-docker-images-with-pre-installed-apps/#how-to-use","title":"\ud83d\udee0\ufe0f How to Use","text":"<ol> <li>Pull the image from Docker Hub: <pre><code>docker pull bsmeding/nautobot:2.x-latest  # or 1.x-latest for Nautobot 1.x\n</code></pre></li> <li>Use the provided Docker Compose file: <pre><code>services:\n  nautobot:\n    container_name: nautobot\n    image: &amp;shared_image bsmeding/nautobot:stable-py3.11\n    depends_on:\n      - postgres\n      - redis\n    ports:\n      - \"8080:8080\"  # Exposes Nautobot on localhost:8080\n    environment:\n      - NAUTOBOT_DEBUG=True\n      - NAUTOBOT_DJANGO_EXTENSIONS_ENABLED=False\n      - NAUTOBOT_DJANGO_TOOLBAR_ENABLED=False\n      - NAUTOBOT_HIDE_RESTRICTED_UI=True\n      - NAUTOBOT_LOG_LEVEL=WARNING\n      - NAUTOBOT_METRICS_ENABLED=False\n      - NAUTOBOT_NAPALM_TIMEOUT=5\n      - NAUTOBOT_MAX_PAGE_SIZE=0\n      - NAUTOBOT_DB_HOST=postgres\n      - NAUTOBOT_DB_PORT=5432\n      - NAUTOBOT_DB_NAME=nautobot\n      - NAUTOBOT_DB_USER=nautobot\n      - NAUTOBOT_DB_PASSWORD=nautobotpassword\n      - NAUTOBOT_ALLOWED_HOSTS=*\n      - NAUTOBOT_REDIS_HOST=redis\n      - NAUTOBOT_REDIS_PORT=6379\n      - NAUTOBOT_SUPERUSER_NAME=admin\n      - NAUTOBOT_SUPERUSER_PASSWORD=admin\n      - NAUTOBOT_SUPERUSER_API_TOKEN=1234567890abcde0987654321\n      - NAUTOBOT_CREATE_SUPERUSER=true\n      - NAUTOBOT_INSTALLATION_METRICS_ENABLED=false\n      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py\n      - NAUTOBOT_CELERY_BROKER_URL=redis://redis:6379/0\n      - NAUTOBOT_SECURE_HSTS_SECONDS=3600\n      - NAUTOBOT_SECURE_SSL_REDIRECT=True\n      - NAUTOBOT_SESSION_COOKIE_SECURE=True\n      - NAUTOBOT_CSRF_COOKIE_SECURE=True\n    volumes:\n      - nautobot_config:/opt/nautobot/\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health/\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 120s\n    command: [\"nautobot-server\", \"runserver\", \"0.0.0.0:8080\"]\n\n  postgres:\n    image: postgres:13-alpine\n    container_name: postgres\n    command:\n      - \"-c\"\n      - \"max_connections=1000\"\n    healthcheck:\n      test: \"pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB\"\n      interval: \"10s\"\n      timeout: \"5s\"\n      retries: 10    \n    environment:\n      POSTGRES_USER: nautobot\n      POSTGRES_PASSWORD: nautobotpassword\n      POSTGRES_DB: nautobot\n    volumes:\n      - \"postgres_data:/var/lib/postgresql/data\"\n    restart: unless-stopped\n\n  redis:\n    image: redis:6\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\n  celery-beat:\n    container_name: nautobot_celery_beat\n    image: *shared_image\n    command: nautobot-server celery beat\n    depends_on:\n      nautobot:\n        condition: \"service_healthy\"\n    volumes:\n      - nautobot_config:/opt/nautobot/\n    environment:\n      - NAUTOBOT_DB_HOST=postgres\n      - NAUTOBOT_DB_PORT=5432\n      - NAUTOBOT_DB_NAME=nautobot\n      - NAUTOBOT_DB_USER=nautobot\n      - NAUTOBOT_DB_PASSWORD=nautobotpassword\n      - NAUTOBOT_REDIS_HOST=redis\n      - NAUTOBOT_REDIS_PORT=6379      \n      - NAUTOBOT_CELERY_BROKER_URL=redis://redis:6379/0\n      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py\n\n  celery-worker-1:\n    image: *shared_image\n    container_name: nautobot_celery_worker_1\n    command: nautobot-server celery worker --concurrency=4\n    depends_on:\n      nautobot:\n        condition: \"service_healthy\"\n    healthcheck:\n      interval: \"30s\"\n      timeout: \"10s\"\n      start_period: \"30s\"\n      retries: 3\n      test:\n        [\n          \"CMD\",\n          \"bash\",\n          \"-c\",\n          \"nautobot-server celery inspect ping --destination celery@$$HOSTNAME\"  ## $$ because of docker-compose\n        ]\n    volumes:\n      - nautobot_config:/opt/nautobot/\n    environment:\n      - NAUTOBOT_DB_HOST=postgres\n      - NAUTOBOT_DB_PORT=5432\n      - NAUTOBOT_DB_NAME=nautobot\n      - NAUTOBOT_DB_USER=nautobot\n      - NAUTOBOT_DB_PASSWORD=nautobotpassword\n      - NAUTOBOT_REDIS_HOST=redis\n      - NAUTOBOT_REDIS_PORT=6379      \n      - NAUTOBOT_CELERY_BROKER_URL=redis://redis:6379/0\n      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py\n\n\nvolumes:\n  nautobot_config: {}\n  postgres_data: {}\n  redis_data: {}\n</code></pre></li> <li>Source: docker-compose.yml Gist</li> <li>This Compose file sets up Nautobot, Postgres, Redis, and volumes for persistent data.</li> <li>Configure your plugins/apps:</li> <li>Edit <code>nautobot_config.py</code> to activate the plugins you want. All are pre-installed, just enable them in the config.</li> <li>Example:      <pre><code>PLUGINS = [\n    \"nautobot_chatops\",\n    \"nautobot_golden_config\",\n    # ...add or remove as needed\n]\n</code></pre></li> <li>Start Nautobot: <pre><code>docker compose up -d\n</code></pre></li> </ol>","tags":["nautobot","docker","network automation","cmdb","ssot","plugins","apps"]},{"location":"blog/nautobot-docker-images-with-pre-installed-apps/#requirements-files","title":"\ud83d\udd0d Requirements Files","text":"<ul> <li>For Nautobot 1.x: see <code>requirements_1.x.txt</code> in the GitHub repo</li> <li>For Nautobot 2.x: see <code>requirements2.x.txt</code> in the GitHub repo</li> </ul>","tags":["nautobot","docker","network automation","cmdb","ssot","plugins","apps"]},{"location":"blog/nautobot-docker-images-with-pre-installed-apps/#why-use-these-images","title":"\ud83d\udcdd Why Use These Images?","text":"<ul> <li>Save time: No need to build or install plugins manually.</li> <li>Consistency: All users get the same set of apps and versions.</li> <li>Easy upgrades: Just pull the latest image for new Nautobot or app versions.</li> <li>Great for labs, demos, and production where you want a quick start.</li> </ul>","tags":["nautobot","docker","network automation","cmdb","ssot","plugins","apps"]},{"location":"blog/nautobot-docker-images-with-pre-installed-apps/#resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>Nautobot Apps Documentation</li> <li>Docker Compose Example</li> <li>Docker Hub: bsmeding/nautobot</li> <li>GitHub: bsmeding/nautobot-docker</li> </ul> <p>If you have questions or want to suggest more apps to include, feel free to open an issue or contact me via the links above! </p>","tags":["nautobot","docker","network automation","cmdb","ssot","plugins","apps"]},{"location":"blog/pyats-testing-tutorial/","title":"pyATS Testing Tutorial","text":"<p>pyATS (Python Automated Test System) is a powerful, open-source Python framework originally developed by Cisco for network testing and validation. With the Genie library, pyATS can parse, learn, and compare network device states, making it a must-have tool for network engineers and automation professionals. In this tutorial, you'll learn how to install pyATS, create a testbed, run your first test, and use Genie for network state validation.</p>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#what-is-pyats-and-genie","title":"What is pyATS and Genie?","text":"<ul> <li>pyATS stands for Python Automated Test System. It is a modular, Python-based test automation framework used for network validation, health checks, and regression testing. While it was developed by Cisco, it works with many network platforms.</li> <li>Genie is a library that extends pyATS with network knowledge\u2014parsers, \"learn\" features, and diffing capabilities.</li> <li>Together, they allow you to automate network testing, parse CLI output, and compare network states before and after changes.</li> </ul> <p>pyATS is used by Cisco internally for millions of tests per month and is now open source for everyone.</p>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#installation","title":"Installation","text":"<p>It's best to use a Python virtual environment for pyATS projects:</p> <pre><code># Create and activate a virtual environment\nmkdir pyats-demo\ncd pyats-demo\npython3 -m venv .\nsource bin/activate\n\n# Install pyATS and Genie (full extras)\npip install \"pyats[full]\"\n</code></pre> <p>Check your installation: <pre><code>pyats version check\n</code></pre></p>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#creating-a-testbed-file","title":"Creating a Testbed File","text":"<p>A testbed file describes your network devices for pyATS. You can create one interactively:</p> <pre><code>genie create testbed interactive --output testbed1.yml\n</code></pre> <p>You'll be prompted for device names, IPs, credentials, and connection details. The result is a YAML file like:</p> <pre><code>devices:\n  csr1:\n    os: iosxe\n    type: router\n    connections:\n      cli:\n        protocol: ssh\n        ip: 192.168.1.10\n    credentials:\n      default:\n        username: admin\n        password: mypassword\n</code></pre> <p>You can add more devices by editing the YAML file.</p>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#running-your-first-pyatsgenie-test","title":"Running Your First pyATS/Genie Test","text":"<p>Let's use Genie to \"learn\" OSPF state from your devices:</p> <pre><code>genie learn ospf --testbed-file testbed1.yml --output ospf1\n</code></pre> <ul> <li>This command connects to all devices in your testbed and collects OSPF state, saving the results in the <code>ospf1</code> folder.</li> <li>You can repeat this after making changes (e.g., disabling an interface) and save to a new folder:</li> </ul> <pre><code>genie learn ospf --testbed-file testbed1.yml --output ospf2\n</code></pre>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#comparing-network-states-with-pyats-diff","title":"Comparing Network States with pyATS Diff","text":"<p>To see what changed between two states:</p> <pre><code>pyats diff ospf1 ospf2\n</code></pre> <ul> <li>This will show you exactly what changed in OSPF between the two runs\u2014great for troubleshooting and validation!</li> </ul>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#use-cases-for-pyats","title":"Use Cases for pyATS","text":"<ul> <li>Network Health Checks: Automate regular checks for interface status, routing, CPU/memory, etc.</li> <li>Pre/Post Change Validation: Capture network state before and after upgrades or config changes, and compare.</li> <li>Automated Testing: Integrate with CI/CD pipelines for continuous network validation.</li> <li>Parsing CLI Output: Use Genie parsers to turn CLI output into structured data for further analysis.</li> </ul>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#example-health-check-automation","title":"Example: Health Check Automation","text":"<p>You can schedule pyATS/Genie scripts to run at intervals, collecting and comparing network state, and alerting on changes or anomalies.</p>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#key-resources","title":"Key Resources","text":"<ul> <li>Roger Perkin: pyATS Genie Tutorial</li> <li>Cisco pyATS Getting Started Guide</li> <li>DevNet Academy pyATS Start Guide</li> <li>Dave Brown: pyATS Getting Started</li> <li>Cisco pyATS Documentation</li> <li>Genie Parsers List</li> </ul>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#conclusion","title":"Conclusion","text":"<p>pyATS and Genie are essential tools for network engineers looking to automate testing, validation, and troubleshooting. With simple YAML testbeds, powerful \"learn\" and diff features, and a Pythonic workflow, you can bring your network automation to the next level.</p> <p>For more network automation tutorials, check out the NetDevOps blog and tools index. </p>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/pyats-testing-tutorial/#bonus-generate-a-pyats-testbed-from-nautobot","title":"Bonus: Generate a pyATS Testbed from Nautobot","text":"<p>You can automate the creation of your pyATS testbed file by extracting device data directly from Nautobot. The script below connects to Nautobot using environment variables for the URL, API token, and site name, and outputs a testbed YAML file for use with pyATS.</p> <p>Note: For Nautobot 2.x and later, \"sites\" are now locations of type <code>site</code>. The script below supports both Nautobot 1.x (using the <code>site</code> field) and Nautobot 2.x (using the <code>location</code> field with type <code>site</code>).</p> <p>Usage: <pre><code>export NAUTOBOT_URL=https://nautobot.example.com/api/\nexport NAUTOBOT_TOKEN=yourtoken\nexport NAUTOBOT_SITE=ams-dc1\npython3 nautobot_to_pyats_testbed.py &gt; testbed.yml\n</code></pre></p> <p>Script: <pre><code>#!/usr/bin/env python3\n\"\"\"\nScript to extract devices from a Nautobot site/location and generate a pyATS testbed YAML file.\n\nSupports both Nautobot 1.x (site field) and Nautobot 2.x (locations of type 'site').\n\nEnvironment variables required:\n- NAUTOBOT_URL: Nautobot API base URL (e.g., https://nautobot.example.com/api/)\n- NAUTOBOT_TOKEN: Nautobot API token\n- NAUTOBOT_SITE: Name or slug of the site/location to extract devices from\n\nUsage:\n  export NAUTOBOT_URL=https://nautobot.example.com/api/\n  export NAUTOBOT_TOKEN=yourtoken\n  export NAUTOBOT_SITE=ams-dc1\n  python3 nautobot_to_pyats_testbed.py &gt; testbed.yml\n\"\"\"\nimport os\nimport sys\nimport requests\nimport yaml\n\nNAUTOBOT_URL = os.environ.get(\"NAUTOBOT_URL\")\nNAUTOBOT_TOKEN = os.environ.get(\"NAUTOBOT_TOKEN\")\nNAUTOBOT_SITE = os.environ.get(\"NAUTOBOT_SITE\")\n\nif not (NAUTOBOT_URL and NAUTOBOT_TOKEN and NAUTOBOT_SITE):\n    print(\"Error: Please set NAUTOBOT_URL, NAUTOBOT_TOKEN, and NAUTOBOT_SITE environment variables.\", file=sys.stderr)\n    sys.exit(1)\n\nHEADERS = {\n    \"Authorization\": f\"Token {NAUTOBOT_TOKEN}\",\n    \"Accept\": \"application/json\",\n}\n\ndef get_location_id(site_name):\n    # For Nautobot 2.x: get location with type 'site'\n    url = f\"{NAUTOBOT_URL.rstrip('/')}/dcim/locations/?location_type=site&amp;name={site_name}\"\n    resp = requests.get(url, headers=HEADERS)\n    resp.raise_for_status()\n    results = resp.json().get(\"results\", [])\n    if results:\n        return results[0][\"id\"]\n    return None\n\ndef get_devices(site):\n    # Try Nautobot 2.x locations first\n    location_id = get_location_id(site)\n    if location_id:\n        url = f\"{NAUTOBOT_URL.rstrip('/')}/dcim/devices/?location_id={location_id}&amp;limit=1000\"\n        resp = requests.get(url, headers=HEADERS)\n        resp.raise_for_status()\n        return resp.json().get(\"results\", [])\n    # Fallback to Nautobot 1.x site field\n    url = f\"{NAUTOBOT_URL.rstrip('/')}/dcim/devices/?site={site}&amp;limit=1000\"\n    resp = requests.get(url, headers=HEADERS)\n    resp.raise_for_status()\n    return resp.json().get(\"results\", [])\n\ndef get_primary_ip(device):\n    ip = device.get(\"primary_ip4\") or device.get(\"primary_ip\")\n    if ip and ip.get(\"address\"):\n        return ip[\"address\"].split(\"/\")[0]\n    return None\n\ndef build_testbed(devices):\n    testbed = {\"devices\": {}}\n    for dev in devices:\n        name = dev[\"name\"]\n        os_type = dev.get(\"platform\", {}).get(\"slug\", \"iosxe\")\n        mgmt_ip = get_primary_ip(dev)\n        if not mgmt_ip:\n            continue  # skip devices without management IP\n        testbed[\"devices\"][name] = {\n            \"os\": os_type,\n            \"type\": dev.get(\"device_type\", {}).get(\"model\", \"router\"),\n            \"connections\": {\n                \"cli\": {\n                    \"protocol\": \"ssh\",\n                    \"ip\": mgmt_ip\n                }\n            },\n            \"credentials\": {\n                \"default\": {\n                    \"username\": \"&lt;username&gt;\",\n                    \"password\": \"&lt;password&gt;\"\n                }\n            }\n        }\n    return testbed\n\nif __name__ == \"__main__\":\n    devices = get_devices(NAUTOBOT_SITE)\n    if not devices:\n        print(f\"No devices found for site/location '{NAUTOBOT_SITE}'.\", file=sys.stderr)\n        sys.exit(1)\n    testbed = build_testbed(devices)\n    yaml.dump(testbed, sys.stdout, default_flow_style=False, sort_keys=False)\n</code></pre></p>","tags":["pyats","genie","network automation","testing","cisco"]},{"location":"blog/create-development-environment-for-ansible-roles/","title":"Local Ansible Role Test Environment","text":"<p>I develop my Ansible roles, synced to GitHub, locally and test them before they get tagged for Ansible Galaxy. This blog shows how to set up a development environment in your favorite IDE (Visual Studio Code, Cursor AI, or your preference) and create a local test playbook synced to your roles\u2014no Galaxy upload required!</p>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/create-development-environment-for-ansible-roles/#1-directory-layout","title":"1. Directory Layout","text":"<p>I use a folder in my home directory named <code>Git sync</code>. Inside, I have a sub-folder named <code>ANSIBLE_ROLES</code> where I clone all my Ansible roles for development. Before pushing them to GitHub (and triggering a GitHub Action for Galaxy upload), I test them locally.</p> <p>Here\u2019s a visual of my test environment structure:</p> <pre><code>role_test_environment/\n\u251c\u2500\u2500 group_vars/\n\u2502   \u2514\u2500\u2500 all\n\u251c\u2500\u2500 host_vars/\n\u251c\u2500\u2500 inventory.yml\n\u251c\u2500\u2500 install_nautobot.yml\n\u251c\u2500\u2500 roles/\n\u2514\u2500\u2500 link_dev_roles.sh\n</code></pre>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/create-development-environment-for-ansible-roles/#2-basic-setup-files","title":"2. Basic Setup Files","text":"<p>group_vars/all: <pre><code>ansible_user: &lt;your_ssh_user&gt;\nansible_password: &lt;your_ssh_pass&gt;\nansible_become_method: sudo\nansible_become_pass: &lt;your_ssh_pass&gt;\nansible_connection: ssh\n</code></pre></p> <p>inventory.yml: <pre><code>all:\n  children:\n    devmachines:\n      hosts:\n        dev1:\n          ansible_host: 172.20.10.8\n</code></pre></p>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/create-development-environment-for-ansible-roles/#3-the-magic-linking-local-roles-with-namespace","title":"3. The Magic: Linking Local Roles with Namespace","text":"<p>To test local, unstaged changes, I create symlinks from my development roles to the <code>roles/</code> directory in my test project. This is important because my GitHub repos are named <code>ansible_role_xxxx</code>, but for Ansible Galaxy, the namespace is <code>bsmeding</code> and the role is referenced as <code>bsmeding.rolename</code>.</p> <p>Why? - Ansible expects roles in the format <code>namespace.rolename</code> (e.g., <code>bsmeding.nautobot_docker</code>) for Galaxy-style usage. - This matches how you\u2019d reference roles in <code>requirements.yml</code> or in your playbooks.</p> <p>NOTE that the correct <code>meta/main.yml</code> is set with <code>role_name</code> when using roles! NOTE that the correct <code>galaxy.yml</code> is set in the root folder when using collections!</p>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/create-development-environment-for-ansible-roles/#bash-script-to-link-roles","title":"Bash Script to Link Roles","text":"<p>Save this script as <code>link_dev_roles.sh</code> in your test project directory:</p> <pre><code>#!/bin/bash\n\nSRC_DIR=\"$HOME/code/ansible_roles\"   # where roles/collections are cloned\nDEST_DIR=\"./roles\"\nmkdir -p \"$DEST_DIR\"\n\nfor role_path in \"$SRC_DIR\"/*; do\n    [ -d \"$role_path\" ] || continue\n\n    # Case 1: Ansible collection (.galaxy.yml)\n    if [[ -f \"$role_path/.galaxy.yml\" ]]; then\n        namespace=$(grep '^namespace:' \"$role_path/.galaxy.yml\" | awk '{print $2}' | tr -d '\\r')\n        name=$(grep '^name:' \"$role_path/.galaxy.yml\" | awk '{print $2}' | tr -d '\\r')\n\n    # Case 2: Ansible role (meta/main.yml)\n    elif [[ -f \"$role_path/meta/main.yml\" ]]; then\n        name=$(grep 'role_name:' \"$role_path/meta/main.yml\" | awk '{print $2}' | tr -d '\\r')\n        author=$(grep 'author:' \"$role_path/meta/main.yml\" | awk '{print $2}' | tr -d '\\r')\n        namespace=\"${author:-$(basename \"$role_path\" | cut -d'-' -f3)}\"\n    else\n        echo \"\u26a0\ufe0f  No metadata found in $role_path, skipping.\"\n        continue\n    fi\n\n    # Validate\n    if [[ -z \"$namespace\" || -z \"$name\" ]]; then\n        echo \"\u26a0\ufe0f  Skipping $role_path \u2014 missing name or namespace.\"\n        continue\n    fi\n\n    link_name=\"$DEST_DIR/${namespace}.${name}\"\n    if [ ! -L \"$link_name\" ]; then\n        echo \"\ud83d\udd17 Linking $link_name \u2192 $role_path\"\n        ln -s \"$role_path\" \"$link_name\"\n    else\n        echo \"\u2714\ufe0f  Link exists: $link_name\"\n    fi\ndone\n</code></pre> <p>Make it executable: <pre><code>chmod +x link_dev_roles.sh\n</code></pre> Run it every time you add a new folder to your <code>ANSIBLE_ROLES</code> development environment: <pre><code>./link_dev_roles.sh\n</code></pre></p>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/create-development-environment-for-ansible-roles/#4-example-minimal-test-playbook","title":"4. Example: Minimal Test Playbook","text":"<p>Here\u2019s a simple playbook to test your role:</p> <pre><code>- hosts: all\n  become: true\n  roles:\n    - role: bsmeding.docker  # Ensure Docker is installed, this is not my development role, but to be shure Docker is installed\n    - role: bsmeding.nautobot_docker # This is my testing Ansible role from the symlink\n      vars:\n        nautobot__superuser_name: admin\n        nautobot__superuser_password: admin\n        nautobot__superuser_api_token: \"myapitoken\"\n</code></pre>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/create-development-environment-for-ansible-roles/#5-gitignore-advice","title":"5. .gitignore Advice","text":"<p>Add <code>roles/</code> to your <code>.gitignore</code> in the test project so you don\u2019t accidentally commit symlinks: <pre><code>roles/\n</code></pre></p>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/create-development-environment-for-ansible-roles/#6-troubleshooting-tips","title":"6. Troubleshooting Tips","text":"<ul> <li>Symlinks not working? On Windows, use WSL or Git Bash, or manually copy roles if symlinks are unsupported.</li> <li>Permissions issues? Ensure you have the right permissions for both source and destination directories.</li> <li>Role not found? Double-check the symlink names and that your playbook references the correct namespace and role name.</li> </ul>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/create-development-environment-for-ansible-roles/#7-related-content","title":"7. Related Content","text":"<ul> <li>All my Ansible roles on GitHub</li> <li>My Ansible Galaxy profile</li> <li>Automating Galaxy uploads with GitHub Actions</li> <li>Code Quality: ansible-lint and yaml-lint - Essential tools for maintaining code quality</li> </ul>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/create-development-environment-for-ansible-roles/#8-feedback","title":"8. Feedback","text":"<p>Have your own tips or questions? Leave a comment below or connect with me on LinkedIn. Happy automating!</p>","tags":["ansible","role development","ansible galaxy","github action"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/","title":"UV Package Manager: The Modern Alternative to Python Virtual Environments","text":"<p>UV is a fast Python package installer and resolver, written in Rust, that's rapidly becoming the preferred alternative to traditional virtual environments and pip. This comprehensive guide explores how uv simplifies Python dependency management, offering significant performance improvements and better developer experience.</p>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#what-is-uv","title":"What is UV?","text":"<p>UV is a modern Python package manager that combines the best features of pip, virtualenv, and pip-tools into a single, lightning-fast tool. It's designed to solve common pain points in Python development:</p> <ul> <li>Speed: Up to 10-100x faster than pip</li> <li>Reliability: Better dependency resolution with fewer conflicts</li> <li>Simplicity: Single tool for virtual environments and package management</li> <li>Compatibility: Works seamlessly with existing Python projects</li> </ul>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#why-replace-virtual-environments-with-uv","title":"Why Replace Virtual Environments with UV?","text":"<p>Traditional Python development workflows often involve multiple tools:</p> <pre><code># Traditional approach\npython -m venv .venv\nsource .venv/bin/activate  # or .venv\\Scripts\\activate on Windows\npip install -r requirements.txt\npip install package-name\npip freeze &gt; requirements.txt\n</code></pre> <p>UV simplifies this to:</p> <pre><code># UV approach\nuv init\nuv add package-name\nuv run python script.py\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#key-advantages","title":"Key Advantages","text":"<ul> <li>Faster Installation: Rust-based implementation provides significant speed improvements</li> <li>Better Dependency Resolution: Smarter conflict resolution and caching</li> <li>Unified Workflow: Single tool for environment and package management</li> <li>Cross-Platform: Consistent experience across Windows, macOS, and Linux</li> <li>WSL Optimized: Excellent performance in Windows Subsystem for Linux</li> </ul>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#installation-guide","title":"Installation Guide","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#windows-installation","title":"Windows Installation","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#method-1-using-powershell-recommended","title":"Method 1: Using PowerShell (Recommended)","text":"<pre><code># Install uv using PowerShell\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# Restart your terminal or reload environment\nrefreshenv\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#method-2-using-pip","title":"Method 2: Using pip","text":"<pre><code># Install uv globally\npip install uv\n\n# Verify installation\nuv --version\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#macos-installation","title":"macOS Installation","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#using-homebrew","title":"Using Homebrew","text":"<pre><code># Install uv using Homebrew\nbrew install uv\n\n# Verify installation\nuv --version\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#using-curl","title":"Using curl","text":"<pre><code># Install uv using curl\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Add to PATH (add to ~/.zshrc or ~/.bash_profile)\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\n\n# Restart terminal or source profile\nsource ~/.zshrc\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#linux-installation","title":"Linux Installation","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code># Install uv using curl\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Add to PATH\necho 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\nuv --version\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#using-pip","title":"Using pip","text":"<pre><code># Install uv globally\npip install uv\n\n# Verify installation\nuv --version\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#wsl-installation-and-configuration","title":"WSL Installation and Configuration","text":"<p>Windows Subsystem for Linux (WSL) provides an excellent environment for Python development. Here's how to set up uv in WSL:</p>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#1-install-wsl-if-not-already-installed","title":"1. Install WSL (if not already installed)","text":"<pre><code># In PowerShell as Administrator\nwsl --install\n\n# Restart your computer\n# WSL will automatically install Ubuntu by default\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#2-install-uv-in-wsl","title":"2. Install uv in WSL","text":"<pre><code># Update package list\nsudo apt update\n\n# Install curl if not present\nsudo apt install curl -y\n\n# Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Add uv to PATH\necho 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Verify installation\nuv --version\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#3-configure-wsl-for-optimal-performance","title":"3. Configure WSL for Optimal Performance","text":"<pre><code># Create .wslconfig in Windows user directory\n# C:\\Users\\YourUsername\\.wslconfig\n\n[wsl2]\nmemory=8GB\nprocessors=4\nswap=2GB\nlocalhostForwarding=true\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#4-install-python-in-wsl","title":"4. Install Python in WSL","text":"<pre><code># Update package list\nsudo apt update\n\n# Install Python 3.11+ and pip\nsudo apt install python3 python3-pip python3-venv -y\n\n# Install build dependencies\nsudo apt install build-essential python3-dev -y\n\n# Verify Python installation\npython3 --version\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#getting-started-with-uv","title":"Getting Started with UV","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#1-initialize-a-new-project","title":"1. Initialize a New Project","text":"<pre><code># Create a new project directory\nmkdir my-python-project\ncd my-python-project\n\n# Initialize with uv\nuv init\n\n# This creates:\n# - pyproject.toml (project configuration)\n# - .python-version (Python version specification)\n# - .gitignore (Git ignore file)\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#2-add-dependencies","title":"2. Add Dependencies","text":"<pre><code># Add a single package\nuv add requests\n\n# Add multiple packages\nuv add fastapi uvicorn sqlalchemy\n\n# Add development dependencies\nuv add --dev pytest black flake8\n\n# Add specific versions\nuv add \"requests&gt;=2.28.0,&lt;3.0.0\"\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#3-install-from-requirements-files","title":"3. Install from Requirements Files","text":"<pre><code># Install from requirements.txt\nuv pip install -r requirements.txt\n\n# Install from pyproject.toml\nuv sync\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#4-run-python-scripts","title":"4. Run Python Scripts","text":"<pre><code># Run a script in the virtual environment\nuv run python script.py\n\n# Run with specific Python version\nuv run --python 3.11 python script.py\n\n# Run pip commands\nuv pip install package-name\nuv pip freeze &gt; requirements.txt\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#advanced-uv-features","title":"Advanced UV Features","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#1-dependency-management","title":"1. Dependency Management","text":"<pre><code># View dependency tree\nuv tree\n\n# Update dependencies\nuv lock --upgrade\n\n# Check for outdated packages\nuv pip list --outdated\n\n# Remove packages\nuv remove package-name\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#2-project-configuration","title":"2. Project Configuration","text":"<pre><code># pyproject.toml\n[project]\nname = \"my-project\"\nversion = \"0.1.0\"\ndescription = \"A sample Python project\"\nrequires-python = \"&gt;=3.8\"\ndependencies = [\n    \"requests&gt;=2.28.0\",\n    \"fastapi&gt;=0.100.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0.0\",\n    \"black&gt;=22.0.0\",\n    \"flake8&gt;=5.0.0\",\n]\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#3-scripts-and-tools","title":"3. Scripts and Tools","text":"<pre><code># Run scripts defined in pyproject.toml\nuv run test\nuv run lint\nuv run format\n\n# Execute commands in the virtual environment\nuv run --with-deps pytest\nuv run --with-deps black .\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#4-environment-management","title":"4. Environment Management","text":"<pre><code># Create a new virtual environment\nuv venv\n\n# Activate the environment (optional, uv run handles this automatically)\nsource .venv/bin/activate\n\n# Deactivate\ndeactivate\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#migration-from-traditional-virtual-environments","title":"Migration from Traditional Virtual Environments","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#1-from-requirementstxt","title":"1. From requirements.txt","text":"<pre><code># Existing project with requirements.txt\ncd existing-project\n\n# Initialize uv\nuv init\n\n# Install existing dependencies\nuv pip install -r requirements.txt\n\n# Generate pyproject.toml\nuv pip freeze &gt; requirements.txt\n# Manually create pyproject.toml based on requirements\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#2-from-pipenv","title":"2. From pipenv","text":"<pre><code># Export Pipfile.lock to requirements\npipenv requirements &gt; requirements.txt\n\n# Initialize uv\nuv init\n\n# Install dependencies\nuv pip install -r requirements.txt\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#3-from-poetry","title":"3. From poetry","text":"<pre><code># Poetry projects can use uv directly\n# Install uv and run\nuv sync\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#wsl-specific-optimizations","title":"WSL-Specific Optimizations","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#1-file-system-performance","title":"1. File System Performance","text":"<pre><code># Access Windows files from WSL (slower)\ncd /mnt/c/Users/YourUsername/project\n\n# Work in WSL filesystem (faster)\ncd ~/projects/my-project\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#2-python-path-configuration","title":"2. Python Path Configuration","text":"<pre><code># Add to ~/.bashrc for consistent Python path\nexport PYTHONPATH=\"${PYTHONPATH}:$(pwd)\"\n\n# Use uv for consistent environment\nuv run python -c \"import sys; print(sys.path)\"\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#3-vs-code-integration","title":"3. VS Code Integration","text":"<pre><code>// .vscode/settings.json\n{\n    \"python.defaultInterpreterPath\": \"./.venv/bin/python\",\n    \"python.terminal.activateEnvironment\": true,\n    \"python.terminal.activateEnvInCurrentTerminal\": true\n}\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#performance-comparison","title":"Performance Comparison","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#installation-speed","title":"Installation Speed","text":"<pre><code># Traditional pip + venv\ntime python -m venv .venv\ntime source .venv/bin/activate &amp;&amp; pip install requests fastapi uvicorn\n\n# UV approach\ntime uv init\ntime uv add requests fastapi uvicorn\n</code></pre> <p>Results typically show: - UV: 2-5 seconds - pip + venv: 15-30 seconds</p>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#dependency-resolution","title":"Dependency Resolution","text":"<pre><code># UV provides better conflict resolution\nuv add \"django&gt;=4.0,&lt;5.0\" \"djangorestframework&gt;=3.14,&lt;4.0\"\n\n# Automatic conflict resolution and optimization\nuv tree\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#best-practices","title":"Best Practices","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#1-project-structure","title":"1. Project Structure","text":"<pre><code>my-project/\n\u251c\u2500\u2500 pyproject.toml          # Project configuration\n\u251c\u2500\u2500 .python-version         # Python version\n\u251c\u2500\u2500 .gitignore             # Git ignore rules\n\u251c\u2500\u2500 src/                   # Source code\n\u2502   \u2514\u2500\u2500 my_project/\n\u251c\u2500\u2500 tests/                 # Test files\n\u251c\u2500\u2500 docs/                  # Documentation\n\u2514\u2500\u2500 README.md\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#2-dependency-management","title":"2. Dependency Management","text":"<pre><code># Use semantic versioning\nuv add \"requests&gt;=2.28.0,&lt;3.0.0\"\n\n# Separate dev dependencies\nuv add --dev pytest black flake8\n\n# Lock dependencies for reproducible builds\nuv lock\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#3-cicd-integration","title":"3. CI/CD Integration","text":"<pre><code># .github/workflows/test.yml\nname: Test\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Install uv\n      run: |\n        curl -LsSf https://astral.sh/uv/install.sh | sh\n        echo \"$HOME/.cargo/bin\" &gt;&gt; $GITHUB_PATH\n\n    - name: Install dependencies\n      run: uv sync\n\n    - name: Run tests\n      run: uv run pytest\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#troubleshooting","title":"Troubleshooting","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#common-issues","title":"Common Issues","text":"","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#1-path-issues-in-wsl","title":"1. PATH Issues in WSL","text":"<pre><code># Ensure uv is in PATH\necho $PATH | grep cargo\n\n# Add to PATH if missing\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#2-permission-issues","title":"2. Permission Issues","text":"<pre><code># Fix ownership issues\nsudo chown -R $USER:$USER ~/.cargo\n\n# Fix permission issues\nchmod +x ~/.cargo/bin/uv\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#3-python-version-conflicts","title":"3. Python Version Conflicts","text":"<pre><code># Specify Python version\nuv run --python 3.11 python script.py\n\n# Check available Python versions\nuv python list\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#4-network-issues-in-wsl","title":"4. Network Issues in WSL","text":"<pre><code># Configure proxy if needed\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\n\n# Use alternative package index\nuv pip install --index-url https://pypi.org/simple/ package-name\n</code></pre>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#conclusion","title":"Conclusion","text":"<p>UV represents a significant evolution in Python package management, offering developers a faster, more reliable, and more intuitive way to manage Python dependencies. Its seamless integration with WSL makes it particularly valuable for developers working in mixed Windows/Linux environments.</p>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Performance: UV is significantly faster than traditional tools</li> <li>Simplicity: Single tool for environment and package management</li> <li>WSL Ready: Excellent performance and integration with WSL</li> <li>Future-Proof: Built with modern technologies and best practices</li> </ul>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#next-steps","title":"Next Steps","text":"<ol> <li>Install uv in your development environment</li> <li>Migrate existing projects to use uv</li> <li>Update CI/CD pipelines to use uv</li> <li>Explore advanced features like dependency trees and lock files</li> </ol>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#additional-resources","title":"Additional Resources","text":"<ul> <li>UV Official Documentation</li> <li>UV GitHub Repository</li> <li>Python Packaging User Guide</li> <li>WSL Documentation</li> </ul>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/uv-package-manager-the-modern-alternative-to-python-virtual-environments/#related-tutorials","title":"Related Tutorials","text":"<p>For more Python development tools and best practices:</p> <ul> <li>Python Virtual Environments Best Practices - Learn about traditional virtual environment management</li> <li>WSL Development Setup - Complete guide to setting up WSL for development</li> <li>Python Package Management - Comprehensive guide to Python package management tools</li> </ul> <p>UV is transforming how Python developers manage dependencies. Start using it today to experience faster, more reliable Python development workflows. </p>","tags":["python","uv","package management","virtual environments","wsl","development tools","netdevops"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/","title":"Supercharge Network Automation with GraphQL: One Query to Rule Them All","text":"<p>Network automation is evolving rapidly, and one of the most exciting developments is the adoption of GraphQL as a query language for APIs. Modern tools are embracing GraphQL, making it easier than ever to fetch exactly the data you need\u2014no more chaining multiple REST API calls or wrestling with pagination. In this post, I'll show you how to leverage GraphQL for powerful, efficient network automation workflows, with practical examples for platforms like Nautobot, OpsMill, and more.</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#why-graphql-for-network-automation","title":"Why GraphQL for Network Automation?","text":"<p>Traditional REST APIs are great, but they often require multiple calls to gather related data, and you may end up retrieving more (or less) than you actually need. GraphQL solves this by allowing you to:</p> <ul> <li>Query exactly what you want\u2014no more, no less</li> <li>Fetch deeply nested data in a single request</li> <li>Reduce network overhead and code complexity</li> <li>Easily introspect the API schema</li> </ul> <p>This is a game-changer for network automation, where you often need to build device configurations, inventory reports, or compliance checks from multiple data sources.</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#example-fetching-device-and-interface-data-in-one-query","title":"Example: Fetching Device and Interface Data in One Query","text":"<p>Suppose you want to generate a configuration for a device, including all its interfaces and IP addresses. With REST, you'd need to: - Get the device - Get its interfaces (separate call) - For each interface, get its IPs (more calls)</p> <p>With GraphQL, it's just one query. Here\u2019s an example using Nautobot, but the pattern applies to any GraphQL-enabled platform:</p> <pre><code>query {\n  devices(name: \"core-sw1\") {\n    name\n    device_type { model }\n    site { name }\n    interfaces {\n      name\n      type\n      enabled\n      ip_addresses {\n        address\n      }\n    }\n  }\n}\n</code></pre> <p>Result: You get a nested JSON structure with all the info you need, ready for Jinja2 templating or Ansible automation.</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#using-graphql-data-with-jinja2-for-config-generation","title":"Using GraphQL Data with Jinja2 for Config Generation","text":"<p>You can use the result of your GraphQL query directly in a Jinja2 template to generate device configs. For example, in Python:</p> <pre><code>import requests\nfrom jinja2 import Template\n\n# GraphQL endpoint and query\nurl = \"https://your-platform.example.com/graphql/\"\nheaders = {\"Authorization\": \"Token &lt;your_token&gt;\"}\nquery = '''\nquery {\n  devices(name: \"core-sw1\") {\n    name\n    interfaces {\n      name\n      ip_addresses { address }\n    }\n  }\n}\n'''\n\nresponse = requests.post(url, json={\"query\": query}, headers=headers)\ndata = response.json()[\"data\"][\"devices\"][0]\n\n# Jinja2 template\njinja_template = '''\nhostname {{ name }}\n{% for iface in interfaces %}\ninterface {{ iface.name }}\n{% for ip in iface.ip_addresses %}  ip address {{ ip.address }}\n{% endfor %}{% endfor %}\n'''\n\nprint(Template(jinja_template).render(**data))\n</code></pre> <p>Output: <pre><code>hostname core-sw1\ninterface GigabitEthernet0/1\n  ip address 10.0.0.1/24\ninterface GigabitEthernet0/2\n  ip address 10.0.1.1/24\n</code></pre></p> <p>For more on Jinja2 templating in network automation, see our Ansible tutorials.</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#more-graphql-use-cases-in-network-automation","title":"More GraphQL Use Cases in Network Automation","text":"<ul> <li>Inventory Reports: Fetch all devices, their roles, and statuses in one call.</li> <li>Compliance Checks: Query all interfaces with specific settings (e.g., shutdown, speed).</li> <li>Topology Mapping: Get all connections and build a live topology diagram.</li> </ul>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#example-get-all-devices-in-a-site-generic-graphql","title":"Example: Get All Devices in a Site (Generic GraphQL)","text":"<pre><code>query {\n  devices(site: \"ams-dc1\") {\n    name\n    status\n    device_type { model }\n    primary_ip4 { address }\n  }\n}\n</code></pre> <p>For more inventory and compliance automation, check out our network automation blog posts and tutorials.</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#beyond-nautobot-graphql-in-other-network-automation-tools","title":"Beyond Nautobot: GraphQL in Other Network Automation Tools","text":"<p>Nautobot is just one example. Let\u2019s look at how you can use GraphQL with other platforms.</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#opsmill","title":"OpsMill","text":"<p>OpsMill is a modern network automation and orchestration platform that also exposes a GraphQL API. The approach is similar:</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#example-fetching-device-inventory-from-opsmill","title":"Example: Fetching Device Inventory from OpsMill","text":"<pre><code>query {\n  devices(filter: { site: \"ams-dc1\" }) {\n    name\n    vendor\n    model\n    interfaces {\n      name\n      mac_address\n    }\n  }\n}\n</code></pre>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#example-python-script-to-query-opsmill","title":"Example: Python Script to Query OpsMill","text":"<pre><code>import requests\n\nurl = \"https://opsmill.example.com/graphql/\"\nheaders = {\"Authorization\": \"Bearer &lt;your_token&gt;\"}\nquery = '''\nquery {\n  devices(filter: { site: \"ams-dc1\" }) {\n    name\n    vendor\n    model\n    interfaces { name mac_address }\n  }\n}\n'''\n\nresp = requests.post(url, json={\"query\": query}, headers=headers)\ndata = resp.json()[\"data\"][\"devices\"]\nprint(data)\n</code></pre>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#other-tools","title":"Other Tools","text":"<ul> <li>NetBox (with plugins): Some NetBox plugins add GraphQL endpoints.</li> <li>Custom APIs: Many modern automation platforms are adding GraphQL support\u2014check your tool\u2019s docs!</li> </ul>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#graphql-vs-rest-why-it-matters","title":"GraphQL vs. REST: Why It Matters","text":"Feature REST API GraphQL API Data granularity Fixed endpoints Query exactly what you want Nested data Multiple calls Single call Schema introspect Limited Built-in Overfetch/Underfetch Common Rare Tooling Mature Rapidly growing <p>Bottom line: GraphQL lets you build more efficient, maintainable, and powerful automation workflows.</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#tips-for-using-graphql-in-network-automation","title":"Tips for Using GraphQL in Network Automation","text":"<ul> <li>Explore the Schema: Use tools like GraphiQL or Insomnia to browse available queries and fields.</li> <li>Combine with Templating: Use Jinja2, Nornir, or Ansible to turn GraphQL data into configs or reports.</li> <li>Batch Operations: Fetch all needed data in one go\u2014great for large-scale automation.</li> <li>Error Handling: Check for errors in the GraphQL response (<code>response[\"errors\"]</code>).</li> <li>Authentication: Use API tokens or OAuth as required by your platform.</li> </ul>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#conclusion","title":"Conclusion","text":"<p>GraphQL is transforming how we interact with network automation platforms. Whether you\u2019re using Nautobot, OpsMill, or another modern tool, GraphQL lets you: - Fetch all the data you need in a single, efficient call - Eliminate complex REST call chains - Power up your automation with templating and reporting</p> <p>Ready to try it? Start by exploring your tool\u2019s GraphQL endpoint, build a query, and see how much easier your automation can be! For more inspiration, browse our automation blog and tutorials.</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#references-further-reading","title":"References &amp; Further Reading","text":"<ul> <li>GraphQL Official Site</li> <li>Nautobot GraphQL Docs</li> <li>OpsMill Documentation</li> <li>Jinja2 Templating</li> <li>Python requests Library</li> <li>Network Automation Tutorials</li> <li>Ansible Tool Overview</li> <li>API Tool Overview</li> </ul>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/supercharge-network-automation-with-graphql---one-query-to-rule-them-all/#feedback","title":"Feedback","text":"<p>Have you used GraphQL in your network automation projects? Share your experiences or questions in the comments, or connect with me on LinkedIn. For more content, check out our blog and network automation resources. </p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/","title":"Nautobot in Action \u2013 Global Series Index","text":"<p>A comprehensive guide to building a complete network automation solution with Nautobot, from zero to production-ready deployment.</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#series-overview","title":"Series Overview","text":"<p>This series takes you from a basic Nautobot installation to a fully automated network environment. You'll learn how to use Nautobot as your Single Source of Truth (SSoT), implement configuration management, ensure compliance, and build event-driven automation workflows.</p> <p>What You'll Learn: - Deploy and configure Nautobot with Git integration - Onboard existing network devices automatically - Implement Golden Config for compliance and drift detection - Build remediation workflows for non-compliant devices - Create event-driven automation for network changes - Deploy new devices with Zero-Touch Provisioning (ZTP) - Integrate with external tools via APIs</p> <p>Prerequisites: - Basic understanding of networking concepts - Familiarity with Docker and Git - A lab environment (Containerlab recommended)</p> <p>Estimated Time: 8-12 hours across all parts</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#core-series","title":"Core Series","text":"","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#1-part-1-nautobot-as-your-single-source-of-truth-ssot","title":"1. Part 1 \u2013 Nautobot as Your Single Source of Truth (SSoT)","text":"<p>Coming Soon - August 18, 2025</p> <ul> <li>Deploy Nautobot</li> <li>Connect to Git repository</li> <li>Create base inventory</li> <li>Add first Jinja2 template</li> <li>Create and run first Nautobot Job</li> </ul> <p>Estimated Time: ~2 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#2-part-2-onboarding-brownfield-devices-with-the-device-onboarding-app","title":"2. Part 2 \u2013 Onboarding Brownfield Devices with the Device Onboarding App","text":"<p>Coming Soon - August 25, 2025</p> <ul> <li>Install and configure Device Onboarding app</li> <li>Discover existing devices</li> <li>Auto-create devices with platforms, roles, and interfaces</li> <li>Store discovered configs in Git</li> </ul> <p>Estimated Time: ~1.5 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#3-part-3-golden-config-for-intended-configs-compliance","title":"3. Part 3 \u2013 Golden Config for Intended Configs &amp; Compliance","text":"<p>Coming Soon - September 1, 2025</p> <ul> <li>Install Golden Config plugin</li> <li>Configure backup jobs</li> <li>Store intended configs in Git</li> <li>Run compliance reports and detect drift</li> </ul> <p>Estimated Time: ~2 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#4-part-4-remediation-making-devices-compliant","title":"4. Part 4 \u2013 Remediation: Making Devices Compliant","text":"<p>Coming Soon - September 8, 2025</p> <ul> <li>Generate remediation configs (intended, missing, manual)</li> <li>Create a multi-vendor remediation Job</li> <li>Push remediation to devices and re-check compliance</li> </ul> <p>Estimated Time: ~2 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#5-part-5-event-driven-automation-interface-change-jobs","title":"5. Part 5 \u2013 Event-Driven Automation: Interface Change Jobs","text":"<p>Coming Soon - September 15, 2025</p> <ul> <li>Job Hooks on interface changes</li> <li>Sync admin-state, description, VLANs</li> <li>Handle multi-vendor syntax differences</li> </ul> <p>Estimated Time: ~1.5 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#6-part-6-full-device-deployment-ztp-site-validation","title":"6. Part 6 \u2013 Full Device Deployment, ZTP &amp; Site Validation","text":"<p>Coming Soon - September 22, 2025</p> <ul> <li>Push intended configs to startup/running configs</li> <li>Integrate with ZTP server</li> <li>Validate site cabling (LLDP/CDP) and VLAN/IP assignments</li> <li>Force compliance push option</li> <li>Generate site compliance report</li> </ul> <p>Estimated Time: ~2 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#optional-advanced-parts","title":"Optional / Advanced Parts","text":"","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#7-part-7-api-integrations","title":"7. Part 7 \u2013 API Integrations","text":"<p>Publishing: September 29, 2025</p> <ul> <li>Integrating Nautobot Jobs with Infoblox, ISE, and other tools</li> <li>Using REST and GraphQL queries</li> </ul> <p>Estimated Time: ~1.5 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#8-part-8-gitops-style-change-management","title":"8. Part 8 \u2013 GitOps-Style Change Management","text":"<p>Publishing: October 6, 2025</p> <ul> <li>PR \u2192 Review \u2192 Automated Deployment</li> <li>Using Golden Config in a GitOps pipeline</li> </ul> <p>Estimated Time: ~1.5 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#9-part-9-multi-vendor-compliance-pipelines","title":"9. Part 9 \u2013 Multi-Vendor Compliance Pipelines","text":"<p>Publishing: October 13, 2025</p> <ul> <li>Advanced Golden Config with vendor-specific templates</li> <li>Compliance across Cisco, Arista, Juniper</li> </ul> <p>Estimated Time: ~2 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#10-part-10-golden-config-for-firewalls-and-wireless-controllers","title":"10. Part 10 \u2013 Golden Config for Firewalls and Wireless Controllers","text":"<p>Publishing: October 20, 2025</p> <ul> <li>Handling non-switch/router devices</li> <li>Backups, intended configs, and compliance for firewalls and WLCs</li> </ul> <p>Estimated Time: ~1.5 hours</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#lab-setup-reference","title":"Lab Setup Reference","text":"","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#containerlab-lab-deployment","title":"Containerlab Lab Deployment","text":"<p>[Available: Building a Reusable Network Automation Lab with Containerlab]</p> <ul> <li>Build a reusable multi-vendor lab with Containerlab</li> <li>Topology file, device images, and Nautobot + ZTP integration</li> <li>This lab is used for all parts of the series</li> </ul> <p>Estimated Time: ~1 hour</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#getting-started","title":"Getting Started","text":"<ol> <li>Set up your lab environment using the Containerlab guide above</li> <li>Start with Part 1 to deploy Nautobot and create your first inventory</li> <li>Follow each part sequentially as they build upon each other</li> <li>Complete the core series (Parts 1-6) for a production-ready setup</li> <li>Explore advanced topics (Parts 7-10) for additional integrations</li> </ol>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/nautobot-in-action--global-series-index/#support-community","title":"Support &amp; Community","text":"<ul> <li>Questions? Leave a comment on any post</li> <li>Found an issue? Report it in the comments</li> <li>Want to contribute? Submit a pull request to the GitHub repository</li> </ul> <p>Happy automating! \ud83d\ude80</p>","tags":["graphql","network automation","api","jinja2","opsmill","nautobot"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/","title":"Building Your Reusable Network Automation Lab with Containerlab","text":"<p>The standard lab topology used in my Nautobot automation series.</p>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#1-introduction","title":"1. Introduction","text":"<p>A consistent lab environment is essential for learning and testing network automation workflows. This guide creates a reusable Containerlab topology that you can use for all tutorials in the Nautobot automation series.</p> <p>Why Containerlab? - Runs entirely in Docker. - Supports Arista, Nokia, and other network OS images. - Easy to version control and reproduce. - Simulates realistic multi-vendor network environments.</p>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#2-lab-topology-overview","title":"2. Lab Topology Overview","text":"<p>Devices: - 2x Access Switches (<code>access1</code>, <code>access2</code>) - Arista vEOS - 1x Distribution/Core Switch (<code>dist1</code>) - Nokia SR Linux - 1x Router/WAN Edge (<code>rtr1</code>) - Nokia SR Linux - 1x Management Host (<code>mgmt</code>) - Linux container - 1x Nautobot Container (Docker) - 1x ZTP Server (Linux container)</p> <p>Logical Layout: <pre><code>           [rtr1]\n             |\n          [dist1]\n          /     \\\n     [access1] [access2]\n\n     [mgmt] [nautobot] [ztp]\n</code></pre></p> <p>Network Segments: - Data Plane: access1/2 \u2194 dist1 \u2194 rtr1 - Management Plane: All devices on mgmt-net (172.20.20.0/24)</p>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#3-installing-containerlab","title":"3. Installing Containerlab","text":"<p>Prerequisites: - Docker &amp; Docker Compose - At least 8GB RAM - Containerlab installed</p> <pre><code>curl -sL https://get.containerlab.dev | bash\ncontainerlab version\n</code></pre>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#4-getting-network-os-images","title":"4. Getting Network OS Images","text":"<p>Free Downloadable Images: - Arista vEOS-lab - Available from Arista's website - Nokia SR Linux - Available from Nokia's website - Juniper vQFX (optional) - Available from Juniper's website</p> <p>\u26a0\ufe0f Licensing applies. Obtain images legally from vendor websites.</p> <p>Download and Import: <pre><code># Arista vEOS-lab\ndocker import vEOS-lab-4.28.0F.tar.xz arista/veos:4.28.0F\n\n# Nokia SR Linux\ndocker import srlinux-22.11.1.tar.xz nokia/srlinux:22.11.1\n</code></pre></p>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#5-containerlab-topology-file","title":"5. Containerlab Topology File","text":"<p>Save as <code>lab-topology.clab.yml</code>:</p> <pre><code>name: nautobot-lab\ntopology:\n  nodes:\n    access1:\n      kind: vr-veos\n      image: arista/veos:4.28.0F\n    access2:\n      kind: vr-veos\n      image: arista/veos:4.28.0F\n    dist1:\n      kind: nokia_srlinux\n      image: nokia/srlinux:22.11.1\n    rtr1:\n      kind: nokia_srlinux\n      image: nokia/srlinux:22.11.1\n    ztp:\n      kind: linux\n      image: alpine:latest\n    mgmt:\n      kind: linux\n      image: alpine:latest\n  links:\n    - endpoints: [\"access1:eth1\", \"dist1:ethernet-1/1\"]\n    - endpoints: [\"access2:eth1\", \"dist1:ethernet-1/2\"]\n    - endpoints: [\"dist1:ethernet-1/3\", \"rtr1:ethernet-1/1\"]\nmgmt:\n  network: mgmt-net\n  ipv4_subnet: 172.20.20.0/24\n</code></pre>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#6-deploying-the-lab","title":"6. Deploying the Lab","text":"<pre><code>containerlab deploy -t lab-topology.clab.yml\n</code></pre> <p>Verify: <pre><code>containerlab inspect\n</code></pre></p>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#7-configuring-management-access","title":"7. Configuring Management Access","text":"<ul> <li>Assign management IPs to devices.</li> <li>Enable SSH on devices.</li> <li>Use NAT/port-forwarding if needed.</li> </ul> <p>Example (Arista EOS): <pre><code>configure\ninterface Management1\n   ip address 172.20.20.11/24\n   no shutdown\nexit\nmanagement ssh\n   no shutdown\nexit\n</code></pre></p> <p>Example (Nokia SR Linux): <pre><code>enter candidate\n/system network-instance mgmt interface ethernet-1/1\n    ipv4 address 172.20.20.12/24\n    admin-state enable\ncommit stay\n</code></pre></p>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#8-optional-nautobot-ztp-integration","title":"8. Optional: Nautobot &amp; ZTP Integration","text":"<p>Example <code>docker-compose.yml</code>:</p> <pre><code>version: \"3.8\"\nservices:\n  nautobot:\n    # image: networktocode/nautobot:stable\n    # image: bsmeding/nautobot:2.1.9-py3.11\n    container_name: nautobot\n    image: &amp;shared_image bsmeding/nautobot:2.4\n    depends_on:\n      - postgres\n      - redis\n    networks:\n      - mgmt-net\n    ports:\n      - \"8080:8080\"  # Exposes Nautobot on localhost:8080\n    environment:\n      - NAUTOBOT_DEBUG=True\n      - NAUTOBOT_DJANGO_EXTENSIONS_ENABLED=False\n      - NAUTOBOT_DJANGO_TOOLBAR_ENABLED=False\n      - NAUTOBOT_HIDE_RESTRICTED_UI=True\n      - NAUTOBOT_LOG_LEVEL=WARNING\n      - NAUTOBOT_METRICS_ENABLED=False\n      - NAUTOBOT_NAPALM_TIMEOUT=5\n      - NAUTOBOT_MAX_PAGE_SIZE=0\n      - NAUTOBOT_DB_HOST=postgres\n      - NAUTOBOT_DB_PORT=5432\n      - NAUTOBOT_DB_NAME=nautobot\n      - NAUTOBOT_DB_USER=nautobot\n      - NAUTOBOT_DB_PASSWORD=nautobotpassword\n      - NAUTOBOT_ALLOWED_HOSTS=*\n      - NAUTOBOT_REDIS_HOST=redis\n      - NAUTOBOT_REDIS_PORT=6379\n      - NAUTOBOT_SUPERUSER_NAME=admin\n      - NAUTOBOT_SUPERUSER_PASSWORD=admin\n      - NAUTOBOT_SUPERUSER_API_TOKEN=1234567890abcde0987654321\n      - NAUTOBOT_CREATE_SUPERUSER=true\n      - NAUTOBOT_INSTALLATION_METRICS_ENABLED=false\n      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py\n      - NAUTOBOT_CELERY_BROKER_URL=redis://redis:6379/0\n      - NAUTOBOT_SECURE_HSTS_SECONDS=3600\n      - NAUTOBOT_SECURE_SSL_REDIRECT=True\n      - NAUTOBOT_SESSION_COOKIE_SECURE=True\n      - NAUTOBOT_CSRF_COOKIE_SECURE=True\n    volumes:\n      - nautobot_config:/opt/nautobot/\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health/\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 120s\n    command: [\"nautobot-server\", \"runserver\", \"0.0.0.0:8080\"]\n\n\n\n  postgres:\n    image: postgres:13-alpine\n    container_name: postgres\n    command:\n      - \"-c\"\n      - \"max_connections=1000\"\n    networks:\n      - mgmt-net\n    healthcheck:\n      test: \"pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB\"\n      interval: \"10s\"\n      timeout: \"5s\"\n      retries: 10    \n    environment:\n      POSTGRES_USER: nautobot\n      POSTGRES_PASSWORD: nautobotpassword\n      POSTGRES_DB: nautobot\n    volumes:\n      # - ./mapped_folders/postgres-data:/var/lib/postgresql/data             # Not possible with compose due to folder permissions, use docker volume instead  \n      - \"postgres_data:/var/lib/postgresql/data\"\n    restart: unless-stopped\n\n  redis:\n    image: redis:6\n    container_name: redis\n    networks:\n      - mgmt-net\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\n  celery-beat:\n    container_name: nautobot_celery_beat\n    image: *shared_image\n    command: nautobot-server celery beat\n    networks:\n      - mgmt-net\n    depends_on:\n      nautobot:\n        condition: \"service_healthy\"\n    networks:\n      - mgmt-net\n    volumes:\n      - nautobot_config:/opt/nautobot/\n    environment:\n      - NAUTOBOT_DB_HOST=postgres\n      - NAUTOBOT_DB_PORT=5432\n      - NAUTOBOT_DB_NAME=nautobot\n      - NAUTOBOT_DB_USER=nautobot\n      - NAUTOBOT_DB_PASSWORD=nautobotpassword\n      - NAUTOBOT_REDIS_HOST=redis\n      - NAUTOBOT_REDIS_PORT=6379      \n      - NAUTOBOT_CELERY_BROKER_URL=redis://redis:6379/0\n      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py\n\n  celery-worker-1:\n    image: *shared_image\n    container_name: nautobot_celery_worker_1\n    command: nautobot-server celery worker --concurrency=4\n    depends_on:\n      nautobot:\n        condition: \"service_healthy\"\n    networks:\n      - mgmt-net\n    healthcheck:\n      interval: \"30s\"\n      timeout: \"10s\"\n      start_period: \"30s\"\n      retries: 3\n      test:\n        [\n          \"CMD\",\n          \"bash\",\n          \"-c\",\n          \"nautobot-server celery inspect ping --destination celery@$$HOSTNAME\"  ## $$ because of docker-compose\n        ]\n    volumes:\n      - nautobot_config:/opt/nautobot/\n    environment:\n      - NAUTOBOT_DB_HOST=postgres\n      - NAUTOBOT_DB_PORT=5432\n      - NAUTOBOT_DB_NAME=nautobot\n      - NAUTOBOT_DB_USER=nautobot\n      - NAUTOBOT_DB_PASSWORD=nautobotpassword\n      - NAUTOBOT_REDIS_HOST=redis\n      - NAUTOBOT_REDIS_PORT=6379      \n      - NAUTOBOT_CELERY_BROKER_URL=redis://redis:6379/0\n      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py\n\n  ztp:\n    image: alpine:latest\n    networks:\n      - mgmt-net\n\nvolumes:\n  nautobot_config: {}\n  postgres_data: {}\n  redis_data: {}\n\nnetworks:\n  mgmt-net:\n    external: true\n</code></pre>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#9-saving-reusing-the-lab","title":"9. Saving &amp; Reusing the Lab","text":"<p>Save <code>lab-topology.clab.yml</code> to GitHub.</p> <p>Reset Script: <pre><code>#!/bin/bash\ncontainerlab destroy -t lab-topology.clab.yml\ncontainerlab deploy -t lab-topology.clab.yml\n</code></pre></p> <p>Make executable: <pre><code>chmod +x reset.sh\n</code></pre></p>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/building-a-reusable-network-automation-lab-with-containerlab/#10-next-steps","title":"10. Next Steps","text":"<p>Your lab is ready. Continue to Part 1 of the Nautobot series to start using this lab for inventory, compliance, and automation workflows.</p>","tags":["network automation","containerlab","lab","automation","network","automation"]},{"location":"blog/nautobot-in-action--part-1/","title":"Nautobot in Action \u2013 Part 1","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#nautobot-as-your-single-source-of-truth-ssot","title":"Nautobot as Your Single Source of Truth (SSoT)","text":"<p>From zero to a Git-integrated Nautobot environment.</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#index","title":"Index","text":"<ul> <li>Nautobot in Action \u2013 Part 1</li> <li>Nautobot as Your Single Source of Truth (SSoT)</li> <li>Index</li> <li>1. Introduction</li> <li>2. Prerequisites</li> <li>3. Deploy Nautobot</li> <li>4. Create Git Repository<ul> <li>Security Note</li> <li>4.1 Create the Repository</li> <li>4.2 Create Repo Structure</li> <li>4.3 Create a Personal Access Token (PAT)</li> <li>4.4 Store Token in Nautobot</li> </ul> </li> <li>5. Create Base Inventory<ul> <li>Create Location</li> <li>Add Platforms</li> <li>Add Roles</li> <li>Add Devices</li> </ul> </li> <li>6. Store First Template in Git</li> <li>7. Test Template Rendering in Nautobot</li> <li>8. Validation Script</li> <li>9. Wrap-Up</li> <li>10. Next Steps</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#1-introduction","title":"1. Introduction","text":"<p>In this first part of the series, we\u2019ll set up Nautobot as the Single Source of Truth (SSoT) for our lab network.</p> <p>We\u2019ll: 1. Deploy Nautobot. 2. Connect it to our Git repository. 3. Create the base inventory (sites, devices, platforms, roles). 4. Store our first Jinja2 template in Git.</p> <p>Estimated Time: ~2 hours</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Containerlab lab setup</li> <li>Install Nautobot development environment (Docker, Docker Compose, Nautobot)</li> <li>GitHub or GitLab repository (private if external).</li> <li>Docker &amp; Docker Compose installed (see Install Nautobot development environment or use Ansible role bsmeding.docker).</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#3-deploy-nautobot","title":"3. Deploy Nautobot","text":"<p>docker-compose.yml <pre><code>version: \"3.8\"\nservices:\n  nautobot:\n    image: networktocode/nautobot:latest\n    ports:\n      - \"8080:8080\"\n    environment:\n      - NAUTOBOT_CREATE_SUPERUSER=true\n      - NAUTOBOT_SUPERUSER_USERNAME=admin\n      - NAUTOBOT_SUPERUSER_PASSWORD=admin\n      - NAUTOBOT_SUPERUSER_EMAIL=admin@example.com\n    volumes:\n      - nautobot_data:/opt/nautobot\nvolumes:\n  nautobot_data:\n</code></pre></p> <p>Run: <pre><code>docker compose up -d\n</code></pre></p> <p>Access: http://localhost:8080 User: <code>admin</code> / Pass: <code>admin</code></p> <p>\ud83d\udcf8 [Screenshot: Nautobot Login Page Placeholder]</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#4-create-git-repository","title":"4. Create Git Repository","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#security-note","title":"Security Note","text":"<p>If you are not using internally hosted Git, create the repository as private to avoid exposing sensitive data.</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#41-create-the-repository","title":"4.1 Create the Repository","text":"<ol> <li>On GitHub/GitLab: New Repository</li> <li>Name: <code>nautobot-configs</code></li> <li>Visibility: Private</li> </ol>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#42-create-repo-structure","title":"4.2 Create Repo Structure","text":"<pre><code>git clone git@github.com:yourusername/nautobot-configs.git\ncd nautobot-configs\nmkdir templates backups jobs compliance\ngit add .\ngit commit -m \"Initial repo structure\"\ngit push origin main\n</code></pre>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#43-create-a-personal-access-token-pat","title":"4.3 Create a Personal Access Token (PAT)","text":"<ul> <li>GitHub: Settings \u2192 Developer settings \u2192 Personal access tokens \u2192 Tokens (classic) \u2192 <code>repo</code> scope.</li> <li>GitLab: User Settings \u2192 Access Tokens \u2192 <code>read_repository</code> scope.</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#44-store-token-in-nautobot","title":"4.4 Store Token in Nautobot","text":"<p>In Nautobot \u2192 Apps \u2192 Git Repositories \u2192 Add: - Name: <code>nautobot-configs</code> - URL: <code>https://github.com/yourusername/nautobot-configs.git</code> - Branch: <code>main</code> - Username: your Git username - Token: PAT - Enable:   - Templates   - Jobs   - Config Contexts   - Golden Config Templates</p> <p>\ud83d\udcf8 [Screenshot: Git Repo Sync Success Placeholder]</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#5-create-base-inventory","title":"5. Create Base Inventory","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#create-location","title":"Create Location","text":"<ul> <li>Organization \u2192 Locations \u2192 Add \u2192 Name: <code>Lab-Site</code></li> </ul> <p>\ud83d\udcf8 [Screenshot: New Location Placeholder]</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#add-platforms","title":"Add Platforms","text":"<ul> <li>Cisco IOS XE</li> <li>Arista EOS</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#add-roles","title":"Add Roles","text":"<ul> <li>access-switch</li> <li>distribution-switch</li> <li>router</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#add-devices","title":"Add Devices","text":"<p>Match your lab topology.</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#6-store-first-template-in-git","title":"6. Store First Template in Git","text":"<p><code>templates/interface_basic.j2</code>: <pre><code>!\ninterface {{ interface_name }}\n description {{ description }}\n {% if enabled %}\n no shutdown\n {% else %}\n shutdown\n {% endif %}\n!\n</code></pre></p> <p>Commit: <pre><code>git add templates/interface_basic.j2\ngit commit -m \"Add basic interface template\"\ngit push origin main\n</code></pre></p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#7-test-template-rendering-in-nautobot","title":"7. Test Template Rendering in Nautobot","text":"<p>Render the template in: - Config Contexts - Golden Config Intended Config</p> <p>\ud83d\udcf8 [Screenshot: Rendered Template Placeholder]</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#8-validation-script","title":"8. Validation Script","text":"<p><code>jobs/list_devices.py</code>: <pre><code>from nautobot.extras.jobs import Job, register_jobs\nfrom nautobot.dcim.models import Device\n\nclass ListDevices(Job):\n    class Meta:\n        name = \"List All Devices\"\n        description = \"Prints all devices in the inventory.\"\n\n    def run(self):\n        for device in Device.objects.all():\n            self.log_info(f\"{device.name} ({device.role}) - {device.platform}\")\n\nregister_jobs(ListDevices)\n</code></pre></p> <p>Commit: <pre><code>git add jobs/list_devices.py\ngit commit -m \"Add List Devices job\"\ngit push origin main\n</code></pre></p> <p>\ud83d\udcf8 [Screenshot: Job in Nautobot Placeholder]</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#9-wrap-up","title":"9. Wrap-Up","text":"<p>You have: - Deployed Nautobot - Linked it to Git - Created base inventory - Added a Jinja2 template - Created your first job</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-1/#10-next-steps","title":"10. Next Steps","text":"<p>Go to Part 2 \u2013 Onboarding Brownfield Devices with the Device Onboarding App.</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/","title":"Nautobot in Action \u2013 Part 2","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#onboarding-brownfield-devices-with-the-device-onboarding-app","title":"Onboarding Brownfield Devices with the Device Onboarding App","text":"<p>Automatically discover and onboard existing network devices into Nautobot.</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#index","title":"Index","text":"<ul> <li>Nautobot in Action \u2013 Part 2</li> <li>Onboarding Brownfield Devices with the Device Onboarding App</li> <li>Index</li> <li>1. Introduction</li> <li>2. Prerequisites</li> <li>3. Install Device Onboarding App<ul> <li>3.1 Install the Plugin</li> <li>3.2 Add to Configuration</li> <li>3.3 Restart Nautobot</li> </ul> </li> <li>4. Configure Device Discovery<ul> <li>4.1 Access Device Onboarding</li> <li>4.2 Discovery Configuration</li> </ul> </li> <li>5. Run Device Discovery<ul> <li>5.1 Start Discovery Job</li> <li>5.2 Discovery Process</li> </ul> </li> <li>6. Review and Import Devices<ul> <li>6.1 Review Discovered Devices</li> <li>6.2 Import Devices</li> </ul> </li> <li>7. Store Discovered Configs in Git<ul> <li>7.1 Create Backup Job</li> <li>7.2 Store in Git Repository</li> </ul> </li> <li>8. Validation and Testing<ul> <li>8.1 Verify Device Import</li> <li>8.2 Test Configuration Access</li> </ul> </li> <li>9. Wrap-Up<ul> <li>What We Accomplished</li> <li>Key Takeaways</li> </ul> </li> <li>10. Next Steps</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#1-introduction","title":"1. Introduction","text":"<p>In this second part of the series, we'll use the Device Onboarding app to automatically discover and onboard existing network devices into Nautobot. This is essential for brownfield environments where you already have devices in production.</p> <p>We'll: 1. Install and configure the Device Onboarding app 2. Set up device discovery parameters 3. Run discovery against our lab devices 4. Review and import discovered devices 5. Store discovered configurations in Git</p> <p>Estimated Time: ~1.5 hours</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Completed Part 1 of this series</li> <li>Containerlab lab running with network devices</li> <li>Git repository configured in Nautobot</li> <li>Basic understanding of network device management</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#3-install-device-onboarding-app","title":"3. Install Device Onboarding App","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#31-install-the-plugin","title":"3.1 Install the Plugin","text":"<pre><code># In your Nautobot container\npip install nautobot-device-onboarding\n</code></pre>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#32-add-to-configuration","title":"3.2 Add to Configuration","text":"<p>Add to your <code>nautobot_config.py</code>: <pre><code>PLUGINS = [\n    \"nautobot_device_onboarding\",\n]\n\nPLUGINS_CONFIG = {\n    \"nautobot_device_onboarding\": {\n        \"default_platform\": \"cisco_ios\",\n        \"default_site\": \"HQ\",\n        \"default_role\": \"switch\",\n        \"default_status\": \"active\",\n    }\n}\n</code></pre></p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#33-restart-nautobot","title":"3.3 Restart Nautobot","text":"<pre><code>docker compose restart nautobot\n</code></pre>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#4-configure-device-discovery","title":"4. Configure Device Discovery","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#41-access-device-onboarding","title":"4.1 Access Device Onboarding","text":"<ol> <li>Navigate to Plugins &gt; Device Onboarding</li> <li>Click Add Device Onboarding</li> </ol>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#42-discovery-configuration","title":"4.2 Discovery Configuration","text":"<pre><code># Example discovery configuration\ndiscovery_type: \"ip_addresses\"\nip_addresses: \"192.168.1.10-20\"\nplatform: \"cisco_ios\"\nsite: \"HQ\"\nrole: \"switch\"\nstatus: \"active\"\n</code></pre>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#5-run-device-discovery","title":"5. Run Device Discovery","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#51-start-discovery-job","title":"5.1 Start Discovery Job","text":"<ol> <li>Fill in the discovery form</li> <li>Click Submit</li> <li>Monitor the job progress</li> </ol>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#52-discovery-process","title":"5.2 Discovery Process","text":"<p>The app will: - Connect to each IP address - Gather device information - Extract interface details - Collect current configuration</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#6-review-and-import-devices","title":"6. Review and Import Devices","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#61-review-discovered-devices","title":"6.1 Review Discovered Devices","text":"<ol> <li>Check the discovery results</li> <li>Verify device information</li> <li>Review interface details</li> </ol>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#62-import-devices","title":"6.2 Import Devices","text":"<ol> <li>Select devices to import</li> <li>Choose import options</li> <li>Execute import job</li> </ol>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#7-store-discovered-configs-in-git","title":"7. Store Discovered Configs in Git","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#71-create-backup-job","title":"7.1 Create Backup Job","text":"<pre><code># Example backup job for discovered devices\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass BackupDiscoveredDevices(Job):\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n        for device in devices:\n            # Backup configuration\n            self.log_info(f\"Backing up {device.name}\")\n</code></pre>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#72-store-in-git-repository","title":"7.2 Store in Git Repository","text":"<ul> <li>Configurations are automatically stored</li> <li>Version controlled in Git</li> <li>Available for compliance checking</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#8-validation-and-testing","title":"8. Validation and Testing","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#81-verify-device-import","title":"8.1 Verify Device Import","text":"<ul> <li>Check device count in Nautobot</li> <li>Verify interface information</li> <li>Confirm platform assignments</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#82-test-configuration-access","title":"8.2 Test Configuration Access","text":"<ul> <li>Access device configurations</li> <li>Verify Git integration</li> <li>Test template rendering</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#9-wrap-up","title":"9. Wrap-Up","text":"","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#what-we-accomplished","title":"What We Accomplished","text":"<ul> <li>\u2705 Installed Device Onboarding app</li> <li>\u2705 Discovered existing network devices</li> <li>\u2705 Imported devices with proper metadata</li> <li>\u2705 Stored configurations in Git</li> <li>\u2705 Validated the onboarding process</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Device onboarding automates the discovery process</li> <li>Proper configuration ensures accurate device import</li> <li>Git integration provides version control for configs</li> <li>Validation is crucial for production environments</li> </ul>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-2/#10-next-steps","title":"10. Next Steps","text":"<p>In the next part, we'll implement Golden Config for intended configurations and compliance checking. This will build upon our device inventory and stored configurations.</p> <p>Coming up in Part 3: - Install Golden Config plugin - Configure backup jobs - Store intended configs in Git - Run compliance reports and detect drift</p> <p>Ready to move to Part 3? Let's continue building our network automation solution! \ud83d\ude80</p>","tags":["network automation","device onboarding","nautobot","discovery"]},{"location":"blog/nautobot-in-action--part-3/","title":"Nautobot in Action \u2013 Part 3","text":"","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#golden-config-for-intended-configs-compliance","title":"Golden Config for Intended Configs &amp; Compliance","text":"<p>Implement configuration management and compliance checking with Golden Config.</p>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#index","title":"Index","text":"<ul> <li>Nautobot in Action \u2013 Part 3</li> <li>Golden Config for Intended Configs \\&amp; Compliance</li> <li>Index</li> <li>1. Introduction</li> <li>2. Prerequisites</li> <li>3. Install Golden Config Plugin<ul> <li>3.1 Install the Plugin</li> <li>3.2 Add to Configuration</li> <li>3.3 Restart Nautobot</li> </ul> </li> <li>4. Configure Golden Config<ul> <li>4.1 Access Golden Config</li> <li>4.2 Git Repository Configuration</li> </ul> </li> <li>5. Create Intended Config Templates<ul> <li>5.1 Basic Switch Template</li> <li>5.2 Router Template</li> </ul> </li> <li>6. Set Up Backup Jobs<ul> <li>6.1 Create Backup Job</li> <li>6.2 Schedule Backup Jobs</li> </ul> </li> <li>7. Generate Intended Configurations<ul> <li>7.1 Create Intended Config Job</li> <li>7.2 Run Intended Config Generation</li> </ul> </li> <li>8. Run Compliance Reports<ul> <li>8.1 Create Compliance Job</li> <li>8.2 Run Compliance Check</li> </ul> </li> <li>9. Detect Configuration Drift<ul> <li>9.1 Drift Analysis</li> <li>9.2 Drift Remediation</li> </ul> </li> <li>10. Wrap-Up<ul> <li>What We Accomplished</li> <li>Key Takeaways</li> </ul> </li> <li>11. Next Steps</li> </ul>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#1-introduction","title":"1. Introduction","text":"<p>In this third part of the series, we'll implement Golden Config to manage intended configurations and ensure compliance across our network devices. This is a crucial step in maintaining network consistency and detecting unauthorized changes.</p> <p>We'll: 1. Install and configure the Golden Config plugin 2. Create intended configuration templates 3. Set up automated backup jobs 4. Generate intended configurations 5. Run compliance reports and detect drift</p> <p>Estimated Time: ~2 hours</p>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Completed Part 1 and Part 2 of this series</li> <li>Devices imported into Nautobot</li> <li>Git repository configured and working</li> <li>Basic understanding of Jinja2 templating</li> </ul>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#3-install-golden-config-plugin","title":"3. Install Golden Config Plugin","text":"","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#31-install-the-plugin","title":"3.1 Install the Plugin","text":"<pre><code># In your Nautobot container\npip install nautobot-golden-config\n</code></pre>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#32-add-to-configuration","title":"3.2 Add to Configuration","text":"<p>Add to your <code>nautobot_config.py</code>: <pre><code>PLUGINS = [\n    \"naautobot_golden_config\",\n]\n\nPLUGINS_CONFIG = {\n    \"nautobot_golden_config\": {\n        \"enable_backup\": True,\n        \"enable_compliance\": True,\n        \"enable_intended\": True,\n        \"enable_sotagg\": True,\n        \"sot_agg_transposer\": \"nautobot_golden_config.transposers.SoTaggTransposer\",\n        \"default_delimiter\": \".\",\n        \"default_merge_behavior\": \"replace\",\n    }\n}\n</code></pre></p>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#33-restart-nautobot","title":"3.3 Restart Nautobot","text":"<pre><code>docker compose restart nautobot\n</code></pre>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#4-configure-golden-config","title":"4. Configure Golden Config","text":"","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#41-access-golden-config","title":"4.1 Access Golden Config","text":"<ol> <li>Navigate to Plugins &gt; Golden Config</li> <li>Configure the following sections:</li> <li>Backup Jobs</li> <li>Intended Jobs</li> <li>Compliance Jobs</li> </ol>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#42-git-repository-configuration","title":"4.2 Git Repository Configuration","text":"<pre><code># Example Git configuration\ngit_repo: \"https://github.com/yourusername/nautobot-configs.git\"\ngit_username: \"your-username\"\ngit_password: \"your-token\"\ngit_branch: \"main\"\n</code></pre>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#5-create-intended-config-templates","title":"5. Create Intended Config Templates","text":"","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#51-basic-switch-template","title":"5.1 Basic Switch Template","text":"<pre><code>{# templates/switch_base.j2 #}\nhostname {{ device.name }}\n!\ninterface Loopback0\n description Management Loopback\n ip address {{ device.primary_ip4.address.ip }} {{ device.primary_ip4.address.netmask }}\n!\n{% for interface in device.interfaces.all %}\ninterface {{ interface.name }}\n description {{ interface.description|default('') }}\n {% if interface.enabled %}\n  no shutdown\n {% else %}\n  shutdown\n {% endif %}\n{% endfor %}\n!\nend\n</code></pre>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#52-router-template","title":"5.2 Router Template","text":"<pre><code>{# templates/router_base.j2 #}\nhostname {{ device.name }}\n!\ninterface Loopback0\n description Management Loopback\n ip address {{ device.primary_ip4.address.ip }} {{ device.primary_ip4.address.netmask }}\n!\n{% for interface in device.interfaces.all %}\ninterface {{ interface.name }}\n description {{ interface.description|default('') }}\n {% if interface.enabled %}\n  no shutdown\n {% else %}\n  shutdown\n {% endif %}\n{% endfor %}\n!\nrouter ospf 1\n network {{ device.primary_ip4.address.network }} {{ device.primary_ip4.address.wildcard }}\n!\nend\n</code></pre>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#6-set-up-backup-jobs","title":"6. Set Up Backup Jobs","text":"","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#61-create-backup-job","title":"6.1 Create Backup Job","text":"<pre><code># jobs/backup_jobs.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\nfrom nautobot_golden_config.jobs import BackupConfigJob\n\nclass NetworkBackupJob(BackupConfigJob):\n    class Meta:\n        name = \"Network Device Backup\"\n        description = \"Backup configurations for all network devices\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n        for device in devices:\n            try:\n                self.backup_device(device)\n                self.log_success(f\"Backed up {device.name}\")\n            except Exception as e:\n                self.log_warning(f\"Failed to backup {device.name}: {e}\")\n</code></pre>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#62-schedule-backup-jobs","title":"6.2 Schedule Backup Jobs","text":"<ol> <li>Navigate to Jobs &gt; Scheduled Jobs</li> <li>Create a new scheduled job</li> <li>Set frequency (daily recommended)</li> <li>Assign to appropriate devices</li> </ol>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#7-generate-intended-configurations","title":"7. Generate Intended Configurations","text":"","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#71-create-intended-config-job","title":"7.1 Create Intended Config Job","text":"<pre><code># jobs/intended_jobs.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\nfrom nautobot_golden_config.jobs import IntendedConfigJob\n\nclass GenerateIntendedConfigs(IntendedConfigJob):\n    class Meta:\n        name = \"Generate Intended Configurations\"\n        description = \"Generate intended configurations for all devices\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n        for device in devices:\n            try:\n                self.generate_intended_config(device)\n                self.log_success(f\"Generated intended config for {device.name}\")\n            except Exception as e:\n                self.log_warning(f\"Failed to generate config for {device.name}: {e}\")\n</code></pre>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#72-run-intended-config-generation","title":"7.2 Run Intended Config Generation","text":"<ol> <li>Navigate to Jobs &gt; Generate Intended Configurations</li> <li>Select target devices</li> <li>Choose template mapping</li> <li>Execute the job</li> </ol>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#8-run-compliance-reports","title":"8. Run Compliance Reports","text":"","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#81-create-compliance-job","title":"8.1 Create Compliance Job","text":"<pre><code># jobs/compliance_jobs.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\nfrom nautobot_golden_config.jobs import ComplianceJob\n\nclass NetworkComplianceJob(ComplianceJob):\n    class Meta:\n        name = \"Network Compliance Check\"\n        description = \"Check compliance across all network devices\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n        compliant_count = 0\n        total_count = len(devices)\n\n        for device in devices:\n            try:\n                if self.check_compliance(device):\n                    compliant_count += 1\n                    self.log_success(f\"{device.name} is compliant\")\n                else:\n                    self.log_warning(f\"{device.name} is non-compliant\")\n            except Exception as e:\n                self.log_error(f\"Failed to check compliance for {device.name}: {e}\")\n\n        self.log_info(f\"Compliance Summary: {compliant_count}/{total_count} devices compliant\")\n</code></pre>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#82-run-compliance-check","title":"8.2 Run Compliance Check","text":"<ol> <li>Navigate to Jobs &gt; Network Compliance Check</li> <li>Select devices to check</li> <li>Execute the compliance job</li> <li>Review results and reports</li> </ol>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#9-detect-configuration-drift","title":"9. Detect Configuration Drift","text":"","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#91-drift-analysis","title":"9.1 Drift Analysis","text":"<p>Golden Config provides several ways to detect drift:</p> <ol> <li>Visual Diff: Compare intended vs actual configurations</li> <li>Compliance Reports: Automated compliance checking</li> <li>Drift Alerts: Email notifications for non-compliant devices</li> </ol>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#92-drift-remediation","title":"9.2 Drift Remediation","text":"<pre><code># jobs/drift_remediation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass DriftRemediationJob(Job):\n    class Meta:\n        name = \"Drift Remediation\"\n        description = \"Remediate configuration drift\"\n\n    def run(self, data, commit):\n        non_compliant_devices = self.get_non_compliant_devices()\n        for device in non_compliant_devices:\n            self.remediate_device(device)\n</code></pre>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#10-wrap-up","title":"10. Wrap-Up","text":"","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#what-we-accomplished","title":"What We Accomplished","text":"<ul> <li>\u2705 Installed Golden Config plugin</li> <li>\u2705 Created intended configuration templates</li> <li>\u2705 Set up automated backup jobs</li> <li>\u2705 Generated intended configurations</li> <li>\u2705 Implemented compliance checking</li> <li>\u2705 Detected configuration drift</li> </ul>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Golden Config provides comprehensive configuration management</li> <li>Automated backups ensure configuration history</li> <li>Compliance checking detects unauthorized changes</li> <li>Template-based intended configs ensure consistency</li> <li>Drift detection enables proactive network management</li> </ul>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-3/#11-next-steps","title":"11. Next Steps","text":"<p>In the next part, we'll implement remediation workflows to automatically fix non-compliant devices and push intended configurations to the network.</p> <p>Coming up in Part 4: - Generate remediation configurations - Create multi-vendor remediation jobs - Push remediation to devices - Re-check compliance after remediation</p> <p>Ready to move to Part 4? Let's continue building our network automation solution! \ud83d\ude80</p>","tags":["network automation","golden config","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/","title":"Nautobot in Action \u2013 Part 4","text":"","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#remediation-making-devices-compliant","title":"Remediation: Making Devices Compliant","text":"<p>Automatically fix non-compliant devices and push intended configurations to the network.</p>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#index","title":"Index","text":"<ul> <li>Nautobot in Action \u2013 Part 4</li> <li>Remediation: Making Devices Compliant</li> <li>Index</li> <li>1. Introduction</li> <li>2. Prerequisites</li> <li>3. Understanding Remediation Types<ul> <li>3.1 Intended Config Remediation</li> <li>3.2 Missing Config Remediation</li> <li>3.3 Manual Config Remediation</li> </ul> </li> <li>4. Generate Remediation Configurations<ul> <li>4.1 Intended Config Remediation</li> <li>4.2 Missing Config Remediation</li> <li>4.3 Manual Config Remediation</li> </ul> </li> <li>5. Create Multi-Vendor Remediation Job<ul> <li>5.1 Cisco IOS Remediation</li> <li>5.2 Arista EOS Remediation</li> <li>5.3 Juniper JunOS Remediation</li> </ul> </li> <li>6. Push Remediation to Devices<ul> <li>6.1 Safe Deployment Strategy</li> <li>6.2 Rollback Procedures</li> </ul> </li> <li>7. Re-check Compliance After Remediation<ul> <li>7.1 Automated Compliance Verification</li> <li>7.2 Compliance Reporting</li> </ul> </li> <li>8. Advanced Remediation Features<ul> <li>8.1 Conditional Remediation</li> <li>8.2 Batch Remediation</li> </ul> </li> <li>9. Wrap-Up<ul> <li>What We Accomplished</li> <li>Key Takeaways</li> </ul> </li> <li>10. Next Steps</li> </ul>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#1-introduction","title":"1. Introduction","text":"<p>In this fourth part of the series, we'll implement remediation workflows to automatically fix non-compliant devices and push intended configurations to the network. This is where our automation truly shines - not just detecting issues, but fixing them automatically.</p> <p>We'll: 1. Generate different types of remediation configurations 2. Create multi-vendor remediation jobs 3. Push remediation to devices safely 4. Re-check compliance after remediation 5. Implement advanced remediation features</p> <p>Estimated Time: ~2 hours</p>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Completed Part 1, Part 2, and Part 3 of this series</li> <li>Golden Config plugin installed and configured</li> <li>Devices with compliance issues identified</li> <li>Git repository for storing remediation configs</li> </ul>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#3-understanding-remediation-types","title":"3. Understanding Remediation Types","text":"<p>Golden Config provides three types of remediation:</p>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#31-intended-config-remediation","title":"3.1 Intended Config Remediation","text":"<ul> <li>Replaces the entire device configuration with the intended config</li> <li>Use when device has drifted significantly</li> <li>Most comprehensive but potentially disruptive</li> </ul>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#32-missing-config-remediation","title":"3.2 Missing Config Remediation","text":"<ul> <li>Adds only missing configuration elements</li> <li>Preserves existing configuration</li> <li>Safer for production environments</li> </ul>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#33-manual-config-remediation","title":"3.3 Manual Config Remediation","text":"<ul> <li>Custom remediation scripts for specific scenarios</li> <li>Handles vendor-specific requirements</li> <li>Most flexible approach</li> </ul>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#4-generate-remediation-configurations","title":"4. Generate Remediation Configurations","text":"","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#41-intended-config-remediation","title":"4.1 Intended Config Remediation","text":"<pre><code># jobs/intended_remediation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\nfrom nautobot_golden_config.jobs import IntendedConfigJob\n\nclass IntendedRemediationJob(IntendedConfigJob):\n    class Meta:\n        name = \"Intended Config Remediation\"\n        description = \"Replace device configs with intended configurations\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n        for device in devices:\n            try:\n                self.generate_intended_config(device)\n                self.log_success(f\"Generated intended config for {device.name}\")\n            except Exception as e:\n                self.log_warning(f\"Failed to generate config for {device.name}: {e}\")\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#42-missing-config-remediation","title":"4.2 Missing Config Remediation","text":"<pre><code># jobs/missing_remediation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass MissingConfigRemediationJob(Job):\n    class Meta:\n        name = \"Missing Config Remediation\"\n        description = \"Add missing configuration elements\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n        for device in devices:\n            try:\n                missing_config = self.get_missing_config(device)\n                if missing_config:\n                    self.apply_missing_config(device, missing_config)\n                    self.log_success(f\"Applied missing config to {device.name}\")\n            except Exception as e:\n                self.log_warning(f\"Failed to apply missing config to {device.name}: {e}\")\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#43-manual-config-remediation","title":"4.3 Manual Config Remediation","text":"<pre><code># jobs/manual_remediation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass ManualRemediationJob(Job):\n    class Meta:\n        name = \"Manual Config Remediation\"\n        description = \"Custom remediation for specific scenarios\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n        for device in devices:\n            try:\n                custom_config = self.generate_custom_remediation(device)\n                if custom_config:\n                    self.apply_custom_config(device, custom_config)\n                    self.log_success(f\"Applied custom remediation to {device.name}\")\n            except Exception as e:\n                self.log_warning(f\"Failed to apply custom remediation to {device.name}: {e}\")\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#5-create-multi-vendor-remediation-job","title":"5. Create Multi-Vendor Remediation Job","text":"","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#51-cisco-ios-remediation","title":"5.1 Cisco IOS Remediation","text":"<pre><code># jobs/vendor_remediation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass CiscoIOSRemediationJob(Job):\n    class Meta:\n        name = \"Cisco IOS Remediation\"\n        description = \"Remediate Cisco IOS devices\"\n\n    def run(self, data, commit):\n        cisco_devices = Device.objects.filter(\n            platform__name__icontains=\"cisco_ios\",\n            status=\"active\"\n        )\n\n        for device in cisco_devices:\n            try:\n                remediation_config = self.generate_cisco_remediation(device)\n                self.push_cisco_config(device, remediation_config)\n                self.log_success(f\"Remediated {device.name}\")\n            except Exception as e:\n                self.log_warning(f\"Failed to remediate {device.name}: {e}\")\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#52-arista-eos-remediation","title":"5.2 Arista EOS Remediation","text":"<pre><code>class AristaEOSRemediationJob(Job):\n    class Meta:\n        name = \"Arista EOS Remediation\"\n        description = \"Remediate Arista EOS devices\"\n\n    def run(self, data, commit):\n        arista_devices = Device.objects.filter(\n            platform__name__icontains=\"arista_eos\",\n            status=\"active\"\n        )\n\n        for device in arista_devices:\n            try:\n                remediation_config = self.generate_arista_remediation(device)\n                self.push_arista_config(device, remediation_config)\n                self.log_success(f\"Remediated {device.name}\")\n            except Exception as e:\n                self.log_warning(f\"Failed to remediate {device.name}: {e}\")\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#53-juniper-junos-remediation","title":"5.3 Juniper JunOS Remediation","text":"<pre><code>class JuniperJunOSRemediationJob(Job):\n    class Meta:\n        name = \"Juniper JunOS Remediation\"\n        description = \"Remediate Juniper JunOS devices\"\n\n    def run(self, data, commit):\n        juniper_devices = Device.objects.filter(\n            platform__name__icontains=\"juniper_junos\",\n            status=\"active\"\n        )\n\n        for device in juniper_devices:\n            try:\n                remediation_config = self.generate_juniper_remediation(device)\n                self.push_juniper_config(device, remediation_config)\n                self.log_success(f\"Remediated {device.name}\")\n            except Exception as e:\n                self.log_warning(f\"Failed to remediate {device.name}: {e}\")\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#6-push-remediation-to-devices","title":"6. Push Remediation to Devices","text":"","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#61-safe-deployment-strategy","title":"6.1 Safe Deployment Strategy","text":"<pre><code># jobs/safe_deployment.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass SafeRemediationJob(Job):\n    class Meta:\n        name = \"Safe Remediation Deployment\"\n        description = \"Deploy remediation with safety checks\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n\n        for device in devices:\n            try:\n                # Pre-deployment checks\n                if not self.pre_deployment_check(device):\n                    self.log_warning(f\"Skipping {device.name} - failed pre-deployment check\")\n                    continue\n\n                # Backup current config\n                self.backup_current_config(device)\n\n                # Deploy remediation\n                self.deploy_remediation(device)\n\n                # Post-deployment verification\n                if self.post_deployment_check(device):\n                    self.log_success(f\"Successfully remediated {device.name}\")\n                else:\n                    self.rollback_device(device)\n                    self.log_error(f\"Remediation failed for {device.name} - rolled back\")\n\n            except Exception as e:\n                self.log_error(f\"Error during remediation of {device.name}: {e}\")\n                self.rollback_device(device)\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#62-rollback-procedures","title":"6.2 Rollback Procedures","text":"<pre><code>def rollback_device(self, device):\n    \"\"\"Rollback device to previous configuration\"\"\"\n    try:\n        previous_config = self.get_previous_config(device)\n        self.push_config(device, previous_config)\n        self.log_info(f\"Rolled back {device.name} to previous configuration\")\n    except Exception as e:\n        self.log_error(f\"Failed to rollback {device.name}: {e}\")\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#7-re-check-compliance-after-remediation","title":"7. Re-check Compliance After Remediation","text":"","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#71-automated-compliance-verification","title":"7.1 Automated Compliance Verification","text":"<pre><code># jobs/compliance_verification.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass PostRemediationComplianceJob(Job):\n    class Meta:\n        name = \"Post-Remediation Compliance Check\"\n        description = \"Verify compliance after remediation\"\n\n    def run(self, data, commit):\n        remediated_devices = self.get_recently_remediated_devices()\n        compliant_count = 0\n        total_count = len(remediated_devices)\n\n        for device in remediated_devices:\n            try:\n                if self.check_compliance(device):\n                    compliant_count += 1\n                    self.log_success(f\"{device.name} is now compliant\")\n                else:\n                    self.log_warning(f\"{device.name} is still non-compliant\")\n            except Exception as e:\n                self.log_error(f\"Failed to check compliance for {device.name}: {e}\")\n\n        self.log_info(f\"Post-remediation compliance: {compliant_count}/{total_count} devices compliant\")\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#72-compliance-reporting","title":"7.2 Compliance Reporting","text":"<pre><code>def generate_compliance_report(self, devices):\n    \"\"\"Generate detailed compliance report\"\"\"\n    report = {\n        \"total_devices\": len(devices),\n        \"compliant_devices\": 0,\n        \"non_compliant_devices\": 0,\n        \"remediation_required\": [],\n        \"compliance_details\": {}\n    }\n\n    for device in devices:\n        compliance_status = self.check_compliance(device)\n        if compliance_status:\n            report[\"compliant_devices\"] += 1\n        else:\n            report[\"non_compliant_devices\"] += 1\n            report[\"remediation_required\"].append(device.name)\n\n        report[\"compliance_details\"][device.name] = compliance_status\n\n    return report\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#8-advanced-remediation-features","title":"8. Advanced Remediation Features","text":"","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#81-conditional-remediation","title":"8.1 Conditional Remediation","text":"<pre><code># jobs/conditional_remediation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass ConditionalRemediationJob(Job):\n    class Meta:\n        name = \"Conditional Remediation\"\n        description = \"Apply remediation based on conditions\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n\n        for device in devices:\n            try:\n                # Check device conditions\n                if self.should_remediate_device(device):\n                    remediation_type = self.determine_remediation_type(device)\n                    self.apply_conditional_remediation(device, remediation_type)\n                    self.log_success(f\"Applied conditional remediation to {device.name}\")\n                else:\n                    self.log_info(f\"Skipping {device.name} - conditions not met\")\n            except Exception as e:\n                self.log_warning(f\"Failed to apply conditional remediation to {device.name}: {e}\")\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#82-batch-remediation","title":"8.2 Batch Remediation","text":"<pre><code># jobs/batch_remediation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass BatchRemediationJob(Job):\n    class Meta:\n        name = \"Batch Remediation\"\n        description = \"Remediate multiple devices in batches\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n        batch_size = 5  # Process 5 devices at a time\n\n        for i in range(0, len(devices), batch_size):\n            batch = devices[i:i + batch_size]\n            self.log_info(f\"Processing batch {i//batch_size + 1}\")\n\n            for device in batch:\n                try:\n                    self.remediate_device(device)\n                    self.log_success(f\"Remediated {device.name}\")\n                except Exception as e:\n                    self.log_warning(f\"Failed to remediate {device.name}: {e}\")\n\n            # Wait between batches\n            time.sleep(30)\n</code></pre>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#9-wrap-up","title":"9. Wrap-Up","text":"","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#what-we-accomplished","title":"What We Accomplished","text":"<ul> <li>\u2705 Generated different types of remediation configurations</li> <li>\u2705 Created multi-vendor remediation jobs</li> <li>\u2705 Implemented safe deployment strategies</li> <li>\u2705 Added rollback procedures</li> <li>\u2705 Automated compliance verification</li> <li>\u2705 Built advanced remediation features</li> </ul>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Remediation should always include safety checks and rollback procedures</li> <li>Multi-vendor support requires platform-specific handling</li> <li>Batch processing helps manage large-scale deployments</li> <li>Post-remediation verification is crucial for success</li> <li>Conditional remediation provides flexibility for different scenarios</li> </ul>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-4/#10-next-steps","title":"10. Next Steps","text":"<p>In the next part, we'll implement event-driven automation using Job Hooks to automatically respond to network changes and maintain compliance.</p> <p>Coming up in Part 5: - Job Hooks on interface changes - Sync admin-state, description, VLANs - Handle multi-vendor syntax differences - Real-time network automation</p> <p>Ready to move to Part 5? Let's continue building our network automation solution! \ud83d\ude80</p>","tags":["network automation","remediation","compliance","nautobot","configuration management"]},{"location":"blog/nautobot-in-action--part-5/","title":"Nautobot in Action \u2013 Part 5","text":"","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#event-driven-automation-interface-change-jobs","title":"Event-Driven Automation: Interface Change Jobs","text":"<p>Automatically respond to network changes and maintain compliance in real-time.</p>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#index","title":"Index","text":"<ul> <li>Nautobot in Action \u2013 Part 5</li> <li>Event-Driven Automation: Interface Change Jobs</li> <li>Index</li> <li>1. Introduction</li> <li>2. Prerequisites</li> <li>3. Understanding Job Hooks<ul> <li>3.1 Hook Types</li> <li>3.2 Hook Configuration</li> </ul> </li> <li>4. Interface Change Detection<ul> <li>4.1 Interface Status Changes</li> <li>4.2 Interface Description Changes</li> <li>4.3 VLAN Assignment Changes</li> </ul> </li> <li>5. Sync Admin-State Changes<ul> <li>5.1 Multi-Vendor Admin-State Handling</li> <li>5.2 Safe State Transitions</li> </ul> </li> <li>6. Sync Interface Descriptions<ul> <li>6.1 Description Templates</li> <li>6.2 Auto-Generated Descriptions</li> </ul> </li> <li>7. Sync VLAN Assignments<ul> <li>7.1 VLAN Configuration</li> <li>7.2 Trunk Port Management</li> </ul> </li> <li>8. Handle Multi-Vendor Syntax<ul> <li>8.1 Cisco IOS Syntax</li> <li>8.2 Arista EOS Syntax</li> <li>8.3 Juniper JunOS Syntax</li> </ul> </li> <li>9. Real-Time Automation Workflows<ul> <li>9.1 Change Validation</li> <li>9.2 Automated Remediation</li> </ul> </li> <li>10. Wrap-Up<ul> <li>What We Accomplished</li> <li>Key Takeaways</li> </ul> </li> <li>11. Next Steps</li> </ul>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#1-introduction","title":"1. Introduction","text":"<p>In this fifth part of the series, we'll implement event-driven automation using Job Hooks to automatically respond to network changes and maintain compliance in real-time. This is where our automation becomes truly intelligent - responding to changes as they happen.</p> <p>We'll: 1. Set up Job Hooks for interface changes 2. Sync admin-state, descriptions, and VLANs automatically 3. Handle multi-vendor syntax differences 4. Create real-time automation workflows 5. Implement change validation and remediation</p> <p>Estimated Time: ~1.5 hours</p>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Completed Part 1, Part 2, Part 3, and Part 4 of this series</li> <li>Golden Config plugin installed and configured</li> <li>Devices with interfaces configured</li> <li>Understanding of network interface management</li> </ul>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#3-understanding-job-hooks","title":"3. Understanding Job Hooks","text":"<p>Job Hooks in Nautobot allow us to automatically trigger jobs when specific events occur in the system. For interface changes, we can hook into:</p> <ul> <li>Interface creation</li> <li>Interface modification</li> <li>Interface deletion</li> <li>Status changes</li> <li>Configuration changes</li> </ul>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#31-hook-types","title":"3.1 Hook Types","text":"<pre><code># Available hook types for interfaces\nHOOK_TYPES = [\n    \"interface_created\",\n    \"interface_updated\", \n    \"interface_deleted\",\n    \"interface_status_changed\",\n    \"interface_config_changed\"\n]\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#32-hook-configuration","title":"3.2 Hook Configuration","text":"<pre><code># jobs/hooks.py\nfrom nautobot.extras.jobs import Job, JobHookReceiver\nfrom nautobot.dcim.models import Interface\n\nclass InterfaceChangeHook(JobHookReceiver):\n    class Meta:\n        name = \"Interface Change Hook\"\n        description = \"Automatically respond to interface changes\"\n\n    def receive_job_hook(self, change, action, changed_object):\n        \"\"\"Handle interface change events\"\"\"\n        if action == \"interface_updated\":\n            self.handle_interface_update(changed_object)\n        elif action == \"interface_status_changed\":\n            self.handle_status_change(changed_object)\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#4-interface-change-detection","title":"4. Interface Change Detection","text":"","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#41-interface-status-changes","title":"4.1 Interface Status Changes","text":"<pre><code># jobs/interface_status_hook.py\nfrom nautobot.extras.jobs import JobHookReceiver\nfrom nautobot.dcim.models import Interface\n\nclass InterfaceStatusHook(JobHookReceiver):\n    class Meta:\n        name = \"Interface Status Change Hook\"\n        description = \"Detect and respond to interface status changes\"\n\n    def receive_job_hook(self, change, action, changed_object):\n        if action == \"interface_status_changed\":\n            interface = changed_object\n            device = interface.device\n\n            # Log the status change\n            self.log_info(f\"Interface {interface.name} on {device.name} status changed to {interface.enabled}\")\n\n            # Trigger appropriate automation\n            if interface.enabled:\n                self.handle_interface_enabled(interface)\n            else:\n                self.handle_interface_disabled(interface)\n\n    def handle_interface_enabled(self, interface):\n        \"\"\"Handle interface being enabled\"\"\"\n        try:\n            # Sync admin-state to device\n            self.sync_admin_state(interface)\n            self.log_success(f\"Synced admin-state for {interface.name}\")\n        except Exception as e:\n            self.log_warning(f\"Failed to sync admin-state for {interface.name}: {e}\")\n\n    def handle_interface_disabled(self, interface):\n        \"\"\"Handle interface being disabled\"\"\"\n        try:\n            # Sync admin-state to device\n            self.sync_admin_state(interface)\n            self.log_success(f\"Synced admin-state for {interface.name}\")\n        except Exception as e:\n            self.log_warning(f\"Failed to sync admin-state for {interface.name}: {e}\")\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#42-interface-description-changes","title":"4.2 Interface Description Changes","text":"<pre><code># jobs/interface_description_hook.py\nfrom nautobot.extras.jobs import JobHookReceiver\nfrom nautobot.dcim.models import Interface\n\nclass InterfaceDescriptionHook(JobHookReceiver):\n    class Meta:\n        name = \"Interface Description Change Hook\"\n        description = \"Detect and respond to interface description changes\"\n\n    def receive_job_hook(self, change, action, changed_object):\n        if action == \"interface_updated\":\n            interface = changed_object\n\n            # Check if description changed\n            if hasattr(change, 'description') and change.description:\n                self.log_info(f\"Interface {interface.name} description changed to: {interface.description}\")\n                self.sync_interface_description(interface)\n\n    def sync_interface_description(self, interface):\n        \"\"\"Sync interface description to device\"\"\"\n        try:\n            device = interface.device\n            platform = device.platform.name\n\n            if platform == \"cisco_ios\":\n                self.sync_cisco_description(interface)\n            elif platform == \"arista_eos\":\n                self.sync_arista_description(interface)\n            elif platform == \"juniper_junos\":\n                self.sync_juniper_description(interface)\n\n            self.log_success(f\"Synced description for {interface.name}\")\n        except Exception as e:\n            self.log_warning(f\"Failed to sync description for {interface.name}: {e}\")\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#43-vlan-assignment-changes","title":"4.3 VLAN Assignment Changes","text":"<pre><code># jobs/interface_vlan_hook.py\nfrom nautobot.extras.jobs import JobHookReceiver\nfrom nautobot.dcim.models import Interface\n\nclass InterfaceVLANHook(JobHookReceiver):\n    class Meta:\n        name = \"Interface VLAN Change Hook\"\n        description = \"Detect and respond to interface VLAN assignment changes\"\n\n    def receive_job_hook(self, change, action, changed_object):\n        if action == \"interface_updated\":\n            interface = changed_object\n\n            # Check if VLAN assignments changed\n            if hasattr(change, 'untagged_vlan') or hasattr(change, 'tagged_vlans'):\n                self.log_info(f\"Interface {interface.name} VLAN assignments changed\")\n                self.sync_vlan_assignments(interface)\n\n    def sync_vlan_assignments(self, interface):\n        \"\"\"Sync VLAN assignments to device\"\"\"\n        try:\n            device = interface.device\n            platform = device.platform.name\n\n            if platform == \"cisco_ios\":\n                self.sync_cisco_vlans(interface)\n            elif platform == \"arista_eos\":\n                self.sync_arista_vlans(interface)\n            elif platform == \"juniper_junos\":\n                self.sync_juniper_vlans(interface)\n\n            self.log_success(f\"Synced VLAN assignments for {interface.name}\")\n        except Exception as e:\n            self.log_warning(f\"Failed to sync VLAN assignments for {interface.name}: {e}\")\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#5-sync-admin-state-changes","title":"5. Sync Admin-State Changes","text":"","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#51-multi-vendor-admin-state-handling","title":"5.1 Multi-Vendor Admin-State Handling","text":"<pre><code># jobs/admin_state_sync.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Interface\n\nclass AdminStateSyncJob(Job):\n    class Meta:\n        name = \"Admin State Synchronization\"\n        description = \"Sync interface admin-state across vendors\"\n\n    def sync_admin_state(self, interface):\n        \"\"\"Sync admin-state based on vendor platform\"\"\"\n        device = interface.device\n        platform = device.platform.name\n\n        if platform == \"cisco_ios\":\n            return self.sync_cisco_admin_state(interface)\n        elif platform == \"arista_eos\":\n            return self.sync_arista_admin_state(interface)\n        elif platform == \"juniper_junos\":\n            return self.sync_juniper_admin_state(interface)\n        else:\n            self.log_warning(f\"Unsupported platform: {platform}\")\n\n    def sync_cisco_admin_state(self, interface):\n        \"\"\"Sync admin-state for Cisco IOS\"\"\"\n        config_commands = []\n\n        if interface.enabled:\n            config_commands.append(f\"interface {interface.name}\")\n            config_commands.append(\"no shutdown\")\n        else:\n            config_commands.append(f\"interface {interface.name}\")\n            config_commands.append(\"shutdown\")\n\n        return self.push_config(interface.device, config_commands)\n\n    def sync_arista_admin_state(self, interface):\n        \"\"\"Sync admin-state for Arista EOS\"\"\"\n        config_commands = []\n\n        if interface.enabled:\n            config_commands.append(f\"interface {interface.name}\")\n            config_commands.append(\"no shutdown\")\n        else:\n            config_commands.append(f\"interface {interface.name}\")\n            config_commands.append(\"shutdown\")\n\n        return self.push_config(interface.device, config_commands)\n\n    def sync_juniper_admin_state(self, interface):\n        \"\"\"Sync admin-state for Juniper JunOS\"\"\"\n        config_commands = []\n\n        if interface.enabled:\n            config_commands.append(f\"set interfaces {interface.name} disable\")\n        else:\n            config_commands.append(f\"delete interfaces {interface.name} disable\")\n\n        return self.push_config(interface.device, config_commands)\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#52-safe-state-transitions","title":"5.2 Safe State Transitions","text":"<pre><code>def safe_admin_state_transition(self, interface, target_state):\n    \"\"\"Safely transition interface admin-state\"\"\"\n    try:\n        # Pre-transition checks\n        if not self.pre_transition_check(interface):\n            self.log_warning(f\"Pre-transition check failed for {interface.name}\")\n            return False\n\n        # Backup current state\n        current_state = self.get_current_admin_state(interface)\n\n        # Perform transition\n        if target_state:\n            self.enable_interface(interface)\n        else:\n            self.disable_interface(interface)\n\n        # Verify transition\n        if self.verify_admin_state(interface, target_state):\n            self.log_success(f\"Successfully transitioned {interface.name} to {target_state}\")\n            return True\n        else:\n            # Rollback if verification fails\n            self.rollback_admin_state(interface, current_state)\n            self.log_error(f\"Admin state transition failed for {interface.name}\")\n            return False\n\n    except Exception as e:\n        self.log_error(f\"Error during admin state transition: {e}\")\n        return False\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#6-sync-interface-descriptions","title":"6. Sync Interface Descriptions","text":"","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#61-description-templates","title":"6.1 Description Templates","text":"<pre><code># jobs/description_sync.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Interface\n\nclass DescriptionSyncJob(Job):\n    class Meta:\n        name = \"Interface Description Synchronization\"\n        description = \"Sync interface descriptions using templates\"\n\n    def generate_description_template(self, interface):\n        \"\"\"Generate description using template\"\"\"\n        template_vars = {\n            'interface_name': interface.name,\n            'device_name': interface.device.name,\n            'site_name': interface.device.site.name,\n            'role_name': interface.device.role.name,\n            'custom_description': interface.description or ''\n        }\n\n        # Use Jinja2 template for description\n        template = \"\"\"\n        {% if custom_description %}\n        {{ custom_description }}\n        {% else %}\n        {{ device_name }} - {{ interface_name }} - {{ site_name }}\n        {% endif %}\n        \"\"\"\n\n        return self.render_template(template, template_vars)\n\n    def sync_interface_description(self, interface):\n        \"\"\"Sync interface description to device\"\"\"\n        device = interface.device\n        platform = device.platform.name\n\n        description = self.generate_description_template(interface)\n\n        if platform == \"cisco_ios\":\n            return self.sync_cisco_description(interface, description)\n        elif platform == \"arista_eos\":\n            return self.sync_arista_description(interface, description)\n        elif platform == \"juniper_junos\":\n            return self.sync_juniper_description(interface, description)\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#62-auto-generated-descriptions","title":"6.2 Auto-Generated Descriptions","text":"<pre><code>def auto_generate_description(self, interface):\n    \"\"\"Auto-generate description based on interface properties\"\"\"\n    description_parts = []\n\n    # Add device name\n    description_parts.append(interface.device.name)\n\n    # Add interface name\n    description_parts.append(interface.name)\n\n    # Add site information\n    if interface.device.site:\n        description_parts.append(interface.device.site.name)\n\n    # Add role information\n    if interface.device.role:\n        description_parts.append(interface.device.role.name)\n\n    # Add VLAN information\n    if interface.untagged_vlan:\n        description_parts.append(f\"VLAN{interface.untagged_vlan.vid}\")\n\n    if interface.tagged_vlans.exists():\n        vlan_list = [f\"VLAN{v.vid}\" for v in interface.tagged_vlans.all()]\n        description_parts.append(f\"Trunk: {','.join(vlan_list)}\")\n\n    return \" - \".join(description_parts)\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#7-sync-vlan-assignments","title":"7. Sync VLAN Assignments","text":"","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#71-vlan-configuration","title":"7.1 VLAN Configuration","text":"<pre><code># jobs/vlan_sync.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Interface\n\nclass VLANSyncJob(Job):\n    class Meta:\n        name = \"VLAN Assignment Synchronization\"\n        description = \"Sync VLAN assignments to devices\"\n\n    def sync_vlan_assignments(self, interface):\n        \"\"\"Sync VLAN assignments based on vendor platform\"\"\"\n        device = interface.device\n        platform = device.platform.name\n\n        if platform == \"cisco_ios\":\n            return self.sync_cisco_vlans(interface)\n        elif platform == \"arista_eos\":\n            return self.sync_arista_vlans(interface)\n        elif platform == \"juniper_junos\":\n            return self.sync_juniper_vlans(interface)\n\n    def sync_cisco_vlans(self, interface):\n        \"\"\"Sync VLANs for Cisco IOS\"\"\"\n        config_commands = [f\"interface {interface.name}\"]\n\n        if interface.untagged_vlan:\n            # Access port configuration\n            config_commands.append(f\"switchport mode access\")\n            config_commands.append(f\"switchport access vlan {interface.untagged_vlan.vid}\")\n        elif interface.tagged_vlans.exists():\n            # Trunk port configuration\n            config_commands.append(f\"switchport mode trunk\")\n            vlan_list = [str(v.vid) for v in interface.tagged_vlans.all()]\n            config_commands.append(f\"switchport trunk allowed vlan {','.join(vlan_list)}\")\n        else:\n            # No VLAN assignment\n            config_commands.append(f\"no switchport\")\n\n        return self.push_config(interface.device, config_commands)\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#72-trunk-port-management","title":"7.2 Trunk Port Management","text":"<pre><code>def manage_trunk_ports(self, interface):\n    \"\"\"Manage trunk port configuration\"\"\"\n    if not interface.tagged_vlans.exists():\n        return\n\n    device = interface.device\n    platform = device.platform.name\n\n    if platform == \"cisco_ios\":\n        return self.manage_cisco_trunk(interface)\n    elif platform == \"arista_eos\":\n        return self.manage_arista_trunk(interface)\n    elif platform == \"juniper_junos\":\n        return self.manage_juniper_trunk(interface)\n\ndef manage_cisco_trunk(self, interface):\n    \"\"\"Manage Cisco trunk port configuration\"\"\"\n    config_commands = [\n        f\"interface {interface.name}\",\n        \"switchport mode trunk\",\n        \"switchport trunk encapsulation dot1q\"\n    ]\n\n    # Add allowed VLANs\n    vlan_list = [str(v.vid) for v in interface.tagged_vlans.all()]\n    config_commands.append(f\"switchport trunk allowed vlan {','.join(vlan_list)}\")\n\n    # Add native VLAN if specified\n    if interface.untagged_vlan:\n        config_commands.append(f\"switchport trunk native vlan {interface.untagged_vlan.vid}\")\n\n    return self.push_config(interface.device, config_commands)\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#8-handle-multi-vendor-syntax","title":"8. Handle Multi-Vendor Syntax","text":"","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#81-cisco-ios-syntax","title":"8.1 Cisco IOS Syntax","text":"<pre><code># jobs/vendor_syntax.py\nclass CiscoIOSSyntax:\n    \"\"\"Cisco IOS syntax handler\"\"\"\n\n    @staticmethod\n    def interface_config(interface_name):\n        return f\"interface {interface_name}\"\n\n    @staticmethod\n    def description_config(description):\n        return f\"description {description}\"\n\n    @staticmethod\n    def admin_state_config(enabled):\n        if enabled:\n            return \"no shutdown\"\n        else:\n            return \"shutdown\"\n\n    @staticmethod\n    def access_vlan_config(vlan_id):\n        return [\n            \"switchport mode access\",\n            f\"switchport access vlan {vlan_id}\"\n        ]\n\n    @staticmethod\n    def trunk_vlan_config(tagged_vlans, native_vlan=None):\n        config = [\n            \"switchport mode trunk\",\n            \"switchport trunk encapsulation dot1q\"\n        ]\n\n        if tagged_vlans:\n            vlan_list = [str(v.vid) for v in tagged_vlans]\n            config.append(f\"switchport trunk allowed vlan {','.join(vlan_list)}\")\n\n        if native_vlan:\n            config.append(f\"switchport trunk native vlan {native_vlan.vid}\")\n\n        return config\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#82-arista-eos-syntax","title":"8.2 Arista EOS Syntax","text":"<pre><code>class AristaEOSSyntax:\n    \"\"\"Arista EOS syntax handler\"\"\"\n\n    @staticmethod\n    def interface_config(interface_name):\n        return f\"interface {interface_name}\"\n\n    @staticmethod\n    def description_config(description):\n        return f\"description {description}\"\n\n    @staticmethod\n    def admin_state_config(enabled):\n        if enabled:\n            return \"no shutdown\"\n        else:\n            return \"shutdown\"\n\n    @staticmethod\n    def access_vlan_config(vlan_id):\n        return [\n            \"switchport mode access\",\n            f\"switchport access vlan {vlan_id}\"\n        ]\n\n    @staticmethod\n    def trunk_vlan_config(tagged_vlans, native_vlan=None):\n        config = [\n            \"switchport mode trunk\"\n        ]\n\n        if tagged_vlans:\n            vlan_list = [str(v.vid) for v in tagged_vlans]\n            config.append(f\"switchport trunk allowed vlan {','.join(vlan_list)}\")\n\n        if native_vlan:\n            config.append(f\"switchport trunk native vlan {native_vlan.vid}\")\n\n        return config\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#83-juniper-junos-syntax","title":"8.3 Juniper JunOS Syntax","text":"<pre><code>class JuniperJunOSSyntax:\n    \"\"\"Juniper JunOS syntax handler\"\"\"\n\n    @staticmethod\n    def interface_config(interface_name):\n        return f\"set interfaces {interface_name}\"\n\n    @staticmethod\n    def description_config(description):\n        return f\"set interfaces {interface_name} description \\\"{description}\\\"\"\n\n    @staticmethod\n    def admin_state_config(enabled):\n        if enabled:\n            return f\"delete interfaces {interface_name} disable\"\n        else:\n            return f\"set interfaces {interface_name} disable\"\n\n    @staticmethod\n    def access_vlan_config(vlan_id):\n        return [\n            f\"set interfaces {interface_name} unit 0 family ethernet-switching vlan members {vlan_id}\"\n        ]\n\n    @staticmethod\n    def trunk_vlan_config(tagged_vlans, native_vlan=None):\n        config = []\n\n        if tagged_vlans:\n            vlan_list = [str(v.vid) for v in tagged_vlans]\n            config.append(f\"set interfaces {interface_name} unit 0 family ethernet-switching vlan members [{','.join(vlan_list)}]\")\n\n        if native_vlan:\n            config.append(f\"set interfaces {interface_name} unit 0 family ethernet-switching native-vlan-id {native_vlan.vid}\")\n\n        return config\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#9-real-time-automation-workflows","title":"9. Real-Time Automation Workflows","text":"","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#91-change-validation","title":"9.1 Change Validation","text":"<pre><code># jobs/change_validation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Interface\n\nclass ChangeValidationJob(Job):\n    class Meta:\n        name = \"Change Validation\"\n        description = \"Validate interface changes before applying\"\n\n    def validate_interface_change(self, interface, change_type):\n        \"\"\"Validate interface change before applying\"\"\"\n        validation_results = {\n            'valid': True,\n            'warnings': [],\n            'errors': []\n        }\n\n        # Check if device is manageable\n        if not self.is_device_manageable(interface.device):\n            validation_results['valid'] = False\n            validation_results['errors'].append(\"Device is not manageable\")\n\n        # Check if interface exists on device\n        if not self.interface_exists_on_device(interface):\n            validation_results['valid'] = False\n            validation_results['errors'].append(\"Interface does not exist on device\")\n\n        # Check for potential conflicts\n        if change_type == \"vlan_change\":\n            conflicts = self.check_vlan_conflicts(interface)\n            if conflicts:\n                validation_results['warnings'].extend(conflicts)\n\n        # Check for security implications\n        if change_type == \"admin_state_change\":\n            security_checks = self.check_security_implications(interface)\n            if security_checks:\n                validation_results['warnings'].extend(security_checks)\n\n        return validation_results\n\n    def check_vlan_conflicts(self, interface):\n        \"\"\"Check for VLAN configuration conflicts\"\"\"\n        conflicts = []\n\n        # Check for duplicate VLAN assignments\n        if interface.untagged_vlan and interface.tagged_vlans.filter(vid=interface.untagged_vlan.vid).exists():\n            conflicts.append(\"Native VLAN is also in tagged VLANs list\")\n\n        # Check for VLAN existence\n        if interface.untagged_vlan and not self.vlan_exists_on_device(interface.device, interface.untagged_vlan):\n            conflicts.append(f\"Native VLAN {interface.untagged_vlan.vid} does not exist on device\")\n\n        for vlan in interface.tagged_vlans.all():\n            if not self.vlan_exists_on_device(interface.device, vlan):\n                conflicts.append(f\"Tagged VLAN {vlan.vid} does not exist on device\")\n\n        return conflicts\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#92-automated-remediation","title":"9.2 Automated Remediation","text":"<pre><code># jobs/automated_remediation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Interface\n\nclass AutomatedRemediationJob(Job):\n    class Meta:\n        name = \"Automated Remediation\"\n        description = \"Automatically remediate interface issues\"\n\n    def handle_interface_issue(self, interface, issue_type):\n        \"\"\"Handle interface issues automatically\"\"\"\n        try:\n            if issue_type == \"admin_state_mismatch\":\n                self.remediate_admin_state(interface)\n            elif issue_type == \"description_mismatch\":\n                self.remediate_description(interface)\n            elif issue_type == \"vlan_mismatch\":\n                self.remediate_vlan_assignments(interface)\n            elif issue_type == \"configuration_drift\":\n                self.remediate_configuration_drift(interface)\n\n            self.log_success(f\"Successfully remediated {interface.name}\")\n            return True\n\n        except Exception as e:\n            self.log_error(f\"Failed to remediate {interface.name}: {e}\")\n            return False\n\n    def remediate_admin_state(self, interface):\n        \"\"\"Remediate admin state mismatch\"\"\"\n        current_state = self.get_device_admin_state(interface)\n        intended_state = interface.enabled\n\n        if current_state != intended_state:\n            self.sync_admin_state(interface)\n\n    def remediate_description(self, interface):\n        \"\"\"Remediate description mismatch\"\"\"\n        current_description = self.get_device_description(interface)\n        intended_description = self.generate_description_template(interface)\n\n        if current_description != intended_description:\n            self.sync_interface_description(interface)\n\n    def remediate_vlan_assignments(self, interface):\n        \"\"\"Remediate VLAN assignment mismatch\"\"\"\n        current_vlans = self.get_device_vlan_assignments(interface)\n        intended_vlans = self.get_intended_vlan_assignments(interface)\n\n        if current_vlans != intended_vlans:\n            self.sync_vlan_assignments(interface)\n</code></pre>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#10-wrap-up","title":"10. Wrap-Up","text":"","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#what-we-accomplished","title":"What We Accomplished","text":"<ul> <li>\u2705 Set up Job Hooks for interface changes</li> <li>\u2705 Implemented admin-state synchronization</li> <li>\u2705 Created description sync with templates</li> <li>\u2705 Built VLAN assignment management</li> <li>\u2705 Handled multi-vendor syntax differences</li> <li>\u2705 Implemented real-time automation workflows</li> </ul>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Job Hooks enable real-time response to network changes</li> <li>Multi-vendor support requires platform-specific syntax handling</li> <li>Change validation prevents configuration errors</li> <li>Automated remediation maintains compliance</li> <li>Event-driven automation reduces manual intervention</li> </ul>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-5/#11-next-steps","title":"11. Next Steps","text":"<p>In the next part, we'll implement full device deployment with Zero-Touch Provisioning (ZTP) and site validation.</p> <p>Coming up in Part 6: - Push intended configs to startup/running configs - Integrate with ZTP server - Validate site cabling (LLDP/CDP) and VLAN/IP assignments - Force compliance push option - Generate site compliance report</p> <p>Ready to move to Part 6? Let's continue building our network automation solution! \ud83d\ude80</p>","tags":["network automation","event-driven","job hooks","nautobot","real-time automation"]},{"location":"blog/nautobot-in-action--part-6/","title":"Nautobot in Action \u2013 Part 6","text":"","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#full-device-deployment-ztp-site-validation","title":"Full Device Deployment, ZTP &amp; Site Validation","text":"<p>Deploy new devices with Zero-Touch Provisioning and validate site configurations.</p>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#index","title":"Index","text":"<ul> <li>Nautobot in Action \u2013 Part 6</li> <li>Full Device Deployment, ZTP \\&amp; Site Validation</li> <li>Index</li> <li>1. Introduction</li> <li>2. Prerequisites</li> <li>3. Push Intended Configs to Devices<ul> <li>3.1 Full Configuration Deployment</li> <li>3.2 Multi-Vendor Deployment</li> </ul> </li> <li>4. Zero-Touch Provisioning (ZTP) Integration<ul> <li>4.1 ZTP Server Integration</li> <li>4.2 ZTP Template Generation</li> </ul> </li> <li>5. Site Validation<ul> <li>5.1 LLDP/CDP Validation</li> <li>5.2 VLAN and IP Validation</li> </ul> </li> <li>6. Force Compliance Push<ul> <li>6.1 Force Compliance Job</li> <li>6.2 Emergency Remediation</li> </ul> </li> <li>7. Site Compliance Reporting<ul> <li>7.1 Comprehensive Site Report</li> <li>7.2 Report Distribution</li> </ul> </li> <li>8. Wrap-Up<ul> <li>What We Accomplished</li> <li>Key Takeaways</li> </ul> </li> <li>9. Next Steps</li> </ul>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#1-introduction","title":"1. Introduction","text":"<p>In this final part of the core series, we'll implement full device deployment with Zero-Touch Provisioning (ZTP) and comprehensive site validation. This brings our automation solution to production readiness.</p> <p>We'll: 1. Push intended configs to startup/running configs 2. Integrate with ZTP server 3. Validate site cabling (LLDP/CDP) and VLAN/IP assignments 4. Implement force compliance push option 5. Generate site compliance reports</p> <p>Estimated Time: ~2 hours</p>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Completed Parts 1-5 of this series</li> <li>Golden Config plugin configured</li> <li>ZTP server available</li> <li>Network devices with LLDP/CDP enabled</li> </ul>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#3-push-intended-configs-to-devices","title":"3. Push Intended Configs to Devices","text":"","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#31-full-configuration-deployment","title":"3.1 Full Configuration Deployment","text":"<pre><code># jobs/full_deployment.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass FullDeviceDeploymentJob(Job):\n    class Meta:\n        name = \"Full Device Deployment\"\n        description = \"Deploy complete intended configurations to devices\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n\n        for device in devices:\n            try:\n                # Generate intended config\n                intended_config = self.generate_intended_config(device)\n\n                # Push to running config\n                self.push_running_config(device, intended_config)\n\n                # Push to startup config\n                self.push_startup_config(device, intended_config)\n\n                self.log_success(f\"Successfully deployed full config to {device.name}\")\n\n            except Exception as e:\n                self.log_error(f\"Failed to deploy config to {device.name}: {e}\")\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#32-multi-vendor-deployment","title":"3.2 Multi-Vendor Deployment","text":"<pre><code>def push_running_config(self, device, config):\n    \"\"\"Push configuration to running config\"\"\"\n    platform = device.platform.name\n\n    if platform == \"cisco_ios\":\n        return self.push_cisco_running_config(device, config)\n    elif platform == \"arista_eos\":\n        return self.push_arista_running_config(device, config)\n    elif platform == \"juniper_junos\":\n        return self.push_juniper_running_config(device, config)\n\ndef push_startup_config(self, device, config):\n    \"\"\"Push configuration to startup config\"\"\"\n    platform = device.platform.name\n\n    if platform == \"cisco_ios\":\n        return self.push_cisco_startup_config(device, config)\n    elif platform == \"arista_eos\":\n        return self.push_arista_startup_config(device, config)\n    elif platform == \"juniper_junos\":\n        return self.push_juniper_startup_config(device, config)\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#4-zero-touch-provisioning-ztp-integration","title":"4. Zero-Touch Provisioning (ZTP) Integration","text":"","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#41-ztp-server-integration","title":"4.1 ZTP Server Integration","text":"<pre><code># jobs/ztp_integration.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass ZTPIntegrationJob(Job):\n    class Meta:\n        name = \"ZTP Integration\"\n        description = \"Integrate with Zero-Touch Provisioning server\"\n\n    def run(self, data, commit):\n        # Configure ZTP server\n        self.configure_ztp_server()\n\n        # Register devices for ZTP\n        devices = Device.objects.filter(status=\"planned\")\n        for device in devices:\n            self.register_device_for_ztp(device)\n\n        # Monitor ZTP progress\n        self.monitor_ztp_progress()\n\ndef configure_ztp_server(self):\n    \"\"\"Configure ZTP server settings\"\"\"\n    ztp_config = {\n        \"server_url\": \"http://ztp-server:8080\",\n        \"config_template_path\": \"/templates/ztp/\",\n        \"dhcp_server\": \"192.168.1.1\",\n        \"tftp_server\": \"192.168.1.10\"\n    }\n\n    # Apply ZTP configuration\n    self.apply_ztp_configuration(ztp_config)\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#42-ztp-template-generation","title":"4.2 ZTP Template Generation","text":"<pre><code>def generate_ztp_template(self, device):\n    \"\"\"Generate ZTP template for device\"\"\"\n    template_vars = {\n        'device_name': device.name,\n        'management_ip': device.primary_ip4.address.ip,\n        'gateway': device.primary_ip4.address.network.gateway,\n        'site_name': device.site.name,\n        'role_name': device.role.name\n    }\n\n    # Generate platform-specific ZTP template\n    platform = device.platform.name\n    if platform == \"cisco_ios\":\n        return self.generate_cisco_ztp_template(template_vars)\n    elif platform == \"arista_eos\":\n        return self.generate_arista_ztp_template(template_vars)\n    elif platform == \"juniper_junos\":\n        return self.generate_juniper_ztp_template(template_vars)\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#5-site-validation","title":"5. Site Validation","text":"","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#51-lldpcdp-validation","title":"5.1 LLDP/CDP Validation","text":"<pre><code># jobs/site_validation.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device, Site\n\nclass SiteValidationJob(Job):\n    class Meta:\n        name = \"Site Validation\"\n        description = \"Validate site cabling and configurations\"\n\n    def run(self, data, commit):\n        sites = Site.objects.all()\n\n        for site in sites:\n            self.validate_site_cabling(site)\n            self.validate_vlan_assignments(site)\n            self.validate_ip_assignments(site)\n\ndef validate_site_cabling(self, site):\n    \"\"\"Validate site cabling using LLDP/CDP\"\"\"\n    devices = Device.objects.filter(site=site, status=\"active\")\n\n    for device in devices:\n        try:\n            # Collect LLDP/CDP information\n            lldp_neighbors = self.collect_lldp_neighbors(device)\n            cdp_neighbors = self.collect_cdp_neighbors(device)\n\n            # Validate against Nautobot topology\n            self.validate_topology_consistency(device, lldp_neighbors, cdp_neighbors)\n\n        except Exception as e:\n            self.log_warning(f\"Failed to validate cabling for {device.name}: {e}\")\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#52-vlan-and-ip-validation","title":"5.2 VLAN and IP Validation","text":"<pre><code>def validate_vlan_assignments(self, site):\n    \"\"\"Validate VLAN assignments across site\"\"\"\n    devices = Device.objects.filter(site=site, status=\"active\")\n\n    for device in devices:\n        try:\n            # Check VLAN consistency\n            intended_vlans = self.get_intended_vlans(device)\n            actual_vlans = self.get_actual_vlans(device)\n\n            if intended_vlans != actual_vlans:\n                self.log_warning(f\"VLAN mismatch on {device.name}\")\n                self.remediate_vlan_assignments(device)\n\n        except Exception as e:\n            self.log_warning(f\"Failed to validate VLANs for {device.name}: {e}\")\n\ndef validate_ip_assignments(self, site):\n    \"\"\"Validate IP assignments across site\"\"\"\n    devices = Device.objects.filter(site=site, status=\"active\")\n\n    for device in devices:\n        try:\n            # Check IP consistency\n            intended_ips = self.get_intended_ips(device)\n            actual_ips = self.get_actual_ips(device)\n\n            if intended_ips != actual_ips:\n                self.log_warning(f\"IP mismatch on {device.name}\")\n                self.remediate_ip_assignments(device)\n\n        except Exception as e:\n            self.log_warning(f\"Failed to validate IPs for {device.name}: {e}\")\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#6-force-compliance-push","title":"6. Force Compliance Push","text":"","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#61-force-compliance-job","title":"6.1 Force Compliance Job","text":"<pre><code># jobs/force_compliance.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\n\nclass ForceComplianceJob(Job):\n    class Meta:\n        name = \"Force Compliance Push\"\n        description = \"Force push compliance configurations to devices\"\n\n    def run(self, data, commit):\n        devices = Device.objects.filter(status=\"active\")\n\n        for device in devices:\n            try:\n                # Force compliance check\n                if not self.check_compliance(device):\n                    self.log_warning(f\"Device {device.name} is non-compliant, forcing remediation\")\n\n                    # Generate remediation config\n                    remediation_config = self.generate_remediation_config(device)\n\n                    # Force push to device\n                    self.force_push_config(device, remediation_config)\n\n                    # Verify compliance after push\n                    if self.check_compliance(device):\n                        self.log_success(f\"Successfully forced compliance for {device.name}\")\n                    else:\n                        self.log_error(f\"Force compliance failed for {device.name}\")\n\n            except Exception as e:\n                self.log_error(f\"Error during force compliance for {device.name}: {e}\")\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#62-emergency-remediation","title":"6.2 Emergency Remediation","text":"<pre><code>def emergency_remediation(self, device):\n    \"\"\"Emergency remediation for critical devices\"\"\"\n    try:\n        # Backup current configuration\n        self.backup_current_config(device)\n\n        # Generate emergency config\n        emergency_config = self.generate_emergency_config(device)\n\n        # Force push emergency config\n        self.force_push_config(device, emergency_config)\n\n        # Verify device is operational\n        if self.verify_device_operational(device):\n            self.log_success(f\"Emergency remediation successful for {device.name}\")\n            return True\n        else:\n            self.log_error(f\"Emergency remediation failed for {device.name}\")\n            return False\n\n    except Exception as e:\n        self.log_error(f\"Emergency remediation error for {device.name}: {e}\")\n        return False\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#7-site-compliance-reporting","title":"7. Site Compliance Reporting","text":"","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#71-comprehensive-site-report","title":"7.1 Comprehensive Site Report","text":"<pre><code># jobs/site_compliance_report.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Site\n\nclass SiteComplianceReportJob(Job):\n    class Meta:\n        name = \"Site Compliance Report\"\n        description = \"Generate comprehensive site compliance reports\"\n\n    def run(self, data, commit):\n        sites = Site.objects.all()\n\n        for site in sites:\n            report = self.generate_site_report(site)\n            self.save_report(site, report)\n            self.send_report_notification(site, report)\n\ndef generate_site_report(self, site):\n    \"\"\"Generate comprehensive site compliance report\"\"\"\n    devices = Device.objects.filter(site=site, status=\"active\")\n\n    report = {\n        \"site_name\": site.name,\n        \"total_devices\": len(devices),\n        \"compliant_devices\": 0,\n        \"non_compliant_devices\": 0,\n        \"device_details\": {},\n        \"cabling_issues\": [],\n        \"vlan_issues\": [],\n        \"ip_issues\": [],\n        \"overall_compliance\": 0.0\n    }\n\n    for device in devices:\n        device_status = self.check_device_compliance(device)\n        report[\"device_details\"][device.name] = device_status\n\n        if device_status[\"compliant\"]:\n            report[\"compliant_devices\"] += 1\n        else:\n            report[\"non_compliant_devices\"] += 1\n\n    # Calculate overall compliance percentage\n    if report[\"total_devices\"] &gt; 0:\n        report[\"overall_compliance\"] = (report[\"compliant_devices\"] / report[\"total_devices\"]) * 100\n\n    return report\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#72-report-distribution","title":"7.2 Report Distribution","text":"<pre><code>def send_report_notification(self, site, report):\n    \"\"\"Send compliance report notifications\"\"\"\n    if report[\"overall_compliance\"] &lt; 90:\n        # Send alert for low compliance\n        self.send_alert_notification(site, report)\n\n    # Send regular report\n    self.send_regular_report(site, report)\n\ndef send_alert_notification(self, site, report):\n    \"\"\"Send alert for compliance issues\"\"\"\n    alert_message = f\"\"\"\n    ALERT: Site {site.name} Compliance Issues\n\n    Overall Compliance: {report['overall_compliance']:.1f}%\n    Non-compliant devices: {report['non_compliant_devices']}\n\n    Please review and remediate compliance issues.\n    \"\"\"\n\n    # Send via email, Slack, etc.\n    self.send_notification(alert_message)\n</code></pre>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#8-wrap-up","title":"8. Wrap-Up","text":"","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#what-we-accomplished","title":"What We Accomplished","text":"<ul> <li>\u2705 Implemented full device deployment</li> <li>\u2705 Integrated with ZTP server</li> <li>\u2705 Created comprehensive site validation</li> <li>\u2705 Built force compliance push capability</li> <li>\u2705 Generated detailed site compliance reports</li> <li>\u2705 Achieved production-ready automation</li> </ul>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Full deployment requires both running and startup config management</li> <li>ZTP integration enables automated device onboarding</li> <li>Site validation ensures network consistency</li> <li>Force compliance provides emergency remediation options</li> <li>Comprehensive reporting enables proactive management</li> </ul>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-6/#9-next-steps","title":"9. Next Steps","text":"<p>Congratulations! You've completed the core Nautobot automation series. You now have a production-ready network automation solution.</p> <p>Optional Advanced Topics (Parts 7-10): - Part 7: API Integrations with external tools - Part 8: GitOps-style change management - Part 9: Multi-vendor compliance pipelines - Part 10: Golden Config for firewalls and wireless controllers</p> <p>You've successfully built a complete network automation solution! \ud83d\ude80</p>","tags":["network automation","ztp","deployment","site validation","nautobot","compliance"]},{"location":"blog/nautobot-in-action--part-7/","title":"Nautobot in Action \u2013 Part 7","text":"","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#api-integrations","title":"API Integrations","text":"<p>Integrate Nautobot Jobs with Infoblox, ISE, and other external tools using REST and GraphQL.</p>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#index","title":"Index","text":"<ul> <li>Nautobot in Action \u2013 Part 7</li> <li>API Integrations</li> <li>Index</li> <li>1. Introduction</li> <li>2. Prerequisites</li> <li>3. REST API Integration<ul> <li>3.1 Basic REST Client</li> <li>3.2 Authentication Handling</li> </ul> </li> <li>4. GraphQL Integration<ul> <li>4.1 GraphQL Client</li> <li>4.2 Nautobot GraphQL Queries</li> </ul> </li> <li>5. Infoblox Integration<ul> <li>5.1 IP Address Management</li> </ul> </li> <li>6. Cisco ISE Integration<ul> <li>6.1 Network Access Control</li> </ul> </li> <li>7. Other Tool Integrations<ul> <li>7.1 Monitoring Integration</li> <li>7.2 Configuration Management Integration</li> </ul> </li> <li>8. Wrap-Up<ul> <li>What We Accomplished</li> <li>Key Takeaways</li> </ul> </li> </ul>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#1-introduction","title":"1. Introduction","text":"<p>In this advanced part, we'll explore API integrations to connect Nautobot with external tools like Infoblox, Cisco ISE, and other network management systems.</p> <p>Estimated Time: ~1.5 hours</p>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Completed Parts 1-6 of this series</li> <li>Access to external APIs (Infoblox, ISE, etc.)</li> <li>Understanding of REST and GraphQL APIs</li> </ul>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#3-rest-api-integration","title":"3. REST API Integration","text":"","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#31-basic-rest-client","title":"3.1 Basic REST Client","text":"<pre><code># jobs/api_integrations.py\nimport requests\nfrom nautobot.extras.jobs import Job\n\nclass RESTAPIIntegrationJob(Job):\n    class Meta:\n        name = \"REST API Integration\"\n        description = \"Integrate with external REST APIs\"\n\n    def make_rest_call(self, url, method=\"GET\", data=None, headers=None):\n        \"\"\"Make REST API call with error handling\"\"\"\n        try:\n            response = requests.request(\n                method=method,\n                url=url,\n                json=data,\n                headers=headers,\n                timeout=30\n            )\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            self.log_error(f\"REST API call failed: {e}\")\n            return None\n</code></pre>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#32-authentication-handling","title":"3.2 Authentication Handling","text":"<pre><code>def get_auth_token(self, auth_url, credentials):\n    \"\"\"Get authentication token for API access\"\"\"\n    try:\n        response = requests.post(auth_url, json=credentials)\n        response.raise_for_status()\n        return response.json().get('token')\n    except requests.exceptions.RequestException as e:\n        self.log_error(f\"Authentication failed: {e}\")\n        return None\n</code></pre>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#4-graphql-integration","title":"4. GraphQL Integration","text":"","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#41-graphql-client","title":"4.1 GraphQL Client","text":"<pre><code>import requests\n\nclass GraphQLIntegrationJob(Job):\n    class Meta:\n        name = \"GraphQL Integration\"\n        description = \"Integrate with GraphQL APIs\"\n\n    def make_graphql_query(self, url, query, variables=None):\n        \"\"\"Execute GraphQL query\"\"\"\n        try:\n            response = requests.post(\n                url,\n                json={\n                    'query': query,\n                    'variables': variables or {}\n                },\n                headers={'Content-Type': 'application/json'}\n            )\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            self.log_error(f\"GraphQL query failed: {e}\")\n            return None\n</code></pre>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#42-nautobot-graphql-queries","title":"4.2 Nautobot GraphQL Queries","text":"<pre><code>def query_nautobot_devices(self):\n    \"\"\"Query Nautobot devices via GraphQL\"\"\"\n    query = \"\"\"\n    query {\n        devices {\n            name\n            platform {\n                name\n            }\n            site {\n                name\n            }\n            interfaces {\n                name\n                enabled\n                description\n            }\n        }\n    }\n    \"\"\"\n\n    return self.make_graphql_query(\n        \"http://nautobot/graphql/\",\n        query\n    )\n</code></pre>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#5-infoblox-integration","title":"5. Infoblox Integration","text":"","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#51-ip-address-management","title":"5.1 IP Address Management","text":"<pre><code>class InfobloxIntegrationJob(Job):\n    class Meta:\n        name = \"Infoblox Integration\"\n        description = \"Integrate with Infoblox IPAM\"\n\n    def sync_ip_assignments(self):\n        \"\"\"Sync IP assignments between Nautobot and Infoblox\"\"\"\n        # Get IP assignments from Infoblox\n        infoblox_ips = self.get_infoblox_ip_assignments()\n\n        # Get IP assignments from Nautobot\n        nautobot_ips = self.get_nautobot_ip_assignments()\n\n        # Compare and sync differences\n        for device_name, ip_info in infoblox_ips.items():\n            if device_name not in nautobot_ips:\n                self.create_nautobot_ip_assignment(device_name, ip_info)\n\n    def get_infoblox_ip_assignments(self):\n        \"\"\"Get IP assignments from Infoblox\"\"\"\n        url = f\"{self.infoblox_url}/wapi/v2.11/ipv4address\"\n        headers = {'Authorization': f'Basic {self.infoblox_auth}'}\n\n        response = self.make_rest_call(url, headers=headers)\n        return self.parse_infoblox_response(response)\n</code></pre>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#6-cisco-ise-integration","title":"6. Cisco ISE Integration","text":"","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#61-network-access-control","title":"6.1 Network Access Control","text":"<pre><code>class CiscoISEIntegrationJob(Job):\n    class Meta:\n        name = \"Cisco ISE Integration\"\n        description = \"Integrate with Cisco ISE\"\n\n    def sync_device_authentication(self):\n        \"\"\"Sync device authentication status with ISE\"\"\"\n        # Get authentication status from ISE\n        ise_devices = self.get_ise_device_status()\n\n        # Update Nautobot device status\n        for device_name, auth_status in ise_devices.items():\n            self.update_device_auth_status(device_name, auth_status)\n\n    def get_ise_device_status(self):\n        \"\"\"Get device authentication status from ISE\"\"\"\n        url = f\"{self.ise_url}/api/v1/endpoint\"\n        headers = {'Authorization': f'Bearer {self.ise_token}'}\n\n        response = self.make_rest_call(url, headers=headers)\n        return self.parse_ise_response(response)\n</code></pre>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#7-other-tool-integrations","title":"7. Other Tool Integrations","text":"","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#71-monitoring-integration","title":"7.1 Monitoring Integration","text":"<pre><code>class MonitoringIntegrationJob(Job):\n    class Meta:\n        name = \"Monitoring Integration\"\n        description = \"Integrate with monitoring systems\"\n\n    def sync_device_status(self):\n        \"\"\"Sync device status with monitoring systems\"\"\"\n        # Get device status from monitoring\n        monitoring_status = self.get_monitoring_status()\n\n        # Update Nautobot device status\n        for device_name, status in monitoring_status.items():\n            self.update_device_status(device_name, status)\n</code></pre>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#72-configuration-management-integration","title":"7.2 Configuration Management Integration","text":"<pre><code>class ConfigManagementIntegrationJob(Job):\n    class Meta:\n        name = \"Config Management Integration\"\n        description = \"Integrate with configuration management tools\"\n\n    def sync_configurations(self):\n        \"\"\"Sync configurations with external CM tools\"\"\"\n        # Get configurations from external tool\n        external_configs = self.get_external_configs()\n\n        # Compare with Nautobot intended configs\n        for device_name, config in external_configs.items():\n            self.compare_and_sync_config(device_name, config)\n</code></pre>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#8-wrap-up","title":"8. Wrap-Up","text":"","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#what-we-accomplished","title":"What We Accomplished","text":"<ul> <li>\u2705 Implemented REST API integration</li> <li>\u2705 Created GraphQL client for Nautobot</li> <li>\u2705 Integrated with Infoblox IPAM</li> <li>\u2705 Connected with Cisco ISE</li> <li>\u2705 Built monitoring system integration</li> </ul>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-7/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>API integrations enable ecosystem connectivity</li> <li>GraphQL provides efficient data querying</li> <li>Authentication handling is crucial for security</li> <li>Error handling ensures reliability</li> <li>Integration enables end-to-end automation</li> </ul> <p>Ready for GitOps-style change management in Part 8! \ud83d\ude80</p>","tags":["network automation","api","integrations","infoblox","ise","nautobot","graphql"]},{"location":"blog/nautobot-in-action--part-8/","title":"Nautobot in Action \u2013 Part 8","text":"","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#gitops-style-change-management","title":"GitOps-Style Change Management","text":"<p>Implement PR \u2192 Review \u2192 Automated Deployment workflows using Golden Config in a GitOps pipeline.</p>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#index","title":"Index","text":"<ul> <li>Nautobot in Action \u2013 Part 8</li> <li>GitOps-Style Change Management</li> <li>Index</li> <li>1. Introduction</li> <li>2. Prerequisites</li> <li>3. GitOps Workflow Design<ul> <li>3.1 Workflow Overview</li> <li>3.2 Git Repository Structure</li> </ul> </li> <li>4. Pull Request Process<ul> <li>4.1 PR Validation</li> <li>4.2 Template Validation</li> </ul> </li> <li>5. Automated Review<ul> <li>5.1 Configuration Review</li> <li>5.2 Impact Analysis</li> </ul> </li> <li>6. Automated Deployment<ul> <li>6.1 Deployment Pipeline</li> <li>6.2 Staged Deployment</li> </ul> </li> <li>7. Rollback Procedures<ul> <li>7.1 Automated Rollback</li> <li>7.2 Manual Rollback</li> </ul> </li> <li>8. Wrap-Up<ul> <li>What We Accomplished</li> <li>Key Takeaways</li> </ul> </li> </ul>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#1-introduction","title":"1. Introduction","text":"<p>In this advanced part, we'll implement GitOps-style change management with automated PR reviews and deployments using Golden Config.</p> <p>Estimated Time: ~1.5 hours</p>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Completed Parts 1-7 of this series</li> <li>Git repository with CI/CD pipeline</li> <li>Understanding of GitOps principles</li> </ul>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#3-gitops-workflow-design","title":"3. GitOps Workflow Design","text":"","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#31-workflow-overview","title":"3.1 Workflow Overview","text":"<pre><code># jobs/gitops_workflow.py\nfrom nautobot.extras.jobs import Job\n\nclass GitOpsWorkflowJob(Job):\n    class Meta:\n        name = \"GitOps Workflow\"\n        description = \"Manage GitOps-style change workflows\"\n\n    def run(self, data, commit):\n        # 1. Monitor Git repository for changes\n        # 2. Validate pull requests\n        # 3. Run automated tests\n        # 4. Deploy approved changes\n        # 5. Monitor deployment success\n        pass\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#32-git-repository-structure","title":"3.2 Git Repository Structure","text":"<pre><code>nautobot-configs/\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 cisco_ios/\n\u2502   \u251c\u2500\u2500 arista_eos/\n\u2502   \u2514\u2500\u2500 juniper_junos/\n\u251c\u2500\u2500 intended_configs/\n\u251c\u2500\u2500 golden_config/\n\u2514\u2500\u2500 deployment/\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#4-pull-request-process","title":"4. Pull Request Process","text":"","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#41-pr-validation","title":"4.1 PR Validation","text":"<pre><code>def validate_pull_request(self, pr_data):\n    \"\"\"Validate pull request changes\"\"\"\n    validation_results = {\n        'valid': True,\n        'errors': [],\n        'warnings': []\n    }\n\n    # Check template syntax\n    template_errors = self.validate_templates(pr_data['files'])\n    if template_errors:\n        validation_results['errors'].extend(template_errors)\n        validation_results['valid'] = False\n\n    # Check configuration consistency\n    config_errors = self.validate_config_consistency(pr_data['files'])\n    if config_errors:\n        validation_results['warnings'].extend(config_errors)\n\n    return validation_results\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#42-template-validation","title":"4.2 Template Validation","text":"<pre><code>def validate_templates(self, files):\n    \"\"\"Validate Jinja2 templates\"\"\"\n    errors = []\n\n    for file_path in files:\n        if file_path.endswith('.j2'):\n            try:\n                template_content = self.get_file_content(file_path)\n                self.validate_jinja2_syntax(template_content)\n            except Exception as e:\n                errors.append(f\"Template error in {file_path}: {e}\")\n\n    return errors\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#5-automated-review","title":"5. Automated Review","text":"","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#51-configuration-review","title":"5.1 Configuration Review","text":"<pre><code>def automated_config_review(self, pr_data):\n    \"\"\"Perform automated configuration review\"\"\"\n    review_results = {\n        'approved': True,\n        'comments': [],\n        'required_changes': []\n    }\n\n    # Check for security issues\n    security_issues = self.check_security_compliance(pr_data['files'])\n    if security_issues:\n        review_results['comments'].extend(security_issues)\n\n    # Check for best practices\n    best_practice_issues = self.check_best_practices(pr_data['files'])\n    if best_practice_issues:\n        review_results['comments'].extend(best_practice_issues)\n\n    # Check for potential conflicts\n    conflicts = self.check_configuration_conflicts(pr_data['files'])\n    if conflicts:\n        review_results['required_changes'].extend(conflicts)\n        review_results['approved'] = False\n\n    return review_results\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#52-impact-analysis","title":"5.2 Impact Analysis","text":"<pre><code>def analyze_impact(self, pr_data):\n    \"\"\"Analyze impact of configuration changes\"\"\"\n    impact_analysis = {\n        'affected_devices': [],\n        'risk_level': 'low',\n        'estimated_downtime': 0,\n        'rollback_complexity': 'simple'\n    }\n\n    # Identify affected devices\n    affected_devices = self.identify_affected_devices(pr_data['files'])\n    impact_analysis['affected_devices'] = affected_devices\n\n    # Assess risk level\n    risk_level = self.assess_risk_level(affected_devices, pr_data['files'])\n    impact_analysis['risk_level'] = risk_level\n\n    # Estimate downtime\n    downtime = self.estimate_downtime(affected_devices)\n    impact_analysis['estimated_downtime'] = downtime\n\n    return impact_analysis\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#6-automated-deployment","title":"6. Automated Deployment","text":"","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#61-deployment-pipeline","title":"6.1 Deployment Pipeline","text":"<pre><code>def execute_deployment_pipeline(self, pr_data):\n    \"\"\"Execute automated deployment pipeline\"\"\"\n    try:\n        # 1. Pre-deployment checks\n        if not self.pre_deployment_checks(pr_data):\n            raise Exception(\"Pre-deployment checks failed\")\n\n        # 2. Backup current configurations\n        self.backup_current_configs(pr_data['affected_devices'])\n\n        # 3. Deploy changes\n        deployment_results = self.deploy_changes(pr_data)\n\n        # 4. Post-deployment validation\n        if not self.post_deployment_validation(deployment_results):\n            self.rollback_deployment(pr_data)\n            raise Exception(\"Post-deployment validation failed\")\n\n        # 5. Update deployment status\n        self.update_deployment_status(pr_data, 'success')\n\n        return True\n\n    except Exception as e:\n        self.update_deployment_status(pr_data, 'failed', str(e))\n        return False\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#62-staged-deployment","title":"6.2 Staged Deployment","text":"<pre><code>def staged_deployment(self, pr_data):\n    \"\"\"Execute staged deployment for high-risk changes\"\"\"\n    stages = [\n        {'name': 'test', 'devices': pr_data['test_devices']},\n        {'name': 'staging', 'devices': pr_data['staging_devices']},\n        {'name': 'production', 'devices': pr_data['production_devices']}\n    ]\n\n    for stage in stages:\n        self.log_info(f\"Deploying to {stage['name']} stage\")\n\n        # Deploy to stage\n        stage_result = self.deploy_to_stage(stage, pr_data)\n\n        if not stage_result['success']:\n            self.log_error(f\"Deployment failed at {stage['name']} stage\")\n            return False\n\n        # Wait for validation\n        if not self.wait_for_stage_validation(stage):\n            self.log_error(f\"Validation failed at {stage['name']} stage\")\n            return False\n\n    return True\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#7-rollback-procedures","title":"7. Rollback Procedures","text":"","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#71-automated-rollback","title":"7.1 Automated Rollback","text":"<pre><code>def automated_rollback(self, pr_data, reason):\n    \"\"\"Automatically rollback failed deployment\"\"\"\n    try:\n        self.log_warning(f\"Starting automated rollback: {reason}\")\n\n        # Restore from backup\n        for device in pr_data['affected_devices']:\n            self.restore_device_config(device)\n\n        # Verify rollback success\n        rollback_success = self.verify_rollback_success(pr_data['affected_devices'])\n\n        if rollback_success:\n            self.log_success(\"Automated rollback completed successfully\")\n            self.update_deployment_status(pr_data, 'rolled_back')\n        else:\n            self.log_error(\"Automated rollback failed - manual intervention required\")\n            self.trigger_manual_intervention(pr_data)\n\n        return rollback_success\n\n    except Exception as e:\n        self.log_error(f\"Rollback error: {e}\")\n        self.trigger_manual_intervention(pr_data)\n        return False\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#72-manual-rollback","title":"7.2 Manual Rollback","text":"<pre><code>def manual_rollback(self, pr_data):\n    \"\"\"Manual rollback procedure\"\"\"\n    rollback_instructions = {\n        'steps': [\n            \"1. Access Nautobot Golden Config\",\n            \"2. Navigate to previous configuration version\",\n            \"3. Generate rollback configuration\",\n            \"4. Deploy rollback to affected devices\",\n            \"5. Verify network connectivity\"\n        ],\n        'affected_devices': pr_data['affected_devices'],\n        'previous_configs': self.get_previous_configs(pr_data['affected_devices'])\n    }\n\n    return rollback_instructions\n</code></pre>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#8-wrap-up","title":"8. Wrap-Up","text":"","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#what-we-accomplished","title":"What We Accomplished","text":"<ul> <li>\u2705 Implemented GitOps workflow design</li> <li>\u2705 Created automated PR validation</li> <li>\u2705 Built configuration review system</li> <li>\u2705 Developed staged deployment pipeline</li> <li>\u2705 Established rollback procedures</li> </ul>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-8/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>GitOps provides version control for network changes</li> <li>Automated validation prevents configuration errors</li> <li>Staged deployment reduces risk</li> <li>Rollback procedures ensure network stability</li> <li>GitOps enables collaboration and audit trails</li> </ul> <p>Ready for multi-vendor compliance pipelines in Part 9! \ud83d\ude80</p>","tags":["network automation","gitops","change management","nautobot","ci/cd"]},{"location":"blog/nautobot-in-action--part-9/","title":"Nautobot in Action \u2013 Part 9: Advanced Firewall and Wireless Management","text":"<p>Welcome to Part 9 of our Nautobot Zero to Hero series! In this installment, we'll explore advanced firewall and wireless management capabilities within Nautobot, focusing on security policies, wireless network management, and integration with enterprise security frameworks.</p>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#prerequisites","title":"Prerequisites","text":"<ul> <li>Nautobot instance running (from previous parts)</li> <li>Basic understanding of firewall concepts</li> <li>Familiarity with wireless networking</li> <li>Access to firewall and wireless controller APIs</li> </ul>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#advanced-firewall-management","title":"Advanced Firewall Management","text":"","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#1-firewall-device-types-and-models","title":"1. Firewall Device Types and Models","text":"<p>Let's start by creating comprehensive firewall device types:</p> <pre><code># nautobot_jobs/firewall_management.py\nfrom nautobot.extras.jobs import Job, StringVar, ObjectVar\nfrom nautobot.dcim.models import DeviceType, Manufacturer\nfrom nautobot.dcim.models import Device, Interface\nfrom nautobot.ipam.models import IPAddress, Prefix\nfrom nautobot.extras.models import CustomField, CustomFieldChoiceSet\n\nclass FirewallDeviceTypeCreation(Job):\n    \"\"\"Create comprehensive firewall device types for major vendors.\"\"\"\n\n    class Meta:\n        name = \"Firewall Device Type Creation\"\n        description = \"Create device types for Cisco ASA, Palo Alto, and Fortinet firewalls\"\n\n    def run(self, data, commit):\n        manufacturers = {\n            'Cisco': Manufacturer.objects.get_or_create(name='Cisco')[0],\n            'Palo Alto Networks': Manufacturer.objects.get_or_create(name='Palo Alto Networks')[0],\n            'Fortinet': Manufacturer.objects.get_or_create(name='Fortinet')[0],\n        }\n\n        firewall_types = [\n            {\n                'name': 'Cisco ASA 5525-X',\n                'manufacturer': manufacturers['Cisco'],\n                'model': 'ASA5525-X',\n                'part_number': 'ASA5525-X',\n                'u_height': 1,\n                'is_full_depth': True,\n                'subdevice_role': '',\n                'comments': 'Cisco ASA 5525-X Security Appliance'\n            },\n            {\n                'name': 'Palo Alto PA-3220',\n                'manufacturer': manufacturers['Palo Alto Networks'],\n                'model': 'PA-3220',\n                'part_number': 'PA-3220',\n                'u_height': 1,\n                'is_full_depth': True,\n                'subdevice_role': '',\n                'comments': 'Palo Alto Networks PA-3220 Next-Generation Firewall'\n            },\n            {\n                'name': 'Fortinet FortiGate 600E',\n                'manufacturer': manufacturers['Fortinet'],\n                'model': 'FortiGate 600E',\n                'part_number': 'FG-600E',\n                'u_height': 1,\n                'is_full_depth': True,\n                'subdevice_role': '',\n                'comments': 'Fortinet FortiGate 600E Next-Generation Firewall'\n            }\n        ]\n\n        for fw_type in firewall_types:\n            device_type, created = DeviceType.objects.get_or_create(\n                model=fw_type['model'],\n                manufacturer=fw_type['manufacturer'],\n                defaults=fw_type\n            )\n\n            if created:\n                self.log_success(f\"Created device type: {device_type.name}\")\n            else:\n                self.log_info(f\"Device type already exists: {device_type.name}\")\n\n        return \"Firewall device types created successfully\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#2-security-zone-management","title":"2. Security Zone Management","text":"<p>Create security zones and their relationships:</p> <pre><code># nautobot_jobs/security_zones.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device, Interface\nfrom nautobot.ipam.models import IPAddress, Prefix\nfrom nautobot.extras.models import Tag\n\nclass SecurityZoneManagement(Job):\n    \"\"\"Manage security zones and their network assignments.\"\"\"\n\n    class Meta:\n        name = \"Security Zone Management\"\n        description = \"Create and manage security zones for firewall interfaces\"\n\n    def run(self, data, commit):\n        # Define security zones\n        zones = [\n            {'name': 'DMZ', 'description': 'Demilitarized Zone', 'color': 'ff0000'},\n            {'name': 'Internal', 'description': 'Internal Network', 'color': '00ff00'},\n            {'name': 'External', 'description': 'External Network', 'color': '0000ff'},\n            {'name': 'Management', 'description': 'Management Network', 'color': 'ffff00'},\n            {'name': 'Guest', 'description': 'Guest Network', 'color': 'ff00ff'},\n        ]\n\n        zone_tags = {}\n        for zone in zones:\n            tag, created = Tag.objects.get_or_create(\n                name=f\"zone-{zone['name'].lower()}\",\n                defaults={\n                    'description': zone['description'],\n                    'color': zone['color']\n                }\n            )\n            zone_tags[zone['name']] = tag\n\n            if created:\n                self.log_success(f\"Created security zone tag: {tag.name}\")\n\n        # Assign zones to network prefixes\n        zone_assignments = {\n            'DMZ': ['10.0.1.0/24', '10.0.2.0/24'],\n            'Internal': ['192.168.1.0/24', '192.168.2.0/24'],\n            'External': ['203.0.113.0/24'],\n            'Management': ['172.16.1.0/24'],\n            'Guest': ['10.0.100.0/24'],\n        }\n\n        for zone_name, networks in zone_assignments.items():\n            tag = zone_tags[zone_name]\n\n            for network in networks:\n                try:\n                    prefix = Prefix.objects.get(prefix=network)\n                    prefix.tags.add(tag)\n                    self.log_success(f\"Assigned {network} to {zone_name} zone\")\n                except Prefix.DoesNotExist:\n                    self.log_warning(f\"Prefix {network} not found\")\n\n        return \"Security zones configured successfully\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#3-firewall-policy-management","title":"3. Firewall Policy Management","text":"<p>Implement firewall policy management:</p> <pre><code># nautobot_jobs/firewall_policies.py\nfrom nautobot.extras.jobs import Job, StringVar, TextVar\nfrom nautobot.dcim.models import Device\nfrom nautobot.ipam.models import IPAddress, Prefix\nfrom nautobot.extras.models import CustomField, CustomFieldChoiceSet\n\nclass FirewallPolicyManagement(Job):\n    \"\"\"Manage firewall policies and rules.\"\"\"\n\n    class Meta:\n        name = \"Firewall Policy Management\"\n        description = \"Create and manage firewall policies\"\n\n    policy_name = StringVar(\n        description=\"Name of the firewall policy\",\n        required=True\n    )\n\n    source_zone = StringVar(\n        description=\"Source security zone\",\n        required=True\n    )\n\n    destination_zone = StringVar(\n        description=\"Destination security zone\",\n        required=True\n    )\n\n    services = TextVar(\n        description=\"Comma-separated list of services (e.g., HTTP,HTTPS,SSH)\",\n        required=False\n    )\n\n    def run(self, data, commit):\n        policy_name = data['policy_name']\n        source_zone = data['source_zone']\n        destination_zone = data['destination_zone']\n        services = data.get('services', '').split(',') if data.get('services') else []\n\n        # Create custom fields for firewall policies if they don't exist\n        custom_fields = [\n            {\n                'name': 'firewall_policy',\n                'type': 'text',\n                'label': 'Firewall Policy',\n                'description': 'Associated firewall policy'\n            },\n            {\n                'name': 'source_zone',\n                'type': 'text',\n                'label': 'Source Zone',\n                'description': 'Source security zone'\n            },\n            {\n                'name': 'destination_zone',\n                'type': 'text',\n                'label': 'Destination Zone',\n                'description': 'Destination security zone'\n            },\n            {\n                'name': 'allowed_services',\n                'type': 'text',\n                'label': 'Allowed Services',\n                'description': 'Comma-separated list of allowed services'\n            }\n        ]\n\n        for field_data in custom_fields:\n            custom_field, created = CustomField.objects.get_or_create(\n                name=field_data['name'],\n                defaults=field_data\n            )\n\n            if created:\n                self.log_success(f\"Created custom field: {custom_field.name}\")\n\n        # Apply policy to relevant devices\n        firewall_devices = Device.objects.filter(\n            device_type__model__in=['ASA5525-X', 'PA-3220', 'FortiGate 600E']\n        )\n\n        for device in firewall_devices:\n            # Set custom field values\n            device.custom_field_data.update({\n                'firewall_policy': policy_name,\n                'source_zone': source_zone,\n                'destination_zone': destination_zone,\n                'allowed_services': ','.join(services)\n            })\n\n            if commit:\n                device.save()\n                self.log_success(f\"Applied policy {policy_name} to {device.name}\")\n\n        return f\"Firewall policy '{policy_name}' applied successfully\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#wireless-network-management","title":"Wireless Network Management","text":"","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#1-wireless-controller-integration","title":"1. Wireless Controller Integration","text":"<pre><code># nautobot_jobs/wireless_management.py\nfrom nautobot.extras.jobs import Job, StringVar, ObjectVar\nfrom nautobot.dcim.models import Device, Interface\nfrom nautobot.ipam.models import IPAddress, Prefix\nfrom nautobot.extras.models import CustomField\n\nclass WirelessControllerManagement(Job):\n    \"\"\"Manage wireless controllers and access points.\"\"\"\n\n    class Meta:\n        name = \"Wireless Controller Management\"\n        description = \"Configure wireless controllers and access points\"\n\n    controller_name = StringVar(\n        description=\"Name of the wireless controller\",\n        required=True\n    )\n\n    def run(self, data, commit):\n        controller_name = data['controller_name']\n\n        # Create custom fields for wireless management\n        wireless_fields = [\n            {\n                'name': 'wireless_controller',\n                'type': 'text',\n                'label': 'Wireless Controller',\n                'description': 'Associated wireless controller'\n            },\n            {\n                'name': 'ssid',\n                'type': 'text',\n                'label': 'SSID',\n                'description': 'Wireless network SSID'\n            },\n            {\n                'name': 'wireless_security',\n                'type': 'text',\n                'label': 'Security Type',\n                'description': 'Wireless security type (WPA2, WPA3, etc.)'\n            },\n            {\n                'name': 'channel',\n                'type': 'integer',\n                'label': 'Channel',\n                'description': 'Wireless channel'\n            }\n        ]\n\n        for field_data in wireless_fields:\n            custom_field, created = CustomField.objects.get_or_create(\n                name=field_data['name'],\n                defaults=field_data\n            )\n\n            if created:\n                self.log_success(f\"Created wireless field: {custom_field.name}\")\n\n        # Configure wireless access points\n        ap_devices = Device.objects.filter(\n            device_type__model__icontains='AP'\n        )\n\n        for ap in ap_devices:\n            ap.custom_field_data.update({\n                'wireless_controller': controller_name,\n                'ssid': f'Corporate-{ap.site.slug}',\n                'wireless_security': 'WPA2-Enterprise',\n                'channel': 6  # Default channel\n            })\n\n            if commit:\n                ap.save()\n                self.log_success(f\"Configured AP {ap.name} with controller {controller_name}\")\n\n        return f\"Wireless controller {controller_name} configured successfully\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#2-ssid-and-vlan-management","title":"2. SSID and VLAN Management","text":"<pre><code># nautobot_jobs/ssid_vlan_management.py\nfrom nautobot.extras.jobs import Job, StringVar, IntegerVar\nfrom nautobot.ipam.models import VLAN, Prefix\nfrom nautobot.extras.models import Tag\n\nclass SSIDVLANManagement(Job):\n    \"\"\"Manage SSIDs and their associated VLANs.\"\"\"\n\n    class Meta:\n        name = \"SSID and VLAN Management\"\n        description = \"Create SSIDs and associate them with VLANs\"\n\n    ssid_name = StringVar(\n        description=\"Name of the SSID\",\n        required=True\n    )\n\n    vlan_id = IntegerVar(\n        description=\"VLAN ID for the SSID\",\n        required=True\n    )\n\n    def run(self, data, commit):\n        ssid_name = data['ssid_name']\n        vlan_id = data['vlan_id']\n\n        # Create VLAN for the SSID\n        vlan, created = VLAN.objects.get_or_create(\n            vid=vlan_id,\n            defaults={\n                'name': f'SSID-{ssid_name}',\n                'description': f'VLAN for SSID {ssid_name}'\n            }\n        )\n\n        if created:\n            self.log_success(f\"Created VLAN {vlan_id} for SSID {ssid_name}\")\n\n        # Create tag for the SSID\n        ssid_tag, created = Tag.objects.get_or_create(\n            name=f'ssid-{ssid_name.lower().replace(\" \", \"-\")}',\n            defaults={\n                'description': f'SSID: {ssid_name}',\n                'color': '00ff00'\n            }\n        )\n\n        if created:\n            self.log_success(f\"Created SSID tag: {ssid_tag.name}\")\n\n        # Associate VLAN with SSID tag\n        vlan.tags.add(ssid_tag)\n\n        return f\"SSID {ssid_name} configured with VLAN {vlan_id}\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#security-compliance-and-auditing","title":"Security Compliance and Auditing","text":"","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#1-security-policy-compliance","title":"1. Security Policy Compliance","text":"<pre><code># nautobot_jobs/security_compliance.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device, Interface\nfrom nautobot.ipam.models import IPAddress\nfrom nautobot.extras.models import Tag\n\nclass SecurityComplianceAudit(Job):\n    \"\"\"Audit security compliance across the network.\"\"\"\n\n    class Meta:\n        name = \"Security Compliance Audit\"\n        description = \"Audit network devices for security compliance\"\n\n    def run(self, data, commit):\n        compliance_issues = []\n\n        # Check for devices without security tags\n        security_tag = Tag.objects.filter(name='security-audited').first()\n\n        if not security_tag:\n            security_tag = Tag.objects.create(\n                name='security-audited',\n                description='Device has been security audited',\n                color='00ff00'\n            )\n\n        # Audit firewall devices\n        firewall_devices = Device.objects.filter(\n            device_type__model__in=['ASA5525-X', 'PA-3220', 'FortiGate 600E']\n        )\n\n        for device in firewall_devices:\n            if security_tag not in device.tags.all():\n                compliance_issues.append(f\"Firewall {device.name} not security audited\")\n\n                if commit:\n                    device.tags.add(security_tag)\n                    self.log_success(f\"Added security audit tag to {device.name}\")\n\n        # Check for management interfaces\n        for device in Device.objects.all():\n            mgmt_interfaces = device.interfaces.filter(name__icontains='mgmt')\n\n            if not mgmt_interfaces.exists():\n                compliance_issues.append(f\"Device {device.name} has no management interface\")\n\n        # Check for default passwords (simplified check)\n        for device in Device.objects.all():\n            if device.custom_field_data.get('default_password', False):\n                compliance_issues.append(f\"Device {device.name} may have default password\")\n\n        if compliance_issues:\n            self.log_warning(f\"Found {len(compliance_issues)} compliance issues\")\n            for issue in compliance_issues:\n                self.log_warning(issue)\n        else:\n            self.log_success(\"All devices pass security compliance audit\")\n\n        return f\"Security audit completed. Found {len(compliance_issues)} issues.\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#integration-with-security-frameworks","title":"Integration with Security Frameworks","text":"","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#1-nist-cybersecurity-framework-integration","title":"1. NIST Cybersecurity Framework Integration","text":"<pre><code># nautobot_jobs/nist_compliance.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\nfrom nautobot.extras.models import Tag, CustomField\n\nclass NISTComplianceFramework(Job):\n    \"\"\"Implement NIST Cybersecurity Framework controls.\"\"\"\n\n    class Meta:\n        name = \"NIST Cybersecurity Framework\"\n        description = \"Implement NIST CSF controls in Nautobot\"\n\n    def run(self, data, commit):\n        # NIST CSF Functions\n        nist_functions = [\n            'IDENTIFY', 'PROTECT', 'DETECT', 'RESPOND', 'RECOVER'\n        ]\n\n        # Create NIST function tags\n        nist_tags = {}\n        for function in nist_functions:\n            tag, created = Tag.objects.get_or_create(\n                name=f'nist-{function.lower()}',\n                defaults={\n                    'description': f'NIST CSF Function: {function}',\n                    'color': 'ff6600'\n                }\n            )\n            nist_tags[function] = tag\n\n            if created:\n                self.log_success(f\"Created NIST tag: {tag.name}\")\n\n        # Create custom fields for NIST compliance\n        nist_fields = [\n            {\n                'name': 'nist_identify_score',\n                'type': 'integer',\n                'label': 'NIST Identify Score',\n                'description': 'NIST Identify function compliance score (0-100)'\n            },\n            {\n                'name': 'nist_protect_score',\n                'type': 'integer',\n                'label': 'NIST Protect Score',\n                'description': 'NIST Protect function compliance score (0-100)'\n            },\n            {\n                'name': 'nist_detect_score',\n                'type': 'integer',\n                'label': 'NIST Detect Score',\n                'description': 'NIST Detect function compliance score (0-100)'\n            },\n            {\n                'name': 'nist_respond_score',\n                'type': 'integer',\n                'label': 'NIST Respond Score',\n                'description': 'NIST Respond function compliance score (0-100)'\n            },\n            {\n                'name': 'nist_recover_score',\n                'type': 'integer',\n                'label': 'NIST Recover Score',\n                'description': 'NIST Recover function compliance score (0-100)'\n            }\n        ]\n\n        for field_data in nist_fields:\n            custom_field, created = CustomField.objects.get_or_create(\n                name=field_data['name'],\n                defaults=field_data\n            )\n\n            if created:\n                self.log_success(f\"Created NIST field: {custom_field.name}\")\n\n        # Apply NIST tags to devices based on their role\n        for device in Device.objects.all():\n            device_tags = []\n\n            # Firewalls get PROTECT tag\n            if device.device_type.model in ['ASA5525-X', 'PA-3220', 'FortiGate 600E']:\n                device_tags.append(nist_tags['PROTECT'])\n\n            # Monitoring devices get DETECT tag\n            if 'monitor' in device.name.lower() or 'sensor' in device.name.lower():\n                device_tags.append(nist_tags['DETECT'])\n\n            # Management devices get IDENTIFY tag\n            if 'mgmt' in device.name.lower() or 'admin' in device.name.lower():\n                device_tags.append(nist_tags['IDENTIFY'])\n\n            # Add tags to device\n            for tag in device_tags:\n                if tag not in device.tags.all():\n                    device.tags.add(tag)\n                    self.log_success(f\"Added {tag.name} to {device.name}\")\n\n        return \"NIST Cybersecurity Framework implemented successfully\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#wrap-up","title":"Wrap-Up","text":"<p>In this part, we've explored advanced firewall and wireless management capabilities within Nautobot:</p>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#key-takeaways","title":"Key Takeaways:","text":"<ol> <li> <p>Comprehensive Firewall Management: Created device types for major firewall vendors and implemented security zone management.</p> </li> <li> <p>Policy-Based Security: Implemented firewall policy management with custom fields for tracking security rules.</p> </li> <li> <p>Wireless Network Integration: Added wireless controller management and SSID/VLAN configuration.</p> </li> <li> <p>Security Compliance: Built auditing capabilities for security compliance and NIST framework integration.</p> </li> <li> <p>Enterprise Security: Integrated with enterprise security frameworks for comprehensive security management.</p> </li> </ol>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#next-steps","title":"Next Steps:","text":"<ul> <li>Part 10: We'll conclude our series with advanced automation, API integrations, and best practices for production deployment.</li> </ul>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-9/#resources","title":"Resources:","text":"<ul> <li>NIST Cybersecurity Framework</li> <li>Cisco ASA Configuration Guide</li> <li>Palo Alto Networks Documentation</li> <li>Fortinet Documentation</li> </ul> <p>Stay tuned for the final installment where we'll bring everything together and explore advanced automation techniques! \ud83d\ude80</p>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/","title":"Nautobot in Action \u2013 Part 10: Advanced Automation and Production Deployment","text":"<p>Welcome to the final installment of our Nautobot Zero to Hero series! In this concluding part, we'll explore advanced automation techniques, API integrations, monitoring, and best practices for production deployment. We'll bring together all the concepts from previous parts and create a comprehensive, enterprise-ready Nautobot solution.</p>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete Nautobot instance (from previous parts)</li> <li>Understanding of all previous concepts</li> <li>Basic knowledge of monitoring and observability</li> <li>Familiarity with CI/CD pipelines</li> </ul>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#advanced-automation-and-orchestration","title":"Advanced Automation and Orchestration","text":"","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#1-multi-vendor-configuration-management","title":"1. Multi-Vendor Configuration Management","text":"<p>Let's create a comprehensive configuration management system that works across multiple vendors:</p> <pre><code># nautobot_jobs/multi_vendor_config.py\nfrom nautobot.extras.jobs import Job, StringVar, ObjectVar, BooleanVar\nfrom nautobot.dcim.models import Device, DeviceType, Manufacturer\nfrom nautobot.ipam.models import IPAddress, Prefix, VLAN\nfrom nautobot.extras.models import CustomField, Tag\nimport json\nimport yaml\n\nclass MultiVendorConfigurationManager(Job):\n    \"\"\"Advanced configuration management for multiple vendors.\"\"\"\n\n    class Meta:\n        name = \"Multi-Vendor Configuration Manager\"\n        description = \"Generate and manage configurations for Cisco, Juniper, and Arista devices\"\n\n    device_filter = StringVar(\n        description=\"Device filter (e.g., 'cisco', 'juniper', 'arista')\",\n        required=False\n    )\n\n    config_type = StringVar(\n        description=\"Configuration type (interfaces, routing, security)\",\n        required=True\n    )\n\n    dry_run = BooleanVar(\n        description=\"Dry run mode (don't apply changes)\",\n        default=True\n    )\n\n    def run(self, data, commit):\n        device_filter = data.get('device_filter', '').lower()\n        config_type = data['config_type']\n        dry_run = data['dry_run']\n\n        # Vendor-specific configuration templates\n        config_templates = {\n            'cisco': {\n                'interfaces': self._generate_cisco_interface_config,\n                'routing': self._generate_cisco_routing_config,\n                'security': self._generate_cisco_security_config\n            },\n            'juniper': {\n                'interfaces': self._generate_juniper_interface_config,\n                'routing': self._generate_juniper_routing_config,\n                'security': self._generate_juniper_security_config\n            },\n            'arista': {\n                'interfaces': self._generate_arista_interface_config,\n                'routing': self._generate_arista_routing_config,\n                'security': self._generate_arista_security_config\n            }\n        }\n\n        # Get devices based on filter\n        devices = Device.objects.all()\n        if device_filter:\n            devices = devices.filter(\n                device_type__manufacturer__name__icontains=device_filter\n            )\n\n        configurations = {}\n\n        for device in devices:\n            vendor = self._get_device_vendor(device)\n\n            if vendor in config_templates and config_type in config_templates[vendor]:\n                config_generator = config_templates[vendor][config_type]\n                config = config_generator(device)\n\n                if config:\n                    configurations[device.name] = {\n                        'vendor': vendor,\n                        'config_type': config_type,\n                        'configuration': config,\n                        'device': device\n                    }\n\n                    self.log_success(f\"Generated {config_type} config for {device.name}\")\n\n        # Store configurations in custom fields\n        if not dry_run and commit:\n            for device_name, config_data in configurations.items():\n                device = config_data['device']\n\n                # Store configuration in custom field\n                device.custom_field_data.update({\n                    f'last_{config_type}_config': json.dumps(config_data['configuration']),\n                    f'{config_type}_config_generated': True\n                })\n                device.save()\n\n                self.log_success(f\"Applied {config_type} configuration to {device_name}\")\n\n        return f\"Generated {len(configurations)} {config_type} configurations\"\n\n    def _get_device_vendor(self, device):\n        \"\"\"Determine vendor from device type.\"\"\"\n        manufacturer = device.device_type.manufacturer.name.lower()\n\n        if 'cisco' in manufacturer:\n            return 'cisco'\n        elif 'juniper' in manufacturer:\n            return 'juniper'\n        elif 'arista' in manufacturer:\n            return 'arista'\n        else:\n            return 'unknown'\n\n    def _generate_cisco_interface_config(self, device):\n        \"\"\"Generate Cisco interface configuration.\"\"\"\n        config_lines = []\n\n        for interface in device.interfaces.all():\n            if interface.type == '1000base-t':\n                config_lines.extend([\n                    f\"interface {interface.name}\",\n                    \" description Auto-generated by Nautobot\",\n                    \" switchport mode access\",\n                    \" switchport access vlan 10\",\n                    \" spanning-tree portfast\",\n                    \" spanning-tree bpduguard enable\",\n                    \"!\"\n                ])\n\n        return \"\\n\".join(config_lines)\n\n    def _generate_juniper_interface_config(self, device):\n        \"\"\"Generate Juniper interface configuration.\"\"\"\n        config_lines = []\n\n        for interface in device.interfaces.all():\n            if interface.type == '1000base-t':\n                config_lines.extend([\n                    f\"interfaces {{\",\n                    f\"    {interface.name} {{\",\n                    f\"        description \\\"Auto-generated by Nautobot\\\";\",\n                    f\"        unit 0 {{\",\n                    f\"            family ethernet-switching {{\",\n                    f\"                vlan {{\",\n                    f\"                    members vlan-10;\",\n                    f\"                }}\",\n                    f\"            }}\",\n                    f\"        }}\",\n                    f\"    }}\",\n                    f\"}}\"\n                ])\n\n        return \"\\n\".join(config_lines)\n\n    def _generate_arista_interface_config(self, device):\n        \"\"\"Generate Arista interface configuration.\"\"\"\n        config_lines = []\n\n        for interface in device.interfaces.all():\n            if interface.type == '1000base-t':\n                config_lines.extend([\n                    f\"interface {interface.name}\",\n                    \" description Auto-generated by Nautobot\",\n                    \" switchport mode access\",\n                    \" switchport access vlan 10\",\n                    \" spanning-tree portfast\",\n                    \" spanning-tree bpduguard enable\",\n                    \"!\"\n                ])\n\n        return \"\\n\".join(config_lines)\n\n    # Additional configuration generators for routing and security...\n    def _generate_cisco_routing_config(self, device):\n        return \"router ospf 1\\n network 192.168.0.0 0.0.255.255 area 0\"\n\n    def _generate_juniper_routing_config(self, device):\n        return \"protocols {\\n    ospf {\\n        area 0.0.0.0 {\\n            interface ge-0/0/0.0;\\n        }\\n    }\\n}\"\n\n    def _generate_arista_routing_config(self, device):\n        return \"router ospf 1\\n network 192.168.0.0/16 area 0\"\n\n    def _generate_cisco_security_config(self, device):\n        return \"access-list 100 permit ip any any\"\n\n    def _generate_juniper_security_config(self, device):\n        return \"firewall {\\n    filter default {\\n        term allow-all {\\n            then accept;\\n        }\\n    }\\n}\"\n\n    def _generate_arista_security_config(self, device):\n        return \"ip access-list standard default\\n permit any\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#2-automated-network-validation","title":"2. Automated Network Validation","text":"<p>Create a comprehensive network validation system:</p> <pre><code># nautobot_jobs/network_validation.py\nfrom nautobot.extras.jobs import Job, StringVar, BooleanVar\nfrom nautobot.dcim.models import Device, Interface, Cable\nfrom nautobot.ipam.models import IPAddress, Prefix, VLAN\nfrom nautobot.extras.models import Tag\nimport ipaddress\n\nclass NetworkValidationEngine(Job):\n    \"\"\"Comprehensive network validation and health checks.\"\"\"\n\n    class Meta:\n        name = \"Network Validation Engine\"\n        description = \"Validate network configuration and connectivity\"\n\n    validation_type = StringVar(\n        description=\"Type of validation (connectivity, addressing, security)\",\n        required=True\n    )\n\n    auto_fix = BooleanVar(\n        description=\"Automatically fix issues when possible\",\n        default=False\n    )\n\n    def run(self, data, commit):\n        validation_type = data['validation_type']\n        auto_fix = data['auto_fix']\n\n        validation_results = {\n            'passed': [],\n            'failed': [],\n            'warnings': [],\n            'fixed': []\n        }\n\n        if validation_type == 'connectivity':\n            validation_results = self._validate_connectivity(auto_fix, commit)\n        elif validation_type == 'addressing':\n            validation_results = self._validate_addressing(auto_fix, commit)\n        elif validation_type == 'security':\n            validation_results = self._validate_security(auto_fix, commit)\n        elif validation_type == 'all':\n            validation_results = self._validate_all(auto_fix, commit)\n\n        # Log results\n        for result_type, items in validation_results.items():\n            for item in items:\n                if result_type == 'passed':\n                    self.log_success(item)\n                elif result_type == 'failed':\n                    self.log_failure(item)\n                elif result_type == 'warnings':\n                    self.log_warning(item)\n                elif result_type == 'fixed':\n                    self.log_success(f\"Fixed: {item}\")\n\n        return f\"Validation completed. {len(validation_results['passed'])} passed, {len(validation_results['failed'])} failed, {len(validation_results['fixed'])} fixed\"\n\n    def _validate_connectivity(self, auto_fix, commit):\n        \"\"\"Validate network connectivity.\"\"\"\n        results = {'passed': [], 'failed': [], 'warnings': [], 'fixed': []}\n\n        # Check for disconnected interfaces\n        for interface in Interface.objects.all():\n            if not interface.cable and interface.type in ['1000base-t', '10gbase-t']:\n                results['warnings'].append(f\"Interface {interface.name} on {interface.device.name} is not connected\")\n\n        # Check for cable mismatches\n        for cable in Cable.objects.all():\n            if cable.termination_a and cable.termination_b:\n                a_type = cable.termination_a.type\n                b_type = cable.termination_b.type\n\n                if a_type != b_type:\n                    results['failed'].append(\n                        f\"Cable type mismatch: {cable.termination_a.device.name}:{cable.termination_a.name} \"\n                        f\"({a_type}) -&gt; {cable.termination_b.device.name}:{cable.termination_b.name} ({b_type})\"\n                    )\n\n        return results\n\n    def _validate_addressing(self, auto_fix, commit):\n        \"\"\"Validate IP addressing.\"\"\"\n        results = {'passed': [], 'failed': [], 'warnings': [], 'fixed': []}\n\n        # Check for duplicate IP addresses\n        ip_addresses = {}\n        for ip in IPAddress.objects.all():\n            if ip.address in ip_addresses:\n                results['failed'].append(f\"Duplicate IP address: {ip.address}\")\n            else:\n                ip_addresses[ip.address] = ip\n\n        # Check for overlapping prefixes\n        prefixes = list(Prefix.objects.all())\n        for i, prefix1 in enumerate(prefixes):\n            for prefix2 in prefixes[i+1:]:\n                try:\n                    net1 = ipaddress.ip_network(prefix1.prefix)\n                    net2 = ipaddress.ip_network(prefix2.prefix)\n\n                    if net1.overlaps(net2):\n                        results['failed'].append(f\"Overlapping prefixes: {prefix1.prefix} and {prefix2.prefix}\")\n                except ValueError:\n                    results['warnings'].append(f\"Invalid prefix format: {prefix1.prefix} or {prefix2.prefix}\")\n\n        return results\n\n    def _validate_security(self, auto_fix, commit):\n        \"\"\"Validate security configurations.\"\"\"\n        results = {'passed': [], 'failed': [], 'warnings': [], 'fixed': []}\n\n        # Check for devices without security tags\n        security_tag = Tag.objects.filter(name='security-audited').first()\n\n        if security_tag:\n            for device in Device.objects.all():\n                if security_tag not in device.tags.all():\n                    results['warnings'].append(f\"Device {device.name} not security audited\")\n\n                    if auto_fix and commit:\n                        device.tags.add(security_tag)\n                        results['fixed'].append(f\"Added security audit tag to {device.name}\")\n\n        # Check for management interfaces\n        for device in Device.objects.all():\n            mgmt_interfaces = device.interfaces.filter(name__icontains='mgmt')\n\n            if not mgmt_interfaces.exists():\n                results['warnings'].append(f\"Device {device.name} has no management interface\")\n\n        return results\n\n    def _validate_all(self, auto_fix, commit):\n        \"\"\"Run all validations.\"\"\"\n        all_results = {'passed': [], 'failed': [], 'warnings': [], 'fixed': []}\n\n        for validation_type in ['connectivity', 'addressing', 'security']:\n            results = getattr(self, f'_validate_{validation_type}')(auto_fix, commit)\n\n            for key in all_results:\n                all_results[key].extend(results[key])\n\n        return all_results\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#api-integration-and-external-systems","title":"API Integration and External Systems","text":"","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#1-rest-api-automation","title":"1. REST API Automation","text":"<pre><code># nautobot_jobs/api_integration.py\nfrom nautobot.extras.jobs import Job, StringVar, TextVar\nfrom nautobot.dcim.models import Device, Interface\nfrom nautobot.ipam.models import IPAddress\nimport requests\nimport json\n\nclass ExternalAPIIntegration(Job):\n    \"\"\"Integrate with external systems via REST APIs.\"\"\"\n\n    class Meta:\n        name = \"External API Integration\"\n        description = \"Integrate with monitoring, ticketing, and other systems\"\n\n    api_type = StringVar(\n        description=\"API type (monitoring, ticketing, backup)\",\n        required=True\n    )\n\n    api_endpoint = StringVar(\n        description=\"API endpoint URL\",\n        required=True\n    )\n\n    api_key = StringVar(\n        description=\"API key or token\",\n        required=True\n    )\n\n    def run(self, data, commit):\n        api_type = data['api_type']\n        api_endpoint = data['api_endpoint']\n        api_key = data['api_key']\n\n        headers = {\n            'Authorization': f'Bearer {api_key}',\n            'Content-Type': 'application/json'\n        }\n\n        if api_type == 'monitoring':\n            return self._integrate_monitoring(api_endpoint, headers, commit)\n        elif api_type == 'ticketing':\n            return self._integrate_ticketing(api_endpoint, headers, commit)\n        elif api_type == 'backup':\n            return self._integrate_backup(api_endpoint, headers, commit)\n\n        return f\"Unknown API type: {api_type}\"\n\n    def _integrate_monitoring(self, endpoint, headers, commit):\n        \"\"\"Integrate with monitoring systems.\"\"\"\n        devices = Device.objects.all()\n\n        for device in devices:\n            # Prepare device data for monitoring system\n            device_data = {\n                'name': device.name,\n                'ip_address': self._get_device_ip(device),\n                'device_type': device.device_type.model,\n                'site': device.site.name,\n                'status': device.status.value,\n                'tags': [tag.name for tag in device.tags.all()]\n            }\n\n            try:\n                response = requests.post(\n                    f\"{endpoint}/devices\",\n                    headers=headers,\n                    json=device_data,\n                    timeout=30\n                )\n\n                if response.status_code == 200:\n                    self.log_success(f\"Added {device.name} to monitoring system\")\n                else:\n                    self.log_warning(f\"Failed to add {device.name} to monitoring: {response.status_code}\")\n\n            except requests.exceptions.RequestException as e:\n                self.log_failure(f\"API error for {device.name}: {str(e)}\")\n\n        return f\"Integrated {devices.count()} devices with monitoring system\"\n\n    def _integrate_ticketing(self, endpoint, headers, commit):\n        \"\"\"Integrate with ticketing systems.\"\"\"\n        # Create tickets for devices with issues\n        problematic_devices = Device.objects.filter(\n            status__value='failed'\n        )\n\n        for device in problematic_devices:\n            ticket_data = {\n                'title': f\"Device {device.name} is down\",\n                'description': f\"Device {device.name} at {device.site.name} is reporting failed status\",\n                'priority': 'high',\n                'category': 'network',\n                'device_name': device.name,\n                'site': device.site.name\n            }\n\n            try:\n                response = requests.post(\n                    f\"{endpoint}/tickets\",\n                    headers=headers,\n                    json=ticket_data,\n                    timeout=30\n                )\n\n                if response.status_code == 201:\n                    self.log_success(f\"Created ticket for {device.name}\")\n                else:\n                    self.log_warning(f\"Failed to create ticket for {device.name}: {response.status_code}\")\n\n            except requests.exceptions.RequestException as e:\n                self.log_failure(f\"API error for {device.name}: {str(e)}\")\n\n        return f\"Created tickets for {problematic_devices.count()} problematic devices\"\n\n    def _integrate_backup(self, endpoint, headers, commit):\n        \"\"\"Integrate with backup systems.\"\"\"\n        devices = Device.objects.filter(\n            device_type__model__in=['ASA5525-X', 'PA-3220', 'FortiGate 600E']\n        )\n\n        for device in devices:\n            backup_data = {\n                'device_name': device.name,\n                'device_type': device.device_type.model,\n                'site': device.site.name,\n                'backup_type': 'configuration',\n                'schedule': 'daily'\n            }\n\n            try:\n                response = requests.post(\n                    f\"{endpoint}/backups\",\n                    headers=headers,\n                    json=backup_data,\n                    timeout=30\n                )\n\n                if response.status_code == 200:\n                    self.log_success(f\"Scheduled backup for {device.name}\")\n                else:\n                    self.log_warning(f\"Failed to schedule backup for {device.name}: {response.status_code}\")\n\n            except requests.exceptions.RequestException as e:\n                self.log_failure(f\"API error for {device.name}: {str(e)}\")\n\n        return f\"Scheduled backups for {devices.count()} devices\"\n\n    def _get_device_ip(self, device):\n        \"\"\"Get primary IP address for device.\"\"\"\n        try:\n            return device.primary_ip4.address if device.primary_ip4 else None\n        except:\n            return None\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#2-webhook-integration","title":"2. Webhook Integration","text":"<pre><code># nautobot_jobs/webhook_integration.py\nfrom nautobot.extras.jobs import Job, StringVar, TextVar\nfrom nautobot.dcim.models import Device\nfrom nautobot.extras.models import Webhook\nimport requests\nimport json\n\nclass WebhookConfiguration(Job):\n    \"\"\"Configure webhooks for external integrations.\"\"\"\n\n    class Meta:\n        name = \"Webhook Configuration\"\n        description = \"Set up webhooks for external system notifications\"\n\n    webhook_url = StringVar(\n        description=\"Webhook URL\",\n        required=True\n    )\n\n    webhook_type = StringVar(\n        description=\"Webhook type (slack, teams, custom)\",\n        required=True\n    )\n\n    def run(self, data, commit):\n        webhook_url = data['webhook_url']\n        webhook_type = data['webhook_type']\n\n        if webhook_type == 'slack':\n            return self._configure_slack_webhook(webhook_url, commit)\n        elif webhook_type == 'teams':\n            return self._configure_teams_webhook(webhook_url, commit)\n        elif webhook_type == 'custom':\n            return self._configure_custom_webhook(webhook_url, commit)\n\n        return f\"Unknown webhook type: {webhook_type}\"\n\n    def _configure_slack_webhook(self, webhook_url, commit):\n        \"\"\"Configure Slack webhook.\"\"\"\n        # Create webhook for device changes\n        webhook, created = Webhook.objects.get_or_create(\n            name='device-changes-slack',\n            defaults={\n                'url': webhook_url,\n                'http_method': 'POST',\n                'http_content_type': 'application/json',\n                'enabled': True,\n                'type_create': True,\n                'type_update': True,\n                'type_delete': True,\n                'additional_headers': json.dumps({\n                    'Content-Type': 'application/json'\n                }),\n                'body_template': json.dumps({\n                    'text': 'Device {{ object.name }} was {{ action }} in Nautobot',\n                    'attachments': [{\n                        'fields': [\n                            {'title': 'Device', 'value': '{{ object.name }}', 'short': True},\n                            {'title': 'Site', 'value': '{{ object.site.name }}', 'short': True},\n                            {'title': 'Status', 'value': '{{ object.status.value }}', 'short': True},\n                            {'title': 'Action', 'value': '{{ action }}', 'short': True}\n                        ]\n                    }]\n                })\n            }\n        )\n\n        if created:\n            self.log_success(\"Created Slack webhook for device changes\")\n        else:\n            self.log_info(\"Slack webhook already exists\")\n\n        return \"Slack webhook configured successfully\"\n\n    def _configure_teams_webhook(self, webhook_url, commit):\n        \"\"\"Configure Microsoft Teams webhook.\"\"\"\n        webhook, created = Webhook.objects.get_or_create(\n            name='device-changes-teams',\n            defaults={\n                'url': webhook_url,\n                'http_method': 'POST',\n                'http_content_type': 'application/json',\n                'enabled': True,\n                'type_create': True,\n                'type_update': True,\n                'type_delete': True,\n                'additional_headers': json.dumps({\n                    'Content-Type': 'application/json'\n                }),\n                'body_template': json.dumps({\n                    '@type': 'MessageCard',\n                    '@context': 'http://schema.org/extensions',\n                    'themeColor': '0076D7',\n                    'summary': 'Device {{ action }} in Nautobot',\n                    'sections': [{\n                        'activityTitle': 'Device {{ action }}',\n                        'facts': [\n                            {'name': 'Device', 'value': '{{ object.name }}'},\n                            {'name': 'Site', 'value': '{{ object.site.name }}'},\n                            {'name': 'Status', 'value': '{{ object.status.value }}'},\n                            {'name': 'Action', 'value': '{{ action }}'}\n                        ]\n                    }]\n                })\n            }\n        )\n\n        if created:\n            self.log_success(\"Created Teams webhook for device changes\")\n        else:\n            self.log_info(\"Teams webhook already exists\")\n\n        return \"Microsoft Teams webhook configured successfully\"\n\n    def _configure_custom_webhook(self, webhook_url, commit):\n        \"\"\"Configure custom webhook.\"\"\"\n        webhook, created = Webhook.objects.get_or_create(\n            name='device-changes-custom',\n            defaults={\n                'url': webhook_url,\n                'http_method': 'POST',\n                'http_content_type': 'application/json',\n                'enabled': True,\n                'type_create': True,\n                'type_update': True,\n                'type_delete': True,\n                'additional_headers': json.dumps({\n                    'Content-Type': 'application/json',\n                    'X-Nautobot-Event': '{{ action }}'\n                }),\n                'body_template': json.dumps({\n                    'event': '{{ action }}',\n                    'device': {\n                        'name': '{{ object.name }}',\n                        'site': '{{ object.site.name }}',\n                        'status': '{{ object.status.value }}',\n                        'device_type': '{{ object.device_type.model }}'\n                    },\n                    'timestamp': '{{ timestamp }}'\n                })\n            }\n        )\n\n        if created:\n            self.log_success(\"Created custom webhook for device changes\")\n        else:\n            self.log_info(\"Custom webhook already exists\")\n\n        return \"Custom webhook configured successfully\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#monitoring-and-observability","title":"Monitoring and Observability","text":"","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#1-network-health-dashboard","title":"1. Network Health Dashboard","text":"<pre><code># nautobot_jobs/health_monitoring.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device, Interface, Cable\nfrom nautobot.ipam.models import IPAddress, Prefix\nfrom nautobot.extras.models import CustomField, Tag\nfrom datetime import datetime, timedelta\n\nclass NetworkHealthMonitoring(Job):\n    \"\"\"Comprehensive network health monitoring and reporting.\"\"\"\n\n    class Meta:\n        name = \"Network Health Monitoring\"\n        description = \"Monitor network health and generate reports\"\n\n    def run(self, data, commit):\n        health_metrics = {\n            'total_devices': Device.objects.count(),\n            'active_devices': Device.objects.filter(status__value='active').count(),\n            'failed_devices': Device.objects.filter(status__value='failed').count(),\n            'total_interfaces': Interface.objects.count(),\n            'connected_interfaces': Cable.objects.count() * 2,  # Each cable connects 2 interfaces\n            'total_ips': IPAddress.objects.count(),\n            'total_prefixes': Prefix.objects.count(),\n            'health_score': 0\n        }\n\n        # Calculate health score\n        if health_metrics['total_devices'] &gt; 0:\n            device_health = health_metrics['active_devices'] / health_metrics['total_devices']\n            interface_health = health_metrics['connected_interfaces'] / health_metrics['total_interfaces'] if health_metrics['total_interfaces'] &gt; 0 else 1\n            health_metrics['health_score'] = int((device_health + interface_health) / 2 * 100)\n\n        # Store health metrics in custom fields\n        if commit:\n            # Create or update health metrics custom field\n            health_field, created = CustomField.objects.get_or_create(\n                name='network_health_metrics',\n                defaults={\n                    'type': 'json',\n                    'label': 'Network Health Metrics',\n                    'description': 'Current network health metrics'\n                }\n            )\n\n            # Store metrics in a system device or create a virtual device\n            system_device, created = Device.objects.get_or_create(\n                name='nautobot-system',\n                defaults={\n                    'device_type': DeviceType.objects.first(),\n                    'site': Site.objects.first(),\n                    'status': Status.objects.get(value='active')\n                }\n            )\n\n            system_device.custom_field_data['network_health_metrics'] = health_metrics\n            system_device.save()\n\n        # Log health status\n        self.log_success(f\"Network Health Score: {health_metrics['health_score']}%\")\n        self.log_info(f\"Active Devices: {health_metrics['active_devices']}/{health_metrics['total_devices']}\")\n        self.log_info(f\"Connected Interfaces: {health_metrics['connected_interfaces']}/{health_metrics['total_interfaces']}\")\n\n        # Alert on critical issues\n        if health_metrics['health_score'] &lt; 80:\n            self.log_warning(f\"Network health score is low: {health_metrics['health_score']}%\")\n\n        if health_metrics['failed_devices'] &gt; 0:\n            self.log_warning(f\"Found {health_metrics['failed_devices']} failed devices\")\n\n        return f\"Health monitoring completed. Score: {health_metrics['health_score']}%\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#2-performance-monitoring","title":"2. Performance Monitoring","text":"<pre><code># nautobot_jobs/performance_monitoring.py\nfrom nautobot.extras.jobs import Job\nfrom nautobot.dcim.models import Device\nfrom nautobot.extras.models import CustomField\nimport time\nimport psutil\n\nclass PerformanceMonitoring(Job):\n    \"\"\"Monitor Nautobot system performance.\"\"\"\n\n    class Meta:\n        name = \"Performance Monitoring\"\n        description = \"Monitor system performance and resource usage\"\n\n    def run(self, data, commit):\n        performance_metrics = {\n            'timestamp': datetime.now().isoformat(),\n            'cpu_usage': psutil.cpu_percent(interval=1),\n            'memory_usage': psutil.virtual_memory().percent,\n            'disk_usage': psutil.disk_usage('/').percent,\n            'database_connections': self._get_db_connections(),\n            'active_jobs': self._get_active_jobs(),\n            'api_requests': self._get_api_requests()\n        }\n\n        # Store performance metrics\n        if commit:\n            perf_field, created = CustomField.objects.get_or_create(\n                name='system_performance_metrics',\n                defaults={\n                    'type': 'json',\n                    'label': 'System Performance Metrics',\n                    'description': 'Current system performance metrics'\n                }\n            )\n\n            # Store in system device\n            system_device = Device.objects.filter(name='nautobot-system').first()\n            if system_device:\n                system_device.custom_field_data['system_performance_metrics'] = performance_metrics\n                system_device.save()\n\n        # Log performance status\n        self.log_info(f\"CPU Usage: {performance_metrics['cpu_usage']}%\")\n        self.log_info(f\"Memory Usage: {performance_metrics['memory_usage']}%\")\n        self.log_info(f\"Disk Usage: {performance_metrics['disk_usage']}%\")\n\n        # Alert on high resource usage\n        if performance_metrics['cpu_usage'] &gt; 80:\n            self.log_warning(f\"High CPU usage: {performance_metrics['cpu_usage']}%\")\n\n        if performance_metrics['memory_usage'] &gt; 80:\n            self.log_warning(f\"High memory usage: {performance_metrics['memory_usage']}%\")\n\n        if performance_metrics['disk_usage'] &gt; 90:\n            self.log_warning(f\"High disk usage: {performance_metrics['disk_usage']}%\")\n\n        return \"Performance monitoring completed\"\n\n    def _get_db_connections(self):\n        \"\"\"Get database connection count.\"\"\"\n        try:\n            from django.db import connection\n            return len(connection.queries) if hasattr(connection, 'queries') else 0\n        except:\n            return 0\n\n    def _get_active_jobs(self):\n        \"\"\"Get count of active jobs.\"\"\"\n        try:\n            from nautobot.extras.models import JobResult\n            return JobResult.objects.filter(status='running').count()\n        except:\n            return 0\n\n    def _get_api_requests(self):\n        \"\"\"Get API request count (simplified).\"\"\"\n        return 0  # Would need middleware to track this\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#production-deployment-best-practices","title":"Production Deployment Best Practices","text":"","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#1-backup-and-recovery","title":"1. Backup and Recovery","text":"<pre><code># nautobot_jobs/backup_recovery.py\nfrom nautobot.extras.jobs import Job, StringVar, BooleanVar\nfrom nautobot.dcim.models import Device\nfrom nautobot.extras.models import CustomField\nimport json\nimport os\nfrom datetime import datetime\n\nclass BackupAndRecovery(Job):\n    \"\"\"Automated backup and recovery procedures.\"\"\"\n\n    class Meta:\n        name = \"Backup and Recovery\"\n        description = \"Create and manage Nautobot backups\"\n\n    backup_type = StringVar(\n        description=\"Backup type (full, incremental, config)\",\n        required=True\n    )\n\n    backup_location = StringVar(\n        description=\"Backup location path\",\n        required=True\n    )\n\n    include_configs = BooleanVar(\n        description=\"Include device configurations\",\n        default=True\n    )\n\n    def run(self, data, commit):\n        backup_type = data['backup_type']\n        backup_location = data['backup_location']\n        include_configs = data['include_configs']\n\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        backup_filename = f\"nautobot_backup_{backup_type}_{timestamp}.json\"\n        backup_path = os.path.join(backup_location, backup_filename)\n\n        backup_data = {\n            'backup_type': backup_type,\n            'timestamp': timestamp,\n            'version': '1.0',\n            'devices': [],\n            'configurations': {}\n        }\n\n        # Backup device data\n        for device in Device.objects.all():\n            device_data = {\n                'name': device.name,\n                'device_type': device.device_type.model,\n                'site': device.site.name,\n                'status': device.status.value,\n                'custom_fields': device.custom_field_data,\n                'interfaces': []\n            }\n\n            for interface in device.interfaces.all():\n                interface_data = {\n                    'name': interface.name,\n                    'type': interface.type,\n                    'enabled': interface.enabled,\n                    'ip_addresses': []\n                }\n\n                for ip in interface.ip_addresses.all():\n                    interface_data['ip_addresses'].append(str(ip.address))\n\n                device_data['interfaces'].append(interface_data)\n\n            backup_data['devices'].append(device_data)\n\n            # Include device configurations if requested\n            if include_configs and device.custom_field_data.get('last_config'):\n                backup_data['configurations'][device.name] = device.custom_field_data['last_config']\n\n        # Save backup file\n        try:\n            os.makedirs(backup_location, exist_ok=True)\n\n            with open(backup_path, 'w') as f:\n                json.dump(backup_data, f, indent=2)\n\n            self.log_success(f\"Backup created: {backup_path}\")\n\n            # Store backup metadata\n            if commit:\n                backup_field, created = CustomField.objects.get_or_create(\n                    name='backup_metadata',\n                    defaults={\n                        'type': 'json',\n                        'label': 'Backup Metadata',\n                        'description': 'Backup file metadata'\n                    }\n                )\n\n                system_device = Device.objects.filter(name='nautobot-system').first()\n                if system_device:\n                    backup_metadata = system_device.custom_field_data.get('backup_metadata', [])\n                    backup_metadata.append({\n                        'filename': backup_filename,\n                        'path': backup_path,\n                        'type': backup_type,\n                        'timestamp': timestamp,\n                        'size': os.path.getsize(backup_path)\n                    })\n                    system_device.custom_field_data['backup_metadata'] = backup_metadata\n                    system_device.save()\n\n        except Exception as e:\n            self.log_failure(f\"Backup failed: {str(e)}\")\n            return f\"Backup failed: {str(e)}\"\n\n        return f\"Backup completed successfully: {backup_filename}\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#2-security-hardening","title":"2. Security Hardening","text":"<pre><code># nautobot_jobs/security_hardening.py\nfrom nautobot.extras.jobs import Job, BooleanVar\nfrom nautobot.dcim.models import Device\nfrom nautobot.extras.models import CustomField, Tag\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.hashers import make_password\n\nclass SecurityHardening(Job):\n    \"\"\"Implement security hardening measures.\"\"\"\n\n    class Meta:\n        name = \"Security Hardening\"\n        description = \"Apply security hardening measures to Nautobot\"\n\n    enable_audit_logging = BooleanVar(\n        description=\"Enable comprehensive audit logging\",\n        default=True\n    )\n\n    enforce_password_policy = BooleanVar(\n        description=\"Enforce strong password policy\",\n        default=True\n    )\n\n    enable_mfa = BooleanVar(\n        description=\"Enable multi-factor authentication\",\n        default=True\n    )\n\n    def run(self, data, commit):\n        enable_audit_logging = data['enable_audit_logging']\n        enforce_password_policy = data['enforce_password_policy']\n        enable_mfa = data['enable_mfa']\n\n        security_measures = []\n\n        # Create security tags\n        security_tags = [\n            {'name': 'security-hardened', 'color': '00ff00', 'description': 'Device has security hardening applied'},\n            {'name': 'audit-enabled', 'color': 'ffff00', 'description': 'Audit logging enabled'},\n            {'name': 'mfa-enabled', 'color': 'ff00ff', 'description': 'Multi-factor authentication enabled'}\n        ]\n\n        for tag_data in security_tags:\n            tag, created = Tag.objects.get_or_create(\n                name=tag_data['name'],\n                defaults=tag_data\n            )\n\n            if created:\n                security_measures.append(f\"Created security tag: {tag.name}\")\n\n        # Apply security measures to devices\n        for device in Device.objects.all():\n            device_tags = []\n\n            if enable_audit_logging:\n                audit_tag = Tag.objects.get(name='audit-enabled')\n                device_tags.append(audit_tag)\n                security_measures.append(f\"Enabled audit logging for {device.name}\")\n\n            # Add security hardening tag\n            hardened_tag = Tag.objects.get(name='security-hardened')\n            device_tags.append(hardened_tag)\n\n            # Apply tags to device\n            for tag in device_tags:\n                if tag not in device.tags.all():\n                    device.tags.add(tag)\n\n        # Enforce password policy\n        if enforce_password_policy:\n            # This would typically be done through Django settings\n            # For demonstration, we'll create a custom field to track password policy\n            password_field, created = CustomField.objects.get_or_create(\n                name='password_policy_enforced',\n                defaults={\n                    'type': 'boolean',\n                    'label': 'Password Policy Enforced',\n                    'description': 'Strong password policy is enforced'\n                }\n            )\n\n            if created:\n                security_measures.append(\"Password policy enforcement configured\")\n\n        # Enable MFA\n        if enable_mfa:\n            mfa_field, created = CustomField.objects.get_or_create(\n                name='mfa_required',\n                defaults={\n                    'type': 'boolean',\n                    'label': 'MFA Required',\n                    'description': 'Multi-factor authentication is required'\n                }\n            )\n\n            if created:\n                security_measures.append(\"Multi-factor authentication configured\")\n\n        # Log security measures\n        for measure in security_measures:\n            self.log_success(measure)\n\n        return f\"Security hardening completed. Applied {len(security_measures)} measures.\"\n</code></pre>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#wrap-up-and-best-practices","title":"Wrap-Up and Best Practices","text":"","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#key-takeaways-from-the-series","title":"Key Takeaways from the Series:","text":"<ol> <li> <p>Comprehensive Network Management: We've built a complete network management solution covering device onboarding, configuration management, security, and automation.</p> </li> <li> <p>Multi-Vendor Support: The solution works across Cisco, Juniper, Arista, and other major vendors.</p> </li> <li> <p>Security-First Approach: Integrated security policies, compliance frameworks, and hardening measures.</p> </li> <li> <p>Automation and Integration: Extensive automation capabilities with external system integration.</p> </li> <li> <p>Monitoring and Observability: Comprehensive health monitoring and performance tracking.</p> </li> </ol>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#production-deployment-checklist","title":"Production Deployment Checklist:","text":"<ul> <li>[ ] Backup Strategy: Implement automated backups with off-site storage</li> <li>[ ] Security Hardening: Apply all security measures and enable audit logging</li> <li>[ ] Monitoring: Set up comprehensive monitoring and alerting</li> <li>[ ] High Availability: Configure redundant Nautobot instances</li> <li>[ ] Documentation: Maintain up-to-date documentation and runbooks</li> <li>[ ] Testing: Regular testing of backup/restore procedures</li> <li>[ ] Updates: Establish update and patch management procedures</li> </ul>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#next-steps","title":"Next Steps:","text":"<ol> <li>Scale Up: Expand the solution to larger networks</li> <li>Advanced Automation: Implement more sophisticated automation workflows</li> <li>Integration: Add more external system integrations</li> <li>Analytics: Implement advanced analytics and reporting</li> <li>Compliance: Add more compliance frameworks and audits</li> </ol>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#resources","title":"Resources:","text":"<ul> <li>Nautobot Documentation</li> <li>Network Automation Best Practices</li> <li>Security Hardening Guide</li> <li>Monitoring Best Practices</li> </ul>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/nautobot-in-action--part-10/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've completed the Nautobot Zero to Hero series. You now have a comprehensive understanding of network automation with Nautobot, from basic device management to advanced automation and production deployment.</p> <p>The skills you've learned in this series will enable you to:</p> <ul> <li>Automate Network Operations: Reduce manual tasks and improve efficiency</li> <li>Ensure Network Security: Implement comprehensive security policies and compliance</li> <li>Scale Network Management: Handle growing networks with automation</li> <li>Integrate Systems: Connect Nautobot with your existing tools and workflows</li> <li>Monitor and Maintain: Keep your network healthy and performant</li> </ul> <p>Remember that network automation is a journey, not a destination. Continue learning, experimenting, and improving your automation workflows. The network automation community is vibrant and growing, so stay connected and share your experiences!</p> <p>Thank you for joining us on this journey from Zero to Hero with Nautobot! \ud83d\ude80</p> <p>This concludes the Nautobot Zero to Hero series. For questions, feedback, or to share your automation success stories, feel free to reach out through the comments or social media channels.</p>","tags":["network automation","firewalls","wireless","golden config","nautobot","security"]},{"location":"blog/ansible-introduction--getting-started/","title":"Ansible: Introduction &amp; Getting Started","text":"<p>Ansible is an open-source automation tool for configuration management, application deployment, and task automation. It uses simple YAML-based playbooks and requires no agent on managed nodes.</p>","tags":["ansible","automation","configuration management","devops"]},{"location":"blog/ansible-introduction--getting-started/#why-use-ansible","title":"Why Use Ansible?","text":"<ul> <li>Automate repetitive IT tasks</li> <li>Manage infrastructure as code (IaC)</li> <li>Orchestrate multi-tier deployments</li> <li>Ensure consistency across environments</li> </ul>","tags":["ansible","automation","configuration management","devops"]},{"location":"blog/ansible-introduction--getting-started/#how-ansible-works","title":"How Ansible Works","text":"<ul> <li>Uses SSH (or WinRM for Windows) to connect to hosts</li> <li>Playbooks define tasks in YAML</li> <li>Modules perform actions (e.g., install packages, copy files)</li> </ul>","tags":["ansible","automation","configuration management","devops"]},{"location":"blog/ansible-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Install Ansible (on most Linux/macOS):    <pre><code>pip install ansible\n# or\nsudo apt install ansible\n</code></pre></li> <li>Create an inventory file (<code>hosts</code>): <pre><code>[web]\nserver1.example.com\nserver2.example.com\n</code></pre></li> <li>Write a simple playbook (<code>site.yml</code>): <pre><code>---\n- name: Ensure Apache is installed\n  hosts: web\n  become: yes\n  tasks:\n    - name: Install Apache\n      apt:\n        name: apache2\n        state: present\n</code></pre></li> <li>Run the playbook: <pre><code>ansible-playbook -i hosts site.yml\n</code></pre></li> </ol>","tags":["ansible","automation","configuration management","devops"]},{"location":"blog/ansible-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>Ansible Documentation</li> <li>Getting Started Guide</li> </ul>","tags":["ansible","automation","configuration management","devops"]},{"location":"blog/ansible-introduction--getting-started/#step-by-step-ansible-tutorials","title":"Step-by-Step Ansible Tutorials","text":"<p>If you want a structured, beginner-friendly path, check out the Ansible tutorial series: - Tutorial 1: Concepts &amp; Terminology - Tutorial 2: Modules &amp; Your First Playbook - Tutorial 3: Variables, Modules &amp; Network Fact Gathering </p>","tags":["ansible","automation","configuration management","devops"]},{"location":"blog/apis-in-network-automation/","title":"APIs in Network Automation","text":"<p>APIs (Application Programming Interfaces) are the backbone of modern network automation and integration. They allow tools, scripts, and platforms to communicate, exchange data, and automate tasks across diverse systems.</p>","tags":["api","rest","graphql","automation","integration"]},{"location":"blog/apis-in-network-automation/#key-concepts","title":"Key Concepts","text":"<ul> <li>REST APIs: The most common API style, using HTTP verbs (GET, POST, etc.) and JSON data.</li> <li>GraphQL APIs: Flexible query language for getting exactly the data you need in one call.</li> <li>gRPC and others: High-performance, binary protocols for advanced use cases.</li> <li>Authentication: Most APIs require tokens, keys, or OAuth for secure access.</li> </ul>","tags":["api","rest","graphql","automation","integration"]},{"location":"blog/apis-in-network-automation/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Automating device configuration and provisioning</li> <li>Integrating inventory and monitoring tools</li> <li>Collecting metrics and logs</li> <li>Orchestrating workflows across platforms</li> </ul>","tags":["api","rest","graphql","automation","integration"]},{"location":"blog/apis-in-network-automation/#resources","title":"Resources","text":"<ul> <li>REST API Concepts</li> <li>GraphQL Official Site</li> <li>API Blog Posts (search for API-related content)</li> <li>NetDevOps Tools Index</li> </ul> <p>For practical API usage, see the Ansible, Nautobot, and NetBox tool pages. </p>","tags":["api","rest","graphql","automation","integration"]},{"location":"blog/aws-cloudformation-introduction--getting-started/","title":"AWS CloudFormation: Introduction &amp; Getting Started","text":"<p>AWS CloudFormation is an infrastructure as code (IaC) service that enables you to define and provision AWS resources using templates written in YAML or JSON.</p>","tags":["cloudformation","aws","infrastructure as code","automation","devops"]},{"location":"blog/aws-cloudformation-introduction--getting-started/#why-use-cloudformation","title":"Why Use CloudFormation?","text":"<ul> <li>Automate AWS infrastructure deployment</li> <li>Use version-controlled templates for repeatability</li> <li>Integrate with AWS services and CI/CD pipelines</li> </ul>","tags":["cloudformation","aws","infrastructure as code","automation","devops"]},{"location":"blog/aws-cloudformation-introduction--getting-started/#how-cloudformation-works","title":"How CloudFormation Works","text":"<ul> <li>Templates define resources and their relationships</li> <li>Stacks are deployed and managed via the AWS Console, CLI, or API</li> <li>Supports parameters, outputs, and resource dependencies</li> </ul>","tags":["cloudformation","aws","infrastructure as code","automation","devops"]},{"location":"blog/aws-cloudformation-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Write a simple template (<code>template.yaml</code>): <pre><code>AWSTemplateFormatVersion: '2010-09-09'\nResources:\n  MyBucket:\n    Type: AWS::S3::Bucket\nOutputs:\n  BucketName:\n    Value: !Ref MyBucket\n</code></pre></li> <li>Deploy the stack (CLI): <pre><code>aws cloudformation create-stack --stack-name my-stack --template-body file://template.yaml\n</code></pre></li> <li>Check the stack status: <pre><code>aws cloudformation describe-stacks --stack-name my-stack\n</code></pre></li> </ol>","tags":["cloudformation","aws","infrastructure as code","automation","devops"]},{"location":"blog/aws-cloudformation-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>CloudFormation Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["cloudformation","aws","infrastructure as code","automation","devops"]},{"location":"blog/containerlab/","title":"ContainerLab","text":"<p>ContainerLab is a container-based network lab orchestrator that allows you to create and manage network topologies using containerized network operating systems. It's perfect for network automation testing, learning, and development without the overhead of traditional virtualization.</p>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#what-is-containerlab","title":"What is ContainerLab?","text":"<p>ContainerLab is an open-source tool that enables you to: - Deploy network topologies using containerized network operating systems - Test network automation with real network devices - Create reproducible lab environments for learning and development - Run multiple vendor images in a single lab topology - Integrate with automation tools like Ansible, Nornir, and Terraform</p>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#key-features","title":"Key Features","text":"<ul> <li>Multi-vendor Support: Cisco, Arista, Nokia, Juniper, and more</li> <li>Docker-based: Lightweight and fast deployment</li> <li>Topology Management: YAML-based topology definitions</li> <li>CLI Interface: Easy-to-use command-line tools</li> <li>Integration Ready: Works with popular automation tools</li> <li>Free Images: Support for vendor images that can be used freely</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#installation-guide","title":"Installation Guide","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux (Ubuntu 20.04+, CentOS 8+, or similar)</li> <li>Docker installed and running</li> <li>Docker Compose (optional, for advanced setups)</li> <li>Git for cloning repositories</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#step-1-install-docker","title":"Step 1: Install Docker","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code># Update package list\nsudo apt update\n\n# Install required packages\nsudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release\n\n# Add Docker's official GPG key\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n# Add Docker repository\necho \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install Docker\nsudo apt update\nsudo apt install -y docker-ce docker-ce-cli containerd.io\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# Start and enable Docker\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Verify installation\ndocker --version\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#centosrhel","title":"CentOS/RHEL","text":"<pre><code># Install required packages\nsudo yum install -y yum-utils\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker\nsudo yum install -y docker-ce docker-ce-cli containerd.io\n\n# Start and enable Docker\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# Verify installation\ndocker --version\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#step-2-install-containerlab","title":"Step 2: Install ContainerLab","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#method-1-using-the-official-install-script-recommended","title":"Method 1: Using the Official Install Script (Recommended)","text":"<pre><code># Download and run the installation script\nbash -c \"$(curl -sL https://get.containerlab.dev)\"\n\n# Verify installation\ncontainerlab version\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#method-2-manual-installation","title":"Method 2: Manual Installation","text":"<pre><code># Download the latest release\nVERSION=$(curl -s https://api.github.com/repos/srl-labs/containerlab/releases/latest | grep 'tag_name' | cut -d\\\" -f4)\nwget https://github.com/srl-labs/containerlab/releases/download/${VERSION}/containerlab_${VERSION}_Linux_amd64.tar.gz\n\n# Extract and install\nsudo tar -xzf containerlab_${VERSION}_Linux_amd64.tar.gz -C /usr/local/bin containerlab\nsudo chmod +x /usr/local/bin/containerlab\n\n# Verify installation\ncontainerlab version\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#step-3-install-additional-tools-optional","title":"Step 3: Install Additional Tools (Optional)","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#install-docker-compose","title":"Install Docker Compose","text":"<pre><code># Download Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n# Make it executable\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Verify installation\ndocker-compose --version\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#install-network-tools","title":"Install Network Tools","text":"<pre><code># Install additional networking tools\nsudo apt install -y bridge-utils iproute2 net-tools tcpdump\n\n# Or for CentOS/RHEL\nsudo yum install -y bridge-utils iproute net-tools tcpdump\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#step-4-docker-compose-installation-alternative-method","title":"Step 4: Docker Compose Installation (Alternative Method)","text":"<p>For those who prefer using Docker Compose for ContainerLab deployment, here's a complete setup:</p>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#docker-compose-setup","title":"Docker Compose Setup","text":"<p>Create a <code>docker-compose.yml</code> file:</p> <pre><code>version: '3.8'\n\nservices:\n  containerlab:\n    image: ghcr.io/srl-labs/containerlab:latest\n    container_name: containerlab\n    privileged: true\n    network_mode: host\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./labs:/labs\n      - ./configs:/configs\n      - ./images:/images\n    environment:\n      - CLAB_HOST=0.0.0.0\n      - CLAB_PORT=8080\n    restart: unless-stopped\n    command: [\"sleep\", \"infinity\"]\n\n  # Optional: Web UI for ContainerLab\n  containerlab-ui:\n    image: ghcr.io/srl-labs/containerlab-ui:latest\n    container_name: containerlab-ui\n    ports:\n      - \"3000:3000\"\n    environment:\n      - CLAB_API_URL=http://localhost:8080\n    depends_on:\n      - containerlab\n    restart: unless-stopped\n\n  # Optional: Grafana for lab monitoring\n  grafana:\n    image: grafana/grafana:latest\n    container_name: containerlab-grafana\n    ports:\n      - \"3001:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n    volumes:\n      - grafana_data:/var/lib/grafana\n    restart: unless-stopped\n\n  # Optional: Prometheus for metrics collection\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: containerlab-prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=200h'\n      - '--web.enable-lifecycle'\n    restart: unless-stopped\n\nvolumes:\n  grafana_data:\n  prometheus_data:\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#prometheus-configuration","title":"Prometheus Configuration","text":"<p>Create <code>prometheus.yml</code>:</p> <pre><code>global:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'containerlab'\n    static_configs:\n      - targets: ['localhost:8080']\n    metrics_path: /metrics\n\n  - job_name: 'network-devices'\n    static_configs:\n      - targets: ['192.168.1.10:9100', '192.168.1.11:9100']\n    scrape_interval: 30s\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#directory-structure","title":"Directory Structure","text":"<pre><code># Create the directory structure\nmkdir -p containerlab-setup/{labs,configs,images}\ncd containerlab-setup\n\n# Copy the docker-compose.yml and prometheus.yml files\n# Then start the services\ndocker-compose up -d\n\n# Access ContainerLab\ndocker exec -it containerlab containerlab version\n\n# Deploy a lab\ndocker exec -it containerlab containerlab deploy -t /labs/lab.yml\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#using-containerlab-with-docker-compose","title":"Using ContainerLab with Docker Compose","text":"<pre><code># Deploy a lab\ndocker exec -it containerlab containerlab deploy -t /labs/my-lab.yml\n\n# List running labs\ndocker exec -it containerlab containerlab list\n\n# Access a device\ndocker exec -it containerlab containerlab exec -t /labs/my-lab.yml --label clab-node-name=ceos1\n\n# Destroy a lab\ndocker exec -it containerlab containerlab destroy -t /labs/my-lab.yml\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#step-5-ansible-role-deployment-coming-soon","title":"Step 5: Ansible Role Deployment (Coming Soon)","text":"<p>Note: An Ansible role for automated ContainerLab deployment will be created and made available. This role will include:</p> <ul> <li>Automated Docker installation</li> <li>ContainerLab installation and configuration</li> <li>Pre-configured lab topologies</li> <li>Integration with existing automation workflows</li> <li>Support for multiple deployment scenarios</li> </ul> <p>The Ansible role will be published to the bsmeding.containerlab repository and will be available through Ansible Galaxy.</p>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#getting-started-with-free-vendor-images","title":"Getting Started with Free Vendor Images","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#available-free-images","title":"Available Free Images","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#1-arista-ceos-cloud-edition","title":"1. Arista cEOS (Cloud Edition)","text":"<ul> <li>License: Free for lab use</li> <li>Download: Available from Arista website</li> <li>Features: Full EOS functionality, REST API, eAPI</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#2-nokia-sr-linux","title":"2. Nokia SR Linux","text":"<ul> <li>License: Free for lab use</li> <li>Download: Available from Nokia website</li> <li>Features: Full SR Linux functionality, gNMI, gRPC</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#3-cisco-xe-subscription-required","title":"3. Cisco XE (Subscription Required)","text":"<ul> <li>License: Requires Cisco subscription</li> <li>Download: Available through Cisco DevNet</li> <li>Features: Full IOS XE functionality, RESTCONF, NETCONF</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#4-juniper-vmx-subscription-required","title":"4. Juniper vMX (Subscription Required)","text":"<ul> <li>License: Requires Juniper subscription</li> <li>Download: Available through Juniper website</li> <li>Features: Full Junos functionality, NETCONF, REST API</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#downloading-free-images","title":"Downloading Free Images","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#arista-ceos","title":"Arista cEOS","text":"<pre><code># Create directory for images\nmkdir -p ~/containerlab-images\ncd ~/containerlab-images\n\n# Download Arista cEOS (you'll need to register on Arista website)\n# Visit: https://www.arista.com/en/support/software-download\n# Download: cEOS-lab-4.28.0F.tar.xz\n\n# Extract the image\ntar -xJf cEOS-lab-4.28.0F.tar.xz\n\n# Import into Docker\ndocker import cEOS-lab-4.28.0F.tar.xz ceos:4.28.0F\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#nokia-sr-linux","title":"Nokia SR Linux","text":"<pre><code># Download Nokia SR Linux (you'll need to register on Nokia website)\n# Visit: https://www.nokia.com/networks/solutions/sr-linux/\n# Download: srlinux-22.11.1.tar.xz\n\n# Extract the image\ntar -xJf srlinux-22.11.1.tar.xz\n\n# Import into Docker\ndocker import srlinux-22.11.1.tar.xz srlinux:22.11.1\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#creating-your-first-lab","title":"Creating Your First Lab","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#basic-topology-file","title":"Basic Topology File","text":"<p>Create a file named <code>lab.yml</code>:</p> <pre><code>name: my-first-lab\ntopology:\n  nodes:\n    # Arista cEOS switch\n    ceos1:\n      kind: ceos\n      image: ceos:4.28.0F\n      mgmt_ipv4: 192.168.1.10\n\n    ceos2:\n      kind: ceos\n      image: ceos:4.28.0F\n      mgmt_ipv4: 192.168.1.11\n\n    # Nokia SR Linux router\n    srl1:\n      kind: srl\n      image: srlinux:22.11.1\n      mgmt_ipv4: 192.168.1.20\n\n    # Linux host for testing\n    host1:\n      kind: linux\n      image: alpine:latest\n      mgmt_ipv4: 192.168.1.100\n\n  links:\n    - endpoints: [\"ceos1:eth1\", \"srl1:eth1\"]\n    - endpoints: [\"ceos2:eth1\", \"srl1:eth2\"]\n    - endpoints: [\"host1:eth1\", \"ceos1:eth2\"]\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#deploy-the-lab","title":"Deploy the Lab","text":"<pre><code># Deploy the lab\ncontainerlab deploy -t lab.yml\n\n# Check lab status\ncontainerlab inspect -t lab.yml\n\n# List running containers\ncontainerlab list\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#access-devices","title":"Access Devices","text":"<pre><code># Access Arista cEOS\ncontainerlab exec -t lab.yml --label clab-node-name=ceos1\n\n# Access Nokia SR Linux\ncontainerlab exec -t lab.yml --label clab-node-name=srl1\n\n# Access Linux host\ncontainerlab exec -t lab.yml --label clab-node-name=host1\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#advanced-lab-examples","title":"Advanced Lab Examples","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#multi-vendor-lab-with-automation","title":"Multi-Vendor Lab with Automation","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#complex-topology","title":"Complex Topology","text":"<pre><code>name: automation-lab\ntopology:\n  nodes:\n    # Core switches\n    core1:\n      kind: ceos\n      image: ceos:4.28.0F\n      mgmt_ipv4: 192.168.1.10\n      startup-config: configs/core1.cfg\n\n    core2:\n      kind: ceos\n      image: ceos:4.28.0F\n      mgmt_ipv4: 192.168.1.11\n      startup-config: configs/core2.cfg\n\n    # Distribution switches\n    dist1:\n      kind: ceos\n      image: ceos:4.28.0F\n      mgmt_ipv4: 192.168.1.20\n      startup-config: configs/dist1.cfg\n\n    dist2:\n      kind: ceos\n      image: ceos:4.28.0F\n      mgmt_ipv4: 192.168.1.21\n      startup-config: configs/dist2.cfg\n\n    # Edge router\n    edge1:\n      kind: srl\n      image: srlinux:22.11.1\n      mgmt_ipv4: 192.168.1.30\n      startup-config: configs/edge1.cfg\n\n    # Management server\n    mgmt:\n      kind: linux\n      image: ubuntu:20.04\n      mgmt_ipv4: 192.168.1.100\n      exec:\n        - cmd: \"apt update &amp;&amp; apt install -y ansible python3-pip\"\n        - cmd: \"pip3 install napalm netmiko\"\n\n    # Test hosts\n    host1:\n      kind: linux\n      image: alpine:latest\n      mgmt_ipv4: 192.168.1.101\n\n    host2:\n      kind: linux\n      image: alpine:latest\n      mgmt_ipv4: 192.168.1.102\n\n  links:\n    # Core to distribution\n    - endpoints: [\"core1:eth1\", \"dist1:eth1\"]\n    - endpoints: [\"core1:eth2\", \"dist2:eth1\"]\n    - endpoints: [\"core2:eth1\", \"dist1:eth2\"]\n    - endpoints: [\"core2:eth2\", \"dist2:eth2\"]\n\n    # Distribution to edge\n    - endpoints: [\"dist1:eth3\", \"edge1:eth1\"]\n    - endpoints: [\"dist2:eth3\", \"edge1:eth2\"]\n\n    # Hosts to distribution\n    - endpoints: [\"host1:eth1\", \"dist1:eth4\"]\n    - endpoints: [\"host2:eth1\", \"dist2:eth4\"]\n\n    # Management to core\n    - endpoints: [\"mgmt:eth1\", \"core1:eth3\"]\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#configuration-files","title":"Configuration Files","text":"<p>Create configuration files in a <code>configs/</code> directory:</p> <pre><code># Create configs directory\nmkdir -p configs\n\n# Core1 configuration\ncat &gt; configs/core1.cfg &lt;&lt; 'EOF'\n!\nhostname core1\n!\ninterface Ethernet1\n   description Link to dist1\n   no switchport\n   ip address 10.1.1.1/30\n!\ninterface Ethernet2\n   description Link to dist2\n   no switchport\n   ip address 10.1.2.1/30\n!\ninterface Ethernet3\n   description Management\n   no switchport\n   ip address 192.168.1.10/24\n!\nrouter ospf 1\n   network 10.1.1.0/30 area 0\n   network 10.1.2.0/30 area 0\n!\nEOF\n\n# Dist1 configuration\ncat &gt; configs/dist1.cfg &lt;&lt; 'EOF'\n!\nhostname dist1\n!\ninterface Ethernet1\n   description Link to core1\n   no switchport\n   ip address 10.1.1.2/30\n!\ninterface Ethernet2\n   description Link to core2\n   no switchport\n   ip address 10.1.3.1/30\n!\ninterface Ethernet3\n   description Link to edge1\n   no switchport\n   ip address 10.2.1.1/30\n!\ninterface Ethernet4\n   description Link to host1\n   switchport mode access\n   switchport access vlan 10\n!\nvlan 10\n   name DATA\n!\nrouter ospf 1\n   network 10.1.1.0/30 area 0\n   network 10.1.3.0/30 area 0\n   network 10.2.1.0/30 area 0\n!\nEOF\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#ansible-integration","title":"Ansible Integration","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#inventory-file","title":"Inventory File","text":"<p>Create <code>inventory.yml</code>:</p> <pre><code>all:\n  children:\n    network_devices:\n      children:\n        arista:\n          hosts:\n            core1:\n              ansible_host: 192.168.1.10\n              ansible_network_os: eos\n              ansible_connection: network_cli\n              ansible_user: admin\n              ansible_password: admin\n            core2:\n              ansible_host: 192.168.1.11\n              ansible_network_os: eos\n              ansible_connection: network_cli\n              ansible_user: admin\n              ansible_password: admin\n            dist1:\n              ansible_host: 192.168.1.20\n              ansible_network_os: eos\n              ansible_connection: network_cli\n              ansible_user: admin\n              ansible_password: admin\n            dist2:\n              ansible_host: 192.168.1.21\n              ansible_network_os: eos\n              ansible_connection: network_cli\n              ansible_user: admin\n              ansible_password: admin\n        nokia:\n          hosts:\n            edge1:\n              ansible_host: 192.168.1.30\n              ansible_network_os: srl\n              ansible_connection: network_cli\n              ansible_user: admin\n              ansible_password: admin\n    linux_hosts:\n      hosts:\n        mgmt:\n          ansible_host: 192.168.1.100\n          ansible_user: root\n        host1:\n          ansible_host: 192.168.1.101\n          ansible_user: root\n        host2:\n          ansible_host: 192.168.1.102\n          ansible_user: root\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#ansible-playbook","title":"Ansible Playbook","text":"<p>Create <code>playbook.yml</code>:</p> <pre><code>---\n- name: Configure Network Devices\n  hosts: network_devices\n  gather_facts: no\n\n  tasks:\n    - name: Gather device facts\n      network_facts:\n\n    - name: Display device facts\n      debug:\n        var: ansible_net_version\n\n    - name: Configure hostname\n      network_config:\n        lines:\n          - hostname \"{{ inventory_hostname }}\"\n\n    - name: Configure interfaces\n      network_config:\n        lines:\n          - description \"Configured by Ansible\"\n        parents: \"{{ item }}\"\n      loop:\n        - \"interface Ethernet1\"\n        - \"interface Ethernet2\"\n        - \"interface Ethernet3\"\n\n    - name: Save running config\n      network_config:\n        save_when: modified\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#working-with-different-vendor-images","title":"Working with Different Vendor Images","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#cisco-images-subscription-required","title":"Cisco Images (Subscription Required)","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#cisco-xe","title":"Cisco XE","text":"<pre><code># Download Cisco XE (requires Cisco DevNet account)\n# Visit: https://developer.cisco.com/site/ios-xe/\n# Download: ios-xe-17.03.01a.tar.xz\n\n# Extract and import\ntar -xJf ios-xe-17.03.01a.tar.xz\ndocker import ios-xe-17.03.01a.tar.xz cisco_xe:17.03.01a\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#cisco-topology-example","title":"Cisco Topology Example","text":"<pre><code>name: cisco-lab\ntopology:\n  nodes:\n    cisco1:\n      kind: cisco_xe\n      image: cisco_xe:17.03.01a\n      mgmt_ipv4: 192.168.1.10\n      startup-config: configs/cisco1.cfg\n\n    cisco2:\n      kind: cisco_xe\n      image: cisco_xe:17.03.01a\n      mgmt_ipv4: 192.168.1.11\n      startup-config: configs/cisco2.cfg\n\n  links:\n    - endpoints: [\"cisco1:eth1\", \"cisco2:eth1\"]\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#juniper-images-subscription-required","title":"Juniper Images (Subscription Required)","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#juniper-vmx","title":"Juniper vMX","text":"<pre><code># Download Juniper vMX (requires Juniper account)\n# Visit: https://www.juniper.net/us/en/dm/downloads/\n# Download: vmx-20.4R1.12.tgz\n\n# Extract and import\ntar -xzf vmx-20.4R1.12.tgz\ndocker import vmx-20.4R1.12.tar.xz juniper_vmx:20.4R1.12\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#lab-management-commands","title":"Lab Management Commands","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#basic-commands","title":"Basic Commands","text":"<pre><code># Deploy a lab\ncontainerlab deploy -t lab.yml\n\n# Destroy a lab\ncontainerlab destroy -t lab.yml\n\n# List running labs\ncontainerlab list\n\n# Inspect lab topology\ncontainerlab inspect -t lab.yml\n\n# Execute commands on nodes\ncontainerlab exec -t lab.yml --label clab-node-name=node1 -- cmd\n\n# Get lab topology graph\ncontainerlab graph -t lab.yml\n\n# Save lab state\ncontainerlab save -t lab.yml\n\n# Load lab state\ncontainerlab load -t lab.yml\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#advanced-commands","title":"Advanced Commands","text":"<pre><code># Deploy with specific nodes\ncontainerlab deploy -t lab.yml --nodes node1,node2\n\n# Deploy with custom topology\ncontainerlab deploy --topo custom-topo.yml\n\n# Get detailed node information\ncontainerlab inspect -t lab.yml --all\n\n# Execute interactive shell\ncontainerlab exec -t lab.yml --label clab-node-name=node1\n\n# Get lab logs\ncontainerlab logs -t lab.yml\n\n# Export lab configuration\ncontainerlab export -t lab.yml --format yaml\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#integration-with-automation-tools","title":"Integration with Automation Tools","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#nornir-integration","title":"Nornir Integration","text":"<pre><code># nornir_inventory.py\nfrom nornir import InitNornir\nfrom nornir.plugins.tasks.networking import napalm_get\n\n# Initialize Nornir\nnr = InitNornir(\n    inventory={\n        \"plugin\": \"SimpleInventory\",\n        \"options\": {\n            \"host_file\": \"inventory/hosts.yml\",\n            \"group_file\": \"inventory/groups.yml\",\n            \"defaults_file\": \"inventory/defaults.yml\",\n        }\n    }\n)\n\n# Get facts from all devices\nresult = nr.run(task=napalm_get, getters=[\"facts\", \"interfaces\"])\n\n# Print results\nfor host, task_result in result.items():\n    print(f\"{host}: {task_result[0].result}\")\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#terraform-integration","title":"Terraform Integration","text":"<pre><code># main.tf\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"~&gt; 3.0\"\n    }\n  }\n}\n\n# Deploy ContainerLab using external data source\ndata \"external\" \"containerlab\" {\n  program = [\"containerlab\", \"deploy\", \"-t\", \"lab.yml\", \"--format\", \"json\"]\n}\n\n# Use lab information in Terraform\nresource \"null_resource\" \"configure_network\" {\n  depends_on = [data.external.containerlab]\n\n  provisioner \"local-exec\" {\n    command = \"ansible-playbook -i inventory.yml playbook.yml\"\n  }\n}\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#ansible-role-integration-coming-soon","title":"Ansible Role Integration (Coming Soon)","text":"<p>A dedicated Ansible role for ContainerLab deployment will be available, providing:</p>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#role-features","title":"Role Features","text":"<ul> <li>Automated Installation: Complete ContainerLab setup with Docker</li> <li>Lab Management: Deploy, destroy, and manage lab topologies</li> <li>Image Management: Automated vendor image downloads and imports</li> <li>Configuration Templates: Pre-built lab configurations</li> <li>Integration: Seamless integration with existing Ansible workflows</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#example-playbook-usage","title":"Example Playbook Usage","text":"<pre><code>---\n- name: Deploy ContainerLab Environment\n  hosts: lab_servers\n  roles:\n    - role: bsmeding.containerlab\n      containerlab_version: \"0.52.0\"\n      containerlab_images:\n        - name: ceos\n          version: \"4.28.0F\"\n          source: \"arista\"\n        - name: srlinux\n          version: \"22.11.1\"\n          source: \"nokia\"\n      containerlab_labs:\n        - name: \"basic-lab\"\n          topology_file: \"labs/basic-lab.yml\"\n          auto_deploy: true\n      containerlab_monitoring:\n        enable_grafana: true\n        enable_prometheus: true\n        grafana_port: 3001\n        prometheus_port: 9090\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#role-variables","title":"Role Variables","text":"<pre><code># containerlab.yml\ncontainerlab_version: \"0.52.0\"\ncontainerlab_install_method: \"script\"  # script, docker, or manual\ncontainerlab_docker_compose: false\ncontainerlab_web_ui: false\ncontainerlab_monitoring:\n  enable_grafana: false\n  enable_prometheus: false\n  grafana_port: 3001\n  prometheus_port: 9090\n\n# Lab configurations\ncontainerlab_labs: []\ncontainerlab_images: []\n\n# Network settings\ncontainerlab_network:\n  mgmt_subnet: \"192.168.1.0/24\"\n  data_subnet: \"10.0.0.0/8\"\n</code></pre> <p>The role will be available at: <code>bsmeding.containerlab</code></p>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#troubleshooting","title":"Troubleshooting","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#common-issues","title":"Common Issues","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#docker-permission-issues","title":"Docker Permission Issues","text":"<pre><code># If you get permission errors\nsudo usermod -aG docker $USER\nnewgrp docker\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#image-import-issues","title":"Image Import Issues","text":"<pre><code># Check available images\ndocker images\n\n# Remove corrupted images\ndocker rmi image_name:tag\n\n# Re-import images\ndocker import image.tar.xz image_name:tag\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#network-connectivity-issues","title":"Network Connectivity Issues","text":"<pre><code># Check Docker networks\ndocker network ls\n\n# Inspect network\ndocker network inspect containerlab\n\n# Check container connectivity\ncontainerlab exec -t lab.yml --label clab-node-name=node1 -- ping 8.8.8.8\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#performance-issues","title":"Performance Issues","text":"<pre><code># Check system resources\ndocker stats\n\n# Limit container resources\n# Add to topology file:\nnodes:\n  node1:\n    kind: ceos\n    image: ceos:4.28.0F\n    mgmt_ipv4: 192.168.1.10\n    cpu_limit: 1\n    memory_limit: 1G\n</code></pre>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#best-practices","title":"Best Practices","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#1-image-management","title":"1. Image Management","text":"<ul> <li>Keep images organized in a dedicated directory</li> <li>Use version tags for images</li> <li>Document image sources and licenses</li> <li>Regularly update images for security patches</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#2-topology-design","title":"2. Topology Design","text":"<ul> <li>Use descriptive node names</li> <li>Document link purposes</li> <li>Use consistent IP addressing schemes</li> <li>Keep topologies modular and reusable</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#3-configuration-management","title":"3. Configuration Management","text":"<ul> <li>Store configurations in version control</li> <li>Use templates for common configurations</li> <li>Document configuration changes</li> <li>Test configurations before deployment</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#4-automation-integration","title":"4. Automation Integration","text":"<ul> <li>Use consistent naming conventions</li> <li>Implement proper error handling</li> <li>Document automation workflows</li> <li>Test automation scripts regularly</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#5-resource-management","title":"5. Resource Management","text":"<ul> <li>Monitor system resources</li> <li>Clean up unused labs</li> <li>Use resource limits for containers</li> <li>Implement lab lifecycle management</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#resources","title":"Resources","text":"","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#official-documentation","title":"Official Documentation","text":"<ul> <li>ContainerLab Documentation</li> <li>ContainerLab GitHub</li> <li>ContainerLab Lab Examples</li> <li>ContainerLab Examples (GitHub)</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#vendor-resources","title":"Vendor Resources","text":"<ul> <li>Arista cEOS</li> <li>Nokia SR Linux</li> <li>Cisco DevNet</li> <li>Juniper vMX</li> </ul>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/containerlab/#community-resources","title":"Community Resources","text":"<ul> <li>ContainerLab Community</li> <li>Network Automation Examples</li> <li>Blog Posts and Tutorials</li> </ul> <p>For more on network automation tools, see the NetDevOps Tools Index.</p>","tags":["containerlab","network automation","lab environment","docker","networking","testing"]},{"location":"blog/docker/","title":"Docker","text":"<p>Docker is the leading platform for containerization\u2014packaging applications and their dependencies into portable, consistent units. Docker is widely used in DevOps, automation, and cloud-native workflows.</p>","tags":["docker","containers","devops","automation"]},{"location":"blog/docker/#key-features","title":"Key Features","text":"<ul> <li>Build, run, and manage containers</li> <li>Portable and reproducible environments</li> <li>Docker Compose for multi-container apps</li> <li>Docker Hub for sharing images</li> <li>Integrates with CI/CD and orchestration tools (Kubernetes, etc.)</li> </ul>","tags":["docker","containers","devops","automation"]},{"location":"blog/docker/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Isolating and deploying applications</li> <li>Building automation and test environments</li> <li>Running network automation tools in containers</li> <li>Simplifying development and deployment pipelines</li> </ul>","tags":["docker","containers","devops","automation"]},{"location":"blog/docker/#resources","title":"Resources","text":"<ul> <li>Official Docker Documentation</li> <li>Docker Hub</li> <li>Monitoring with Docker: Blog Post</li> <li>Docker Images Overview</li> </ul> <p>For more on using Docker in network automation, see the NetDevOps Tools Index. </p>","tags":["docker","containers","devops","automation"]},{"location":"blog/github-actions-introduction--getting-started/","title":"GitHub Actions: Introduction &amp; Getting Started","text":"<p>GitHub Actions is a CI/CD and automation platform built into GitHub, allowing you to automate workflows for building, testing, and deploying code.</p>","tags":["github","actions","ci/cd","automation","devops"]},{"location":"blog/github-actions-introduction--getting-started/#why-use-github-actions","title":"Why Use GitHub Actions?","text":"<ul> <li>Automate builds, tests, and deployments on GitHub</li> <li>Define workflows as code in <code>.github/workflows/*.yml</code></li> <li>Integrate with marketplace actions and third-party services</li> </ul>","tags":["github","actions","ci/cd","automation","devops"]},{"location":"blog/github-actions-introduction--getting-started/#how-github-actions-works","title":"How GitHub Actions Works","text":"<ul> <li>Workflows are triggered by events (push, PR, schedule, etc.)</li> <li>Jobs run in containers or VMs</li> <li>Steps use built-in or marketplace actions</li> </ul>","tags":["github","actions","ci/cd","automation","devops"]},{"location":"blog/github-actions-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Create a workflow file (<code>.github/workflows/ci.yml</code>): <pre><code>name: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run a one-line script\n        run: echo \"Hello, GitHub Actions!\"\n</code></pre></li> <li>Push to GitHub:</li> <li>The workflow runs automatically on push</li> <li>View workflow status:</li> <li>Go to your repo\u2019s Actions tab</li> </ol>","tags":["github","actions","ci/cd","automation","devops"]},{"location":"blog/github-actions-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>GitHub Actions Documentation</li> <li>Getting Started Guide</li> <li>Code Quality with ansible-lint and yaml-lint - Implementing automated linting in GitHub Actions </li> </ul>","tags":["github","actions","ci/cd","automation","devops"]},{"location":"blog/gitlab-cicd-introduction--getting-started/","title":"GitLab CI/CD: Introduction &amp; Getting Started","text":"<p>GitLab CI/CD is a built-in continuous integration and delivery system in GitLab, enabling you to automate builds, tests, and deployments directly from your Git repository.</p>","tags":["gitlab","ci/cd","automation","devops"]},{"location":"blog/gitlab-cicd-introduction--getting-started/#why-use-gitlab-cicd","title":"Why Use GitLab CI/CD?","text":"<ul> <li>Automate testing and deployment with every commit</li> <li>Define pipelines as code in <code>.gitlab-ci.yml</code></li> <li>Integrate with Docker, Kubernetes, and cloud providers</li> </ul>","tags":["gitlab","ci/cd","automation","devops"]},{"location":"blog/gitlab-cicd-introduction--getting-started/#how-gitlab-cicd-works","title":"How GitLab CI/CD Works","text":"<ul> <li>Pipelines are triggered by changes in your repository</li> <li>Jobs and stages are defined in <code>.gitlab-ci.yml</code></li> <li>Runners execute jobs on your infrastructure or in the cloud</li> </ul>","tags":["gitlab","ci/cd","automation","devops"]},{"location":"blog/gitlab-cicd-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Create a <code>.gitlab-ci.yml</code> in your repo: <pre><code>stages:\n  - build\n  - test\n\nbuild-job:\n  stage: build\n  script:\n    - echo \"Building...\"\n\ntest-job:\n  stage: test\n  script:\n    - echo \"Running tests...\"\n</code></pre></li> <li>Push to GitLab:</li> <li>The pipeline runs automatically on push</li> <li>View pipeline status:</li> <li>Go to your project\u2019s CI/CD &gt; Pipelines page</li> </ol>","tags":["gitlab","ci/cd","automation","devops"]},{"location":"blog/gitlab-cicd-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>GitLab CI/CD Documentation</li> <li>Getting Started Guide</li> <li>Code Quality with ansible-lint and yaml-lint - Implementing automated linting in GitLab CI/CD </li> </ul>","tags":["gitlab","ci/cd","automation","devops"]},{"location":"blog/grafana-introduction--getting-started/","title":"Grafana: Introduction &amp; Getting Started","text":"<p>Grafana is an open-source analytics and monitoring platform for visualizing time-series data. It is widely used to create dashboards and alerts from data sources like Prometheus, InfluxDB, and more.</p>","tags":["grafana","monitoring","observability","dashboards","devops"]},{"location":"blog/grafana-introduction--getting-started/#why-use-grafana","title":"Why Use Grafana?","text":"<ul> <li>Visualize metrics from multiple sources</li> <li>Build interactive dashboards</li> <li>Set up alerts and notifications</li> </ul>","tags":["grafana","monitoring","observability","dashboards","devops"]},{"location":"blog/grafana-introduction--getting-started/#how-grafana-works","title":"How Grafana Works","text":"<ul> <li>Connects to data sources (Prometheus, InfluxDB, etc.)</li> <li>Dashboards are built using a web UI</li> <li>Supports plugins and integrations</li> </ul>","tags":["grafana","monitoring","observability","dashboards","devops"]},{"location":"blog/grafana-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Run Grafana (Docker): <pre><code>docker run -d -p 3000:3000 grafana/grafana\n</code></pre></li> <li>Access the UI:</li> <li>Open <code>http://localhost:3000</code> (default login: admin / admin)</li> <li>Add a data source:</li> <li>Use the UI to add Prometheus, InfluxDB, etc.</li> <li>Create a dashboard:</li> <li>Use the UI to build visualizations</li> </ol>","tags":["grafana","monitoring","observability","dashboards","devops"]},{"location":"blog/grafana-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>Grafana Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["grafana","monitoring","observability","dashboards","devops"]},{"location":"blog/influxdb-introduction--getting-started/","title":"InfluxDB: Introduction &amp; Getting Started","text":"<p>InfluxDB is an open-source time-series database designed for storing and analyzing high volumes of time-stamped data, such as metrics and events.</p>","tags":["influxdb","monitoring","time-series","devops"]},{"location":"blog/influxdb-introduction--getting-started/#why-use-influxdb","title":"Why Use InfluxDB?","text":"<ul> <li>Store and query time-series data efficiently</li> <li>Integrate with Grafana, Telegraf, and other tools</li> <li>Ideal for IoT, monitoring, and analytics</li> </ul>","tags":["influxdb","monitoring","time-series","devops"]},{"location":"blog/influxdb-introduction--getting-started/#how-influxdb-works","title":"How InfluxDB Works","text":"<ul> <li>Data is written and queried using InfluxQL or Flux</li> <li>Supports retention policies and continuous queries</li> <li>Integrates with visualization and monitoring tools</li> </ul>","tags":["influxdb","monitoring","time-series","devops"]},{"location":"blog/influxdb-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Run InfluxDB (Docker): <pre><code>docker run -d -p 8086:8086 influxdb:latest\n</code></pre></li> <li>Access the UI:</li> <li>Open <code>http://localhost:8086</code> in your browser</li> <li>Write data (CLI): <pre><code>docker exec -it &lt;container_id&gt; influx\nCREATE DATABASE mydb\nINSERT cpu,host=server01 usage=0.5\nSELECT * FROM cpu\n</code></pre></li> </ol>","tags":["influxdb","monitoring","time-series","devops"]},{"location":"blog/influxdb-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>InfluxDB Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["influxdb","monitoring","time-series","devops"]},{"location":"blog/jenkins-introduction--getting-started/","title":"Jenkins: Introduction &amp; Getting Started","text":"<p>Jenkins is an open-source automation server widely used for building, testing, and deploying software through continuous integration and continuous delivery (CI/CD) pipelines.</p>","tags":["jenkins","ci/cd","automation","devops"]},{"location":"blog/jenkins-introduction--getting-started/#why-use-jenkins","title":"Why Use Jenkins?","text":"<ul> <li>Automate software builds, tests, and deployments</li> <li>Integrate with hundreds of plugins for SCM, notifications, and more</li> <li>Visualize and manage complex pipelines</li> </ul>","tags":["jenkins","ci/cd","automation","devops"]},{"location":"blog/jenkins-introduction--getting-started/#how-jenkins-works","title":"How Jenkins Works","text":"<ul> <li>Runs as a web application (Java-based)</li> <li>Pipelines are defined using a GUI or Jenkinsfile (Groovy syntax)</li> <li>Integrates with Git, Docker, cloud providers, and more</li> </ul>","tags":["jenkins","ci/cd","automation","devops"]},{"location":"blog/jenkins-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Install Jenkins (on Ubuntu): <pre><code>sudo apt update\nsudo apt install openjdk-11-jre\nwget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -\nsudo sh -c 'echo deb https://pkg.jenkins.io/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list'\nsudo apt update\nsudo apt install jenkins\nsudo systemctl start jenkins\n</code></pre></li> <li>Access Jenkins:</li> <li>Open <code>http://localhost:8080</code> in your browser</li> <li>Follow the setup wizard</li> <li>Create a simple pipeline:</li> <li>Use the GUI or create a <code>Jenkinsfile</code>:    <pre><code>pipeline {\n  agent any\n  stages {\n    stage('Hello') {\n      steps {\n        echo 'Hello, Jenkins!'\n      }\n    }\n  }\n}\n</code></pre></li> </ol>","tags":["jenkins","ci/cd","automation","devops"]},{"location":"blog/jenkins-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>Jenkins Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["jenkins","ci/cd","automation","devops"]},{"location":"blog/jinja2/","title":"Jinja2","text":"<p>Jinja2 is a fast, expressive, and extensible templating engine for Python. It is the default template language for Ansible and is widely used for generating dynamic configurations, scripts, and documentation in network automation.</p>","tags":["jinja2","templating","automation","ansible"]},{"location":"blog/jinja2/#key-features","title":"Key Features","text":"<ul> <li>Powerful template syntax (loops, conditionals, filters)</li> <li>Easy integration with Python and automation tools</li> <li>Supports custom filters and extensions</li> <li>Used by Ansible, SaltStack, and other automation frameworks</li> </ul>","tags":["jinja2","templating","automation","ansible"]},{"location":"blog/jinja2/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Generating device configurations from inventory data</li> <li>Creating dynamic playbooks and scripts</li> <li>Automating documentation and reports</li> <li>Building templates for cloud and infrastructure as code</li> </ul>","tags":["jinja2","templating","automation","ansible"]},{"location":"blog/jinja2/#resources","title":"Resources","text":"<ul> <li>Official Jinja2 Documentation</li> <li>Jinja2 Templating in Ansible: Tutorial</li> <li>Jinja2 Blog Posts (search for Jinja2-related content)</li> </ul> <p>For more on using Jinja2 in network automation, see the NetDevOps Tools Index. </p>","tags":["jinja2","templating","automation","ansible"]},{"location":"blog/linux-basics-for-network-automation/","title":"Linux Basics for Network Automation","text":"<p>Linux is the foundation of most network automation tools. Understanding basic Linux commands and concepts is essential for anyone starting with network automation.</p>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#why-linux-for-network-automation","title":"Why Linux for Network Automation?","text":"<ul> <li>Most automation tools run on Linux</li> <li>Command-line efficiency for automation workflows</li> <li>Better integration with development tools</li> <li>Cost-effective and open-source</li> </ul>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#essential-commands-for-network-automation","title":"Essential Commands for Network Automation","text":"","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#file-and-directory-management","title":"File and Directory Management","text":"<pre><code># Navigate directories\ncd /path/to/directory    # Change directory\npwd                      # Print working directory\nls -la                   # List files with details\n\n# Create and manage files\nmkdir automation         # Create directory\ntouch playbook.yml       # Create empty file\ncp source dest           # Copy files\nmv old_name new_name     # Move/rename files\nrm filename              # Remove file\nrm -rf directory         # Remove directory recursively\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#file-editing","title":"File Editing","text":"<pre><code># Text editors (choose one)\nnano playbook.yml        # Simple editor for beginners\nvim playbook.yml         # Advanced editor\ncode playbook.yml        # Visual Studio Code (if installed)\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#file-permissions","title":"File Permissions","text":"<pre><code># View permissions\nls -la\n\n# Change permissions\nchmod +x script.sh       # Make executable\nchmod 600 private_key    # Secure private key\nchown user:group file    # Change ownership\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#package-management","title":"Package Management","text":"<pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install package_name\n\n# CentOS/RHEL\nsudo yum install package_name\n# or\nsudo dnf install package_name\n\n# Python packages\npip install ansible\npip install --user ansible  # Install for current user only\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#process-management","title":"Process Management","text":"<pre><code># View running processes\nps aux | grep ansible\ntop                        # Interactive process viewer\nhtop                       # Enhanced top (if installed)\n\n# Kill processes\nkill process_id\nkillall process_name\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#network-commands","title":"Network Commands","text":"<pre><code># Network connectivity\nping 192.168.1.1\nssh user@hostname\nscp file user@hostname:/path/\nwget https://example.com/file\ncurl https://api.example.com/data\n\n# Network information\nip addr show\nip route show\nnetstat -tuln\nss -tuln\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#environment-and-variables","title":"Environment and Variables","text":"<pre><code># View environment variables\nenv\necho $PATH\necho $HOME\n\n# Set variables\nexport ANSIBLE_HOST_KEY_CHECKING=False\nexport EDITOR=nano\n\n# Persistent variables (add to ~/.bashrc)\necho 'export ANSIBLE_HOST_KEY_CHECKING=False' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#working-with-text-files","title":"Working with Text Files","text":"","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#viewing-files","title":"Viewing Files","text":"<pre><code># View entire file\ncat filename\n\n# View file page by page\nless filename\nmore filename\n\n# View beginning/end of file\nhead -20 filename\ntail -20 filename\ntail -f logfile    # Follow log file in real-time\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#searching-in-files","title":"Searching in Files","text":"<pre><code># Search for text in files\ngrep \"search_term\" filename\ngrep -r \"search_term\" directory/    # Recursive search\ngrep -i \"search_term\" filename      # Case insensitive\n\n# Find files\nfind . -name \"*.yml\"               # Find YAML files\nfind . -type f -name \"*.py\"        # Find Python files\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#shell-scripting-basics","title":"Shell Scripting Basics","text":"","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#simple-script-example","title":"Simple Script Example","text":"<pre><code>#!/bin/bash\n# This is a comment\n\n# Variables\nHOSTNAME=\"192.168.1.1\"\nUSERNAME=\"admin\"\n\n# Commands\necho \"Connecting to $HOSTNAME...\"\nssh $USERNAME@$HOSTNAME \"show version\"\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#make-script-executable","title":"Make Script Executable","text":"<pre><code>chmod +x script.sh\n./script.sh\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#virtual-environments","title":"Virtual Environments","text":"","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#python-virtual-environment","title":"Python Virtual Environment","text":"<pre><code># Create virtual environment\npython3 -m venv automation_env\n\n# Activate virtual environment\nsource automation_env/bin/activate    # Linux/macOS\n# automation_env\\Scripts\\activate     # Windows\n\n# Deactivate\ndeactivate\n\n# Install packages in virtual environment\npip install ansible\npip install -r requirements.txt\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#file-system-navigation","title":"File System Navigation","text":"","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#common-directories","title":"Common Directories","text":"<pre><code>/home/username/          # User home directory\n/etc/                    # System configuration\n/var/log/               # Log files\n/tmp/                   # Temporary files\n/usr/local/bin/         # User-installed programs\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#path-management","title":"Path Management","text":"<pre><code># Add directory to PATH\nexport PATH=$PATH:/path/to/scripts\n\n# Check if command exists\nwhich ansible\nwhereis ansible\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#best-practices","title":"Best Practices","text":"<ol> <li>Use Tab Completion: Press Tab to auto-complete commands and filenames</li> <li>Use History: Press Up/Down arrows to navigate command history</li> <li>Use Aliases: Create shortcuts for common commands</li> <li>Backup Important Files: Always backup before making changes</li> <li>Use Absolute Paths: When in doubt, use full paths</li> </ol>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#common-aliases-for-network-automation","title":"Common Aliases for Network Automation","text":"<p>Add these to your <code>~/.bashrc</code>:</p> <pre><code># Network automation aliases\nalias ansible-playbook='ansible-playbook -i inventory'\nalias ansible-inventory='ansible-inventory --list -i inventory'\nalias ansible-doc='ansible-doc -t module'\n\n# Quick navigation\nalias ll='ls -la'\nalias ..='cd ..'\nalias ...='cd ../..'\n</code></pre>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#learn-more","title":"Learn More","text":"<ul> <li>Linux Command Line Tutorial</li> <li>Bash Scripting Guide</li> <li>Linux Journey</li> </ul>","tags":["linux","basics","command line","automation"]},{"location":"blog/linux-basics-for-network-automation/#next-steps","title":"Next Steps","text":"<p>Once you're comfortable with Linux basics, explore: - Ansible Introduction &amp; Getting Started - Visual Studio Code for Network Automation - Git Basics for Version Control </p>","tags":["linux","basics","command line","automation"]},{"location":"blog/nautobot/","title":"Nautobot","text":"<p>Nautobot is an open-source, extensible platform for network automation and source of truth (SSoT). It builds on the concepts of IPAM and DCIM, adding powerful automation, plugin, and integration capabilities for modern network operations.</p>","tags":["nautobot","network automation","source of truth","ssot","cmdb"]},{"location":"blog/nautobot/#key-features","title":"Key Features","text":"<ul> <li>Source of truth for devices, IPs, circuits, and more</li> <li>Extensible with plugins, jobs, and custom apps</li> <li>REST and GraphQL APIs for automation</li> <li>SSoT and CMDB capabilities</li> <li>Dynamic inventory for Ansible and other tools</li> <li>Rich UI and visualization</li> </ul>","tags":["nautobot","network automation","source of truth","ssot","cmdb"]},{"location":"blog/nautobot/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Centralizing network inventory and documentation</li> <li>Automating device provisioning and configuration</li> <li>Integrating with Ansible, Nornir, or custom scripts</li> <li>Building custom workflows and apps for network operations</li> </ul>","tags":["nautobot","network automation","source of truth","ssot","cmdb"]},{"location":"blog/nautobot/#resources","title":"Resources","text":"<ul> <li>Official Nautobot Documentation</li> <li>Nautobot GitHub</li> <li>Nautobot SSoT Blog Post</li> <li>Nautobot Blog Posts (search for Nautobot-related content)</li> </ul> <p>For more on using Nautobot in network automation, see the NetDevOps Tools Index. </p>","tags":["nautobot","network automation","source of truth","ssot","cmdb"]},{"location":"blog/netbox/","title":"NetBox","text":"<p>NetBox is a popular open-source tool for IP Address Management (IPAM) and Data Center Infrastructure Management (DCIM). It serves as a \"source of truth\" for network automation, helping you document, visualize, and manage your network and data center assets.</p>","tags":["netbox","ipam","dcim","network automation","source of truth"]},{"location":"blog/netbox/#key-features","title":"Key Features","text":"<ul> <li>IP address management (IPv4/IPv6)</li> <li>Rack and device inventory</li> <li>Circuit and connection tracking</li> <li>VLANs, VRFs, and prefixes</li> <li>Powerful REST and GraphQL APIs</li> <li>Extensible with plugins and webhooks</li> </ul>","tags":["netbox","ipam","dcim","network automation","source of truth"]},{"location":"blog/netbox/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Documenting network and data center infrastructure</li> <li>Automating device provisioning and configuration</li> <li>Integrating with Ansible, Nornir, or other automation tools</li> <li>Visualizing network topologies</li> </ul>","tags":["netbox","ipam","dcim","network automation","source of truth"]},{"location":"blog/netbox/#resources","title":"Resources","text":"<ul> <li>Official NetBox Documentation</li> <li>NetBox GitHub</li> <li>NetBox Blog Posts (search for NetBox-related content)</li> </ul> <p>For more on using NetBox in network automation, see the NetDevOps Tools Index. </p>","tags":["netbox","ipam","dcim","network automation","source of truth"]},{"location":"blog/netpickerio/","title":"NetPicker.io","text":"<p>NetPicker.io is a network discovery and inventory management platform designed specifically for network automation and NetDevOps workflows. It provides automated network device discovery, configuration collection, and inventory management to support modern network operations.</p>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#key-features","title":"Key Features","text":"<ul> <li>Automated Network Discovery: Scan and discover network devices automatically</li> <li>Configuration Collection: Gather device configurations and settings</li> <li>Inventory Management: Centralized network device inventory</li> <li>API Integration: RESTful APIs for automation workflows</li> <li>Real-time Monitoring: Live device status and health monitoring</li> <li>Multi-vendor Support: Works with Cisco, Juniper, Arista, and other vendors</li> <li>Cloud-native Architecture: Scalable and modern platform design</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Network Inventory Automation: Automatically discover and catalog network devices</li> <li>Configuration Management: Collect and track device configurations</li> <li>Network Documentation: Generate up-to-date network documentation</li> <li>Automation Workflows: Integrate with Ansible, Terraform, and other automation tools</li> <li>Compliance Auditing: Track device configurations for compliance requirements</li> <li>Network Mapping: Visualize network topology and device relationships</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#getting-started","title":"Getting Started","text":"","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#1-sign-up-and-setup","title":"1. Sign Up and Setup","text":"<ol> <li>Visit netpicker.io</li> <li>Create an account and verify your email</li> <li>Complete the initial setup wizard</li> <li>Configure your network scanning parameters</li> </ol>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#deployment-options","title":"Deployment Options","text":"<p>NetPicker.io offers multiple deployment options to suit different environments and requirements:</p>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#cloud-deployment-saas","title":"Cloud Deployment (SaaS)","text":"<ul> <li>Quick Start: Sign up at netpicker.io for immediate access</li> <li>Managed Service: Fully managed by NetPicker.io team</li> <li>Automatic Updates: Always running the latest version</li> <li>Scalability: Handles growing network environments automatically</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#on-premise-deployment","title":"On-Premise Deployment","text":"<p>NetPicker.io can be deployed on your own infrastructure for enhanced security and control:</p>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#docker-deployment","title":"Docker Deployment","text":"<pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  netpicker:\n    image: netpicker/netpicker:latest\n    container_name: netpicker\n    ports:\n      - \"8080:8080\"\n    environment:\n      - NP_DATABASE_URL=postgresql://user:password@db:5432/netpicker\n      - NP_REDIS_URL=redis://redis:6379\n      - NP_SECRET_KEY=your-secret-key\n    volumes:\n      - netpicker_data:/app/data\n      - netpicker_logs:/app/logs\n    depends_on:\n      - db\n      - redis\n\n  db:\n    image: postgres:13\n    container_name: netpicker-db\n    environment:\n      - POSTGRES_DB=netpicker\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  redis:\n    image: redis:6-alpine\n    container_name: netpicker-redis\n    volumes:\n      - redis_data:/data\n\nvolumes:\n  netpicker_data:\n  netpicker_logs:\n  postgres_data:\n  redis_data:\n</code></pre>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#terraform-deployment","title":"Terraform Deployment","text":"<pre><code># main.tf\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"~&gt; 3.0\"\n    }\n  }\n}\n\nresource \"docker_network\" \"netpicker_network\" {\n  name = \"netpicker-network\"\n}\n\nresource \"docker_volume\" \"netpicker_data\" {\n  name = \"netpicker-data\"\n}\n\nresource \"docker_volume\" \"postgres_data\" {\n  name = \"postgres-data\"\n}\n\nresource \"docker_container\" \"netpicker_db\" {\n  name  = \"netpicker-db\"\n  image = \"postgres:13\"\n\n  networks_advanced {\n    name = docker_network.netpicker_network.name\n  }\n\n  volumes {\n    volume_name    = docker_volume.postgres_data.name\n    container_path = \"/var/lib/postgresql/data\"\n  }\n\n  env = [\n    \"POSTGRES_DB=netpicker\",\n    \"POSTGRES_USER=netpicker\",\n    \"POSTGRES_PASSWORD=${var.db_password}\"\n  ]\n}\n\nresource \"docker_container\" \"netpicker\" {\n  name  = \"netpicker\"\n  image = \"netpicker/netpicker:latest\"\n\n  networks_advanced {\n    name = docker_network.netpicker_network.name\n  }\n\n  volumes {\n    volume_name    = docker_volume.netpicker_data.name\n    container_path = \"/app/data\"\n  }\n\n  ports {\n    internal = 8080\n    external = 8080\n  }\n\n  env = [\n    \"NP_DATABASE_URL=postgresql://netpicker:${var.db_password}@netpicker-db:5432/netpicker\",\n    \"NP_SECRET_KEY=${var.secret_key}\"\n  ]\n\n  depends_on = [docker_container.netpicker_db]\n}\n\n# variables.tf\nvariable \"db_password\" {\n  description = \"Database password\"\n  type        = string\n  sensitive   = true\n}\n\nvariable \"secret_key\" {\n  description = \"NetPicker secret key\"\n  type        = string\n  sensitive   = true\n}\n</code></pre>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># netpicker-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: netpicker\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: netpicker\n  template:\n    metadata:\n      labels:\n        app: netpicker\n    spec:\n      containers:\n      - name: netpicker\n        image: netpicker/netpicker:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: NP_DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: netpicker-secrets\n              key: database-url\n        - name: NP_SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: netpicker-secrets\n              key: secret-key\n        volumeMounts:\n        - name: netpicker-data\n          mountPath: /app/data\n      volumes:\n      - name: netpicker-data\n        persistentVolumeClaim:\n          claimName: netpicker-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: netpicker-service\nspec:\n  selector:\n    app: netpicker\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: LoadBalancer\n</code></pre>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#deployment-considerations","title":"Deployment Considerations","text":"","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#cloud-vs-on-premise","title":"Cloud vs On-Premise","text":"<ul> <li>Cloud: Faster setup, managed updates, no infrastructure maintenance</li> <li>On-Premise: Full control, data sovereignty, custom integrations</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#resource-requirements","title":"Resource Requirements","text":"<ul> <li>Minimum: 2 CPU cores, 4GB RAM, 20GB storage</li> <li>Recommended: 4 CPU cores, 8GB RAM, 100GB storage</li> <li>Database: PostgreSQL 12+ or MySQL 8+</li> <li>Cache: Redis 6+ (optional but recommended)</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#security-considerations","title":"Security Considerations","text":"<ul> <li>Use HTTPS in production</li> <li>Implement proper authentication and authorization</li> <li>Secure database connections</li> <li>Regular security updates</li> <li>Network segmentation for sensitive environments</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#2-network-discovery","title":"2. Network Discovery","text":"<ol> <li>Add Network Ranges: Define IP ranges to scan</li> <li>Configure Credentials: Add device access credentials</li> <li>Start Discovery: Initiate automated network scanning</li> <li>Review Results: Verify discovered devices and configurations</li> </ol>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#3-api-integration","title":"3. API Integration","text":"<pre><code># Example API call to get device inventory\ncurl -X GET \"https://api.netpicker.io/v1/devices\" \\\n  -H \"Authorization: Bearer YOUR_API_TOKEN\" \\\n  -H \"Content-Type: application/json\"\n</code></pre>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#4-automation-integration","title":"4. Automation Integration","text":"<pre><code># Example Ansible integration\n- name: Get device inventory from NetPicker\n  uri:\n    url: \"https://api.netpicker.io/v1/devices\"\n    method: GET\n    headers:\n      Authorization: \"Bearer {{ netpicker_api_token }}\"\n    return_content: yes\n  register: netpicker_devices\n</code></pre>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#integration-examples","title":"Integration Examples","text":"","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#ansible-integration","title":"Ansible Integration","text":"<pre><code># Use NetPicker as dynamic inventory source\n- name: Configure network devices from NetPicker inventory\n  hosts: \"{{ groups['network_devices'] }}\"\n  gather_facts: no\n  tasks:\n    - name: Get device configuration\n      uri:\n        url: \"https://api.netpicker.io/v1/devices/{{ inventory_hostname }}/config\"\n        method: GET\n        headers:\n          Authorization: \"Bearer {{ netpicker_api_token }}\"\n      register: device_config\n</code></pre>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#terraform-integration","title":"Terraform Integration","text":"<pre><code># Use NetPicker data source for infrastructure management\ndata \"external\" \"netpicker_devices\" {\n  program = [\"curl\", \"-s\", \"-H\", \"Authorization: Bearer ${var.netpicker_token}\", \n             \"https://api.netpicker.io/v1/devices\"]\n}\n\nresource \"aws_instance\" \"network_monitor\" {\n  count = length(data.external.netpicker_devices.result.devices)\n  # ... instance configuration\n}\n</code></pre>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#best-practices","title":"Best Practices","text":"","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#1-credential-management","title":"1. Credential Management","text":"<ul> <li>Use secure credential storage</li> <li>Implement role-based access control</li> <li>Rotate credentials regularly</li> <li>Use API tokens for automation</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#2-network-scanning","title":"2. Network Scanning","text":"<ul> <li>Schedule scans during maintenance windows</li> <li>Use appropriate scan intervals</li> <li>Monitor scan performance and resource usage</li> <li>Validate discovered devices</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#3-data-management","title":"3. Data Management","text":"<ul> <li>Regular backups of inventory data</li> <li>Version control for configuration changes</li> <li>Data retention policies</li> <li>Compliance with data protection regulations</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#4-integration-strategy","title":"4. Integration Strategy","text":"<ul> <li>Start with basic discovery and inventory</li> <li>Gradually add automation workflows</li> <li>Implement monitoring and alerting</li> <li>Build custom integrations as needed</li> </ul>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/netpickerio/#resources","title":"Resources","text":"<ul> <li>Official NetPicker.io Documentation</li> <li>NetPicker.io API Reference</li> <li>NetPicker.io Blog</li> <li>Community Forum</li> </ul> <p>For more on network automation tools, see the NetDevOps Tools Index.</p>","tags":["netpicker","network automation","network discovery","inventory management","network mapping"]},{"location":"blog/nornir-introduction--getting-started/","title":"Nornir: Introduction &amp; Getting Started","text":"<p>Nornir is a pure Python automation framework for network engineers. It provides inventory management, task execution, and plugin support for network automation workflows.</p>","tags":["nornir","network automation","python","devops"]},{"location":"blog/nornir-introduction--getting-started/#why-use-nornir","title":"Why Use Nornir?","text":"<ul> <li>Automate network device configuration and validation</li> <li>Use Python for full programmability</li> <li>Integrate with other Python libraries and tools</li> </ul>","tags":["nornir","network automation","python","devops"]},{"location":"blog/nornir-introduction--getting-started/#how-nornir-works","title":"How Nornir Works","text":"<ul> <li>Inventory is defined in YAML or Python</li> <li>Tasks are Python functions (or plugins)</li> <li>Results are returned as Python objects for further processing</li> </ul>","tags":["nornir","network automation","python","devops"]},{"location":"blog/nornir-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Install Nornir: <pre><code>pip install nornir\n</code></pre></li> <li>Create a simple inventory (<code>inventory/hosts.yaml</code>): <pre><code>r1:\n  hostname: 192.0.2.1\n  username: admin\n  password: admin\n</code></pre></li> <li>Write a basic script (<code>main.py</code>): <pre><code>from nornir import InitNornir\nfrom nornir.core.task import Task, Result\n\ndef hello_world(task: Task) -&gt; Result:\n    return Result(host=task.host, result=f\"Hello from {task.host.name}\")\n\nnr = InitNornir()\nresult = nr.run(task=hello_world)\nprint(result)\n</code></pre></li> <li>Run the script: <pre><code>python main.py\n</code></pre></li> </ol>","tags":["nornir","network automation","python","devops"]},{"location":"blog/nornir-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>Nornir Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["nornir","network automation","python","devops"]},{"location":"blog/opentofu-introduction--getting-started/","title":"OpenTofu: Introduction &amp; Getting Started","text":"<p>OpenTofu is an open-source infrastructure as code (IaC) tool, forked from Terraform, designed to provision and manage cloud and on-premises resources declaratively.</p>","tags":["opentofu","infrastructure as code","automation","devops"]},{"location":"blog/opentofu-introduction--getting-started/#why-use-opentofu","title":"Why Use OpenTofu?","text":"<ul> <li>Open-source alternative to Terraform</li> <li>Manage infrastructure as code across multiple providers</li> <li>Declarative, version-controlled infrastructure</li> </ul>","tags":["opentofu","infrastructure as code","automation","devops"]},{"location":"blog/opentofu-introduction--getting-started/#how-opentofu-works","title":"How OpenTofu Works","text":"<ul> <li>Uses HCL (HashiCorp Configuration Language) for configuration files</li> <li>Providers enable support for different platforms (AWS, Azure, etc.)</li> <li>State files track resource status</li> </ul>","tags":["opentofu","infrastructure as code","automation","devops"]},{"location":"blog/opentofu-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Install OpenTofu: <pre><code>curl -sSfL https://get.opentofu.org/install.sh | sh\ntofu --version\n</code></pre></li> <li>Write a simple configuration (<code>main.tf</code>): <pre><code>terraform {\n  required_providers {\n    random = {\n      source = \"hashicorp/random\"\n    }\n  }\n}\n\nprovider \"random\" {}\n\nresource \"random_pet\" \"name\" {}\n\noutput \"pet_name\" {\n  value = random_pet.name.id\n}\n</code></pre></li> <li>Initialize and apply: <pre><code>tofu init\ntofu apply\n</code></pre></li> </ol>","tags":["opentofu","infrastructure as code","automation","devops"]},{"location":"blog/opentofu-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>OpenTofu Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["opentofu","infrastructure as code","automation","devops"]},{"location":"blog/opsmill/","title":"OpsMill","text":"<p>OpsMill is a modern platform for network automation and orchestration. It provides a unified interface for managing, automating, and monitoring network infrastructure, supporting both traditional and cloud-native environments.</p> <p></p>","tags":["opsmill","network automation","orchestration","source of truth"]},{"location":"blog/opsmill/#key-features","title":"Key Features","text":"<ul> <li>Unified network automation and orchestration</li> <li>Source of truth for network inventory</li> <li>GraphQL and REST APIs for automation</li> <li>Integration with Ansible, Terraform, and other tools</li> <li>Visualization and reporting dashboards</li> <li>Extensible with plugins and custom workflows</li> </ul>","tags":["opsmill","network automation","orchestration","source of truth"]},{"location":"blog/opsmill/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Automating network device provisioning and configuration</li> <li>Centralizing network inventory and documentation</li> <li>Integrating with CI/CD pipelines</li> <li>Monitoring and compliance reporting</li> </ul>","tags":["opsmill","network automation","orchestration","source of truth"]},{"location":"blog/opsmill/#resources","title":"Resources","text":"<ul> <li>Official OpsMill Documentation</li> <li>OpsMill Blog Posts (search for OpsMill-related content)</li> </ul> <p>For more on using OpsMill in network automation, see the NetDevOps Tools Index. </p>","tags":["opsmill","network automation","orchestration","source of truth"]},{"location":"blog/prometheus-introduction--getting-started/","title":"Prometheus: Introduction &amp; Getting Started","text":"<p>Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability. It is widely used for collecting metrics and powering observability in cloud-native environments.</p>","tags":["prometheus","monitoring","observability","devops"]},{"location":"blog/prometheus-introduction--getting-started/#why-use-prometheus","title":"Why Use Prometheus?","text":"<ul> <li>Collect and store time-series metrics</li> <li>Powerful query language (PromQL)</li> <li>Integrates with Grafana and alerting systems</li> </ul>","tags":["prometheus","monitoring","observability","devops"]},{"location":"blog/prometheus-introduction--getting-started/#how-prometheus-works","title":"How Prometheus Works","text":"<ul> <li>Scrapes metrics from targets via HTTP endpoints</li> <li>Stores data in a time-series database</li> <li>Supports service discovery and dynamic environments</li> </ul>","tags":["prometheus","monitoring","observability","devops"]},{"location":"blog/prometheus-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Run Prometheus (Docker): <pre><code>docker run -d -p 9090:9090 prom/prometheus\n</code></pre></li> <li>Access the UI:</li> <li>Open <code>http://localhost:9090</code> in your browser</li> <li>Add a scrape target (edit <code>prometheus.yml</code>): <pre><code>scrape_configs:\n  - job_name: 'example'\n    static_configs:\n      - targets: ['localhost:9090']\n</code></pre></li> <li>Reload Prometheus config:</li> <li>Use the UI or send a SIGHUP to the container</li> </ol>","tags":["prometheus","monitoring","observability","devops"]},{"location":"blog/prometheus-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>Prometheus Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["prometheus","monitoring","observability","devops"]},{"location":"blog/pyats-introduction--getting-started/","title":"pyATS: Introduction &amp; Getting Started","text":"<p>pyATS (Python Automated Test System) is an open-source network testing and validation framework developed by Cisco. It enables engineers to automate network testing, validation, and verification tasks.</p>","tags":["pyats","network testing","validation","automation","devops"]},{"location":"blog/pyats-introduction--getting-started/#why-use-pyats","title":"Why Use pyATS?","text":"<ul> <li>Automate network device testing and validation</li> <li>Perform pre- and post-change checks</li> <li>Integrate with CI/CD pipelines for continuous network validation</li> <li>Use Genie for parsing and model-driven testing</li> </ul>","tags":["pyats","network testing","validation","automation","devops"]},{"location":"blog/pyats-introduction--getting-started/#how-pyats-works","title":"How pyATS Works","text":"<ul> <li>Uses Python scripts and YAML testbeds to define network topologies</li> <li>Test scripts (jobs) automate device connections, command execution, and result validation</li> <li>Genie library provides parsers and test harnesses</li> </ul>","tags":["pyats","network testing","validation","automation","devops"]},{"location":"blog/pyats-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Install pyATS and Genie: <pre><code>pip install pyats[full]\npip install genie\n</code></pre></li> <li>Create a testbed YAML file (<code>testbed.yaml</code>): <pre><code>devices:\n  r1:\n    os: iosxe\n    type: router\n    connections:\n      cli:\n        protocol: ssh\n        ip: 192.0.2.1\n    credentials:\n      default:\n        username: admin\n        password: admin\n</code></pre></li> <li>Write a simple test script (<code>test.py</code>): <pre><code>from pyats.topology import loader\n\ntestbed = loader.load('testbed.yaml')\ndevice = testbed.devices['r1']\ndevice.connect()\noutput = device.execute('show version')\nprint(output)\ndevice.disconnect()\n</code></pre></li> <li>Run the script: <pre><code>python test.py\n</code></pre></li> </ol>","tags":["pyats","network testing","validation","automation","devops"]},{"location":"blog/pyats-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>pyATS Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["pyats","network testing","validation","automation","devops"]},{"location":"blog/saltstack-introduction--getting-started/","title":"SaltStack: Introduction &amp; Getting Started","text":"<p>SaltStack (Salt) is an open-source automation and configuration management tool designed for fast, scalable, and secure infrastructure automation.</p>","tags":["saltstack","automation","configuration management","devops"]},{"location":"blog/saltstack-introduction--getting-started/#why-use-saltstack","title":"Why Use SaltStack?","text":"<ul> <li>Automate configuration and deployment</li> <li>Manage large-scale infrastructure</li> <li>Real-time remote execution</li> <li>Event-driven automation</li> </ul>","tags":["saltstack","automation","configuration management","devops"]},{"location":"blog/saltstack-introduction--getting-started/#how-saltstack-works","title":"How SaltStack Works","text":"<ul> <li>Uses a master/minion architecture (or masterless mode)</li> <li>States define desired system configuration in YAML</li> <li>Modules perform actions (e.g., install packages, manage services)</li> </ul>","tags":["saltstack","automation","configuration management","devops"]},{"location":"blog/saltstack-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Install Salt (master and minion): <pre><code>sudo apt install salt-master salt-minion\n# or use pip for latest version\npip install salt\n</code></pre></li> <li>Start the master and minion services: <pre><code>sudo systemctl start salt-master\nsudo systemctl start salt-minion\n</code></pre></li> <li>Accept the minion key on the master: <pre><code>sudo salt-key -A\n</code></pre></li> <li>Write a simple state file (<code>apache.sls</code>): <pre><code>install_apache:\n  pkg.installed:\n    - name: apache2\n</code></pre></li> <li>Apply the state to the minion: <pre><code>sudo salt '&lt;minion-id&gt;' state.apply apache\n</code></pre></li> </ol>","tags":["saltstack","automation","configuration management","devops"]},{"location":"blog/saltstack-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>SaltStack Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["saltstack","automation","configuration management","devops"]},{"location":"blog/slurpitio/","title":"SlurpIT.io","text":"<p>SlurpIT.io is a network configuration management and orchestration platform designed to simplify network automation through intelligent API management, workflow automation, and configuration orchestration. It provides a unified interface for managing multi-vendor network environments.</p>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#key-features","title":"Key Features","text":"<ul> <li>Multi-vendor API Management: Unified interface for Cisco, Juniper, Arista, and other vendors</li> <li>Workflow Automation: Visual workflow builder for complex network operations</li> <li>Configuration Orchestration: Manage configurations across multiple devices simultaneously</li> <li>Real-time Monitoring: Live device status and configuration tracking</li> <li>Version Control: Track configuration changes with rollback capabilities</li> <li>RESTful APIs: Comprehensive API for integration with existing tools</li> <li>Template Management: Reusable configuration templates and snippets</li> <li>Audit Trail: Complete logging and audit capabilities</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Configuration Management: Deploy and manage configurations across network devices</li> <li>Network Orchestration: Coordinate complex network changes and migrations</li> <li>API Integration: Simplify multi-vendor API interactions</li> <li>Workflow Automation: Automate repetitive network operations</li> <li>Change Management: Implement controlled configuration changes</li> <li>Compliance Management: Ensure network configurations meet compliance requirements</li> <li>Network Testing: Validate configurations before deployment</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#getting-started","title":"Getting Started","text":"","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#1-platform-setup","title":"1. Platform Setup","text":"<ol> <li>Visit slurpit.io</li> <li>Create an account and complete onboarding</li> <li>Set up your organization and team structure</li> <li>Configure initial device connections</li> </ol>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#deployment-options","title":"Deployment Options","text":"<p>SlurpIT.io provides flexible deployment options to meet various organizational needs:</p>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#cloud-deployment-saas","title":"Cloud Deployment (SaaS)","text":"<ul> <li>Instant Access: Sign up at slurpit.io for immediate platform access</li> <li>Fully Managed: Handled by SlurpIT.io team with automatic updates</li> <li>Enterprise Features: Advanced security, compliance, and scalability</li> <li>Global Availability: Accessible from anywhere with internet connectivity</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#on-premise-deployment","title":"On-Premise Deployment","text":"<p>SlurpIT.io can be deployed on your own infrastructure for maximum control and security:</p>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#docker-deployment","title":"Docker Deployment","text":"<pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  slurpit:\n    image: slurpit/slurpit:latest\n    container_name: slurpit\n    ports:\n      - \"8080:8080\"\n    environment:\n      - SLURPIT_DATABASE_URL=postgresql://user:password@db:5432/slurpit\n      - SLURPIT_REDIS_URL=redis://redis:6379\n      - SLURPIT_SECRET_KEY=your-secret-key\n      - SLURPIT_ENVIRONMENT=production\n    volumes:\n      - slurpit_data:/app/data\n      - slurpit_configs:/app/configs\n      - slurpit_logs:/app/logs\n    depends_on:\n      - db\n      - redis\n    restart: unless-stopped\n\n  db:\n    image: postgres:13\n    container_name: slurpit-db\n    environment:\n      - POSTGRES_DB=slurpit\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\n  redis:\n    image: redis:6-alpine\n    container_name: slurpit-redis\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    container_name: slurpit-nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - slurpit\n    restart: unless-stopped\n\nvolumes:\n  slurpit_data:\n  slurpit_configs:\n  slurpit_logs:\n  postgres_data:\n  redis_data:\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#terraform-deployment","title":"Terraform Deployment","text":"<pre><code># main.tf\nterraform {\n  required_providers {\n    docker = {\n      source  = \"kreuzwerker/docker\"\n      version = \"~&gt; 3.0\"\n    }\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\n# Create Docker network\nresource \"docker_network\" \"slurpit_network\" {\n  name = \"slurpit-network\"\n}\n\n# Create volumes\nresource \"docker_volume\" \"slurpit_data\" {\n  name = \"slurpit-data\"\n}\n\nresource \"docker_volume\" \"slurpit_configs\" {\n  name = \"slurpit-configs\"\n}\n\nresource \"docker_volume\" \"postgres_data\" {\n  name = \"postgres-data\"\n}\n\n# PostgreSQL database\nresource \"docker_container\" \"slurpit_db\" {\n  name  = \"slurpit-db\"\n  image = \"postgres:13\"\n\n  networks_advanced {\n    name = docker_network.slurpit_network.name\n  }\n\n  volumes {\n    volume_name    = docker_volume.postgres_data.name\n    container_path = \"/var/lib/postgresql/data\"\n  }\n\n  env = [\n    \"POSTGRES_DB=slurpit\",\n    \"POSTGRES_USER=slurpit\",\n    \"POSTGRES_PASSWORD=${var.db_password}\"\n  ]\n\n  restart = \"unless-stopped\"\n}\n\n# Redis cache\nresource \"docker_container\" \"slurpit_redis\" {\n  name  = \"slurpit-redis\"\n  image = \"redis:6-alpine\"\n\n  networks_advanced {\n    name = docker_network.slurpit_network.name\n  }\n\n  restart = \"unless-stopped\"\n}\n\n# SlurpIT application\nresource \"docker_container\" \"slurpit\" {\n  name  = \"slurpit\"\n  image = \"slurpit/slurpit:latest\"\n\n  networks_advanced {\n    name = docker_network.slurpit_network.name\n  }\n\n  volumes {\n    volume_name    = docker_volume.slurpit_data.name\n    container_path = \"/app/data\"\n  }\n\n  volumes {\n    volume_name    = docker_volume.slurpit_configs.name\n    container_path = \"/app/configs\"\n  }\n\n  ports {\n    internal = 8080\n    external = 8080\n  }\n\n  env = [\n    \"SLURPIT_DATABASE_URL=postgresql://slurpit:${var.db_password}@slurpit-db:5432/slurpit\",\n    \"SLURPIT_REDIS_URL=redis://slurpit-redis:6379\",\n    \"SLURPIT_SECRET_KEY=${var.secret_key}\",\n    \"SLURPIT_ENVIRONMENT=production\"\n  ]\n\n  depends_on = [docker_container.slurpit_db, docker_container.slurpit_redis]\n  restart    = \"unless-stopped\"\n}\n\n# Nginx reverse proxy\nresource \"docker_container\" \"slurpit_nginx\" {\n  name  = \"slurpit-nginx\"\n  image = \"nginx:alpine\"\n\n  networks_advanced {\n    name = docker_network.slurpit_network.name\n  }\n\n  ports {\n    internal = 80\n    external = 80\n  }\n\n  ports {\n    internal = 443\n    external = 443\n  }\n\n  volumes {\n    host_path      = \"${path.module}/nginx.conf\"\n    container_path = \"/etc/nginx/nginx.conf\"\n  }\n\n  depends_on = [docker_container.slurpit]\n  restart    = \"unless-stopped\"\n}\n\n# variables.tf\nvariable \"db_password\" {\n  description = \"Database password\"\n  type        = string\n  sensitive   = true\n}\n\nvariable \"secret_key\" {\n  description = \"SlurpIT secret key\"\n  type        = string\n  sensitive   = true\n}\n\n# outputs.tf\noutput \"slurpit_url\" {\n  description = \"SlurpIT application URL\"\n  value       = \"http://localhost:8080\"\n}\n\noutput \"nginx_url\" {\n  description = \"Nginx proxy URL\"\n  value       = \"http://localhost\"\n}\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># slurpit-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: slurpit\n  labels:\n    app: slurpit\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: slurpit\n  template:\n    metadata:\n      labels:\n        app: slurpit\n    spec:\n      containers:\n      - name: slurpit\n        image: slurpit/slurpit:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: SLURPIT_DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: slurpit-secrets\n              key: database-url\n        - name: SLURPIT_REDIS_URL\n          value: \"redis://slurpit-redis:6379\"\n        - name: SLURPIT_SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: slurpit-secrets\n              key: secret-key\n        - name: SLURPIT_ENVIRONMENT\n          value: \"production\"\n        volumeMounts:\n        - name: slurpit-data\n          mountPath: /app/data\n        - name: slurpit-configs\n          mountPath: /app/configs\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: slurpit-data\n        persistentVolumeClaim:\n          claimName: slurpit-data-pvc\n      - name: slurpit-configs\n        persistentVolumeClaim:\n          claimName: slurpit-configs-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: slurpit-service\nspec:\n  selector:\n    app: slurpit\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: slurpit-data-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: slurpit-configs-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#deployment-considerations","title":"Deployment Considerations","text":"","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#cloud-vs-on-premise","title":"Cloud vs On-Premise","text":"<ul> <li>Cloud: Zero infrastructure management, automatic scaling, global availability</li> <li>On-Premise: Complete data control, custom integrations, air-gapped environments</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#resource-requirements","title":"Resource Requirements","text":"<ul> <li>Minimum: 2 CPU cores, 4GB RAM, 50GB storage</li> <li>Recommended: 4 CPU cores, 8GB RAM, 200GB storage</li> <li>Database: PostgreSQL 12+ or MySQL 8+</li> <li>Cache: Redis 6+ (required for performance)</li> <li>Network: Stable connectivity to managed devices</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#security-considerations","title":"Security Considerations","text":"<ul> <li>Implement HTTPS/TLS encryption</li> <li>Use strong authentication and RBAC</li> <li>Secure database connections with SSL</li> <li>Regular security patches and updates</li> <li>Network segmentation and firewall rules</li> <li>Audit logging and monitoring</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#2-device-integration","title":"2. Device Integration","text":"<ol> <li>Add Network Devices: Connect your network devices to SlurpIT</li> <li>Configure Credentials: Set up secure access credentials</li> <li>Test Connectivity: Verify device connectivity and API access</li> <li>Discover Capabilities: Automatically discover device features and APIs</li> </ol>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#3-workflow-creation","title":"3. Workflow Creation","text":"<pre><code># Example workflow definition\nworkflow:\n  name: \"Network Configuration Update\"\n  description: \"Update network configurations across multiple devices\"\n  steps:\n    - name: \"Backup Current Configuration\"\n      action: \"backup_config\"\n      devices: \"{{ target_devices }}\"\n\n    - name: \"Validate New Configuration\"\n      action: \"validate_config\"\n      template: \"new_config_template\"\n\n    - name: \"Deploy Configuration\"\n      action: \"deploy_config\"\n      devices: \"{{ target_devices }}\"\n      template: \"new_config_template\"\n\n    - name: \"Verify Deployment\"\n      action: \"verify_config\"\n      devices: \"{{ target_devices }}\"\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#4-api-integration","title":"4. API Integration","text":"<pre><code># Example API call to execute workflow\ncurl -X POST \"https://api.slurpit.io/v1/workflows/execute\" \\\n  -H \"Authorization: Bearer YOUR_API_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"workflow_id\": \"config_update_workflow\",\n    \"parameters\": {\n      \"target_devices\": [\"router1\", \"router2\", \"switch1\"],\n      \"config_template\": \"vlan_update_template\"\n    }\n  }'\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#integration-examples","title":"Integration Examples","text":"","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#ansible-integration","title":"Ansible Integration","text":"<pre><code># Use SlurpIT as configuration source\n- name: Deploy network configuration via SlurpIT\n  hosts: localhost\n  gather_facts: no\n  tasks:\n    - name: Execute SlurpIT workflow\n      uri:\n        url: \"https://api.slurpit.io/v1/workflows/execute\"\n        method: POST\n        headers:\n          Authorization: \"Bearer {{ slurpit_api_token }}\"\n          Content-Type: \"application/json\"\n        body_format: json\n        body:\n          workflow_id: \"{{ workflow_id }}\"\n          parameters: \"{{ workflow_parameters }}\"\n      register: workflow_result\n\n    - name: Wait for workflow completion\n      uri:\n        url: \"https://api.slurpit.io/v1/workflows/{{ workflow_result.json.workflow_run_id }}/status\"\n        method: GET\n        headers:\n          Authorization: \"Bearer {{ slurpit_api_token }}\"\n      register: workflow_status\n      until: workflow_status.json.status in ['completed', 'failed']\n      retries: 30\n      delay: 10\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#terraform-integration","title":"Terraform Integration","text":"<pre><code># Use SlurpIT for network configuration management\nresource \"slurpit_workflow_execution\" \"network_config\" {\n  workflow_id = \"network_configuration_workflow\"\n\n  parameters = {\n    target_devices = var.network_devices\n    config_template = var.config_template\n    environment = var.environment\n  }\n\n  depends_on = [aws_instance.network_devices]\n}\n\noutput \"workflow_status\" {\n  value = slurpit_workflow_execution.network_config.status\n}\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#python-integration","title":"Python Integration","text":"<pre><code>import requests\nimport json\n\nclass SlurpITClient:\n    def __init__(self, api_token, base_url=\"https://api.slurpit.io/v1\"):\n        self.api_token = api_token\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def execute_workflow(self, workflow_id, parameters=None):\n        \"\"\"Execute a SlurpIT workflow\"\"\"\n        url = f\"{self.base_url}/workflows/execute\"\n        payload = {\n            \"workflow_id\": workflow_id,\n            \"parameters\": parameters or {}\n        }\n\n        response = requests.post(url, headers=self.headers, json=payload)\n        return response.json()\n\n    def get_workflow_status(self, workflow_run_id):\n        \"\"\"Get workflow execution status\"\"\"\n        url = f\"{self.base_url}/workflows/{workflow_run_id}/status\"\n        response = requests.get(url, headers=self.headers)\n        return response.json()\n\n# Usage example\nclient = SlurpITClient(\"your_api_token\")\nresult = client.execute_workflow(\"network_config_workflow\", {\n    \"devices\": [\"router1\", \"router2\"],\n    \"config\": \"vlan_configuration\"\n})\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#best-practices","title":"Best Practices","text":"","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#1-workflow-design","title":"1. Workflow Design","text":"<ul> <li>Start with simple, single-device workflows</li> <li>Gradually build complex multi-device workflows</li> <li>Include validation and rollback steps</li> <li>Test workflows in non-production environments first</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#2-configuration-management","title":"2. Configuration Management","text":"<ul> <li>Use version control for configuration templates</li> <li>Implement change approval processes</li> <li>Maintain configuration backups</li> <li>Document configuration changes</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#3-security-and-access-control","title":"3. Security and Access Control","text":"<ul> <li>Use API tokens for automation</li> <li>Implement role-based access control</li> <li>Secure credential storage</li> <li>Regular security audits</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#4-monitoring-and-alerting","title":"4. Monitoring and Alerting","text":"<ul> <li>Monitor workflow execution status</li> <li>Set up alerts for failed workflows</li> <li>Track configuration changes</li> <li>Monitor device connectivity</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#5-integration-strategy","title":"5. Integration Strategy","text":"<ul> <li>Start with basic device connectivity</li> <li>Add simple configuration workflows</li> <li>Integrate with existing tools gradually</li> <li>Build custom integrations as needed</li> </ul>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#advanced-features","title":"Advanced Features","text":"","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#template-management","title":"Template Management","text":"<pre><code># Example configuration template\ntemplate:\n  name: \"VLAN Configuration\"\n  description: \"Standard VLAN configuration template\"\n  variables:\n    - name: \"vlan_id\"\n      type: \"integer\"\n      required: true\n    - name: \"vlan_name\"\n      type: \"string\"\n      required: true\n    - name: \"vlan_description\"\n      type: \"string\"\n      default: \"\"\n\n  configuration:\n    cisco_ios: |\n      vlan {{ vlan_id }}\n        name {{ vlan_name }}\n        description {{ vlan_description }}\n\n    juniper_junos: |\n      vlans {\n        {{ vlan_name }} {\n          vlan-id {{ vlan_id }};\n          description \"{{ vlan_description }}\";\n        }\n      }\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#workflow-orchestration","title":"Workflow Orchestration","text":"<pre><code># Complex workflow with conditional logic\nworkflow:\n  name: \"Network Migration\"\n  steps:\n    - name: \"Pre-migration Validation\"\n      action: \"validate_environment\"\n      on_failure: \"abort\"\n\n    - name: \"Backup Current Configuration\"\n      action: \"backup_config\"\n      parallel: true\n\n    - name: \"Deploy New Configuration\"\n      action: \"deploy_config\"\n      depends_on: \"backup_current_configuration\"\n      on_failure: \"rollback\"\n\n    - name: \"Verify New Configuration\"\n      action: \"verify_config\"\n      depends_on: \"deploy_new_configuration\"\n\n    - name: \"Update Documentation\"\n      action: \"update_docs\"\n      depends_on: \"verify_new_configuration\"\n</code></pre>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/slurpitio/#resources","title":"Resources","text":"<ul> <li>Official SlurpIT.io Documentation</li> <li>SlurpIT.io API Reference</li> <li>SlurpIT.io Blog</li> <li>Community Forum</li> <li>SlurpIT.io GitHub</li> </ul> <p>For more on network automation tools, see the NetDevOps Tools Index.</p>","tags":["slurpit","network automation","configuration management","network orchestration","api automation"]},{"location":"blog/terraform-introduction--getting-started/","title":"Terraform: Introduction &amp; Getting Started","text":"<p>Terraform is an open-source infrastructure as code (IaC) tool by HashiCorp for provisioning and managing cloud and on-premises resources declaratively.</p>","tags":["terraform","infrastructure as code","automation","devops"]},{"location":"blog/terraform-introduction--getting-started/#why-use-terraform","title":"Why Use Terraform?","text":"<ul> <li>Manage infrastructure as code across multiple providers</li> <li>Declarative, version-controlled infrastructure</li> <li>Large ecosystem of providers and modules</li> </ul>","tags":["terraform","infrastructure as code","automation","devops"]},{"location":"blog/terraform-introduction--getting-started/#how-terraform-works","title":"How Terraform Works","text":"<ul> <li>Uses HCL (HashiCorp Configuration Language) for configuration files</li> <li>Providers enable support for different platforms (AWS, Azure, etc.)</li> <li>State files track resource status</li> </ul>","tags":["terraform","infrastructure as code","automation","devops"]},{"location":"blog/terraform-introduction--getting-started/#quick-start-example","title":"Quick Start Example","text":"<ol> <li>Install Terraform: <pre><code>curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt update &amp;&amp; sudo apt install terraform\nterraform version\n</code></pre></li> <li>Write a simple configuration (<code>main.tf</code>): <pre><code>terraform {\n  required_providers {\n    random = {\n      source = \"hashicorp/random\"\n    }\n  }\n}\n\nprovider \"random\" {}\n\nresource \"random_pet\" \"name\" {}\n\noutput \"pet_name\" {\n  value = random_pet.name.id\n}\n</code></pre></li> <li>Initialize and apply: <pre><code>terraform init\nterraform apply\n</code></pre></li> </ol>","tags":["terraform","infrastructure as code","automation","devops"]},{"location":"blog/terraform-introduction--getting-started/#learn-more","title":"Learn More","text":"<ul> <li>Terraform Documentation</li> <li>Getting Started Guide </li> </ul>","tags":["terraform","infrastructure as code","automation","devops"]},{"location":"blog/visual-studio-code-for-network-automation/","title":"Visual Studio Code for Network Automation","text":"<p>Visual Studio Code (VS Code) is a powerful, free code editor that's perfect for network automation development. With the right extensions and configuration, it becomes an excellent IDE for Ansible, Python, and network automation workflows.</p>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#why-visual-studio-code-for-network-automation","title":"Why Visual Studio Code for Network Automation?","text":"<ul> <li>Free and Open Source: No licensing costs</li> <li>Cross-platform: Works on Windows, macOS, and Linux</li> <li>Extensible: Rich ecosystem of extensions</li> <li>Integrated Terminal: Built-in terminal for running commands</li> <li>Git Integration: Built-in version control support</li> <li>IntelliSense: Smart code completion and error detection</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#installation","title":"Installation","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#download-and-install","title":"Download and Install","text":"<ol> <li>Download VS Code: Visit code.visualstudio.com</li> <li>Install: Follow the installation wizard for your operating system</li> <li>Launch: Open VS Code and start coding</li> </ol>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#first-launch-setup","title":"First Launch Setup","text":"<p>When you first launch VS Code, you'll see a welcome screen. You can: - Choose a color theme - Install recommended extensions - Configure basic settings</p>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#essential-extensions-for-network-automation","title":"Essential Extensions for Network Automation","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#python-extensions","title":"Python Extensions","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#1-pylance-by-microsoft","title":"1. Pylance by Microsoft","text":"<ul> <li>Fast, feature-rich language support for Python</li> <li>Type checking and IntelliSense</li> <li>Auto-imports and code navigation</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#2-python-by-microsoft","title":"2. Python by Microsoft","text":"<ul> <li>Python language support</li> <li>IntelliSense, linting, debugging</li> <li>Jupyter notebook support</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#3-python-debugger-by-microsoft","title":"3. Python Debugger by Microsoft","text":"<ul> <li>Advanced debugging capabilities</li> <li>Breakpoint management</li> <li>Variable inspection</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#4-python-environments-by-microsoft","title":"4. Python Environments by Microsoft","text":"<ul> <li>Manage multiple Python environments</li> <li>Virtual environment detection</li> <li>Interpreter switching</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#ansible-extensions","title":"Ansible Extensions","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#5-ansible-by-red-hat","title":"5. Ansible by Red Hat","text":"<ul> <li>Syntax highlighting for Ansible files</li> <li>IntelliSense for Ansible modules</li> <li>Validation and auto-completion</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#6-ansible-vault-by-red-hat","title":"6. Ansible Vault by Red Hat","text":"<ul> <li>Encrypt and decrypt Ansible vault files</li> <li>Secure credential management</li> <li>Vault file syntax highlighting</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#git-extensions","title":"Git Extensions","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#7-gitlens-by-gitkraken","title":"7. GitLens by GitKraken","text":"<ul> <li>Enhanced Git capabilities</li> <li>Blame annotations</li> <li>Branch comparison</li> <li>File history and line history</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#8-github-actions-by-github","title":"8. GitHub Actions by GitHub","text":"<ul> <li>GitHub Actions workflow support</li> <li>YAML validation for workflows</li> <li>Action marketplace integration</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#9-github-pull-requests-by-github","title":"9. GitHub Pull Requests by GitHub","text":"<ul> <li>Review pull requests directly in VS Code</li> <li>Comment and approve changes</li> <li>Merge conflict resolution</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#10-github-repositories-by-github","title":"10. GitHub Repositories by GitHub","text":"<ul> <li>Clone repositories directly</li> <li>Browse GitHub repositories</li> <li>Manage remote repositories</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#11-git-graph-by-mhutchie","title":"11. Git Graph by mhutchie","text":"<ul> <li>Visualize Git repository history</li> <li>Interactive commit graph</li> <li>Branch visualization</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#formatters-and-syntax-support","title":"Formatters and Syntax Support","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#12-yaml-by-red-hat","title":"12. YAML by Red Hat","text":"<ul> <li>Syntax highlighting for YAML files</li> <li>Validation and formatting</li> <li>Essential for Ansible playbooks</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#13-textfsm-template-syntax-by-cisco","title":"13. TextFSM Template Syntax by Cisco","text":"<ul> <li>Syntax highlighting for TextFSM templates</li> <li>Network device output parsing</li> <li>Template validation</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#14-markdownlint-by-david-anson","title":"14. markdownlint by David Anson","text":"<ul> <li>Markdown linting and validation</li> <li>Consistent markdown formatting</li> <li>Style enforcement</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#15-jinja-by-wholroyd","title":"15. Jinja by Wholroyd","text":"<ul> <li>Jinja2 template syntax highlighting</li> <li>Support for Ansible templates</li> <li>Template validation</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#16-shell-format-by-foxundermoon","title":"16. Shell Format by Foxundermoon","text":"<ul> <li>Shell script formatting</li> <li>Bash, Zsh, and other shell syntax</li> <li>Code style consistency</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#remote-api-testing","title":"Remote API Testing","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#17-postman-by-postman","title":"17. Postman by Postman","text":"<ul> <li>REST API testing and development</li> <li>Request/response management</li> <li>API documentation</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#container-and-infrastructure-extensions","title":"Container and Infrastructure Extensions","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#18-docker-by-microsoft","title":"18. Docker by Microsoft","text":"<ul> <li>Docker container management</li> <li>Dockerfile syntax highlighting</li> <li>Container lifecycle management</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#19-kubernetes-by-microsoft","title":"19. Kubernetes by Microsoft","text":"<ul> <li>Kubernetes manifest support</li> <li>YAML validation for K8s</li> <li>Cluster management</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#20-opentofu-by-opentofu","title":"20. OpenTofu by OpenTofu","text":"<ul> <li>Infrastructure as Code support</li> <li>Terraform/OpenTofu syntax highlighting</li> <li>State management</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#remote-development-extensions","title":"Remote Development Extensions","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#21-remote-ssh-by-microsoft","title":"21. Remote - SSH by Microsoft","text":"<ul> <li>Edit files on remote servers</li> <li>Connect to network devices via SSH</li> <li>Integrated terminal for remote systems</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#22-remote-explorer-by-microsoft","title":"22. Remote Explorer by Microsoft","text":"<ul> <li>Manage SSH connections</li> <li>Browse remote file systems</li> <li>Connection management</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#23-remote-development-by-microsoft","title":"23. Remote Development by Microsoft","text":"<ul> <li>Complete remote development experience</li> <li>Extension pack for remote work</li> <li>Multi-machine development</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#24-remote-repositories-by-github","title":"24. Remote Repositories by GitHub","text":"<ul> <li>Clone and work with remote repositories</li> <li>GitHub integration</li> <li>Repository management</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#windows-subsystem-for-linux-wsl","title":"Windows Subsystem for Linux (WSL)","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#25-wsl-by-microsoft","title":"25. WSL by Microsoft","text":"<ul> <li>Windows Subsystem for Linux integration</li> <li>Linux development environment</li> <li>Cross-platform development</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#network-specific-extensions","title":"Network-Specific Extensions","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#26-cisco-ios-by-cisco","title":"26. Cisco IOS by Cisco","text":"<ul> <li>Syntax highlighting for Cisco IOS configurations</li> <li>Auto-completion for IOS commands</li> <li>Network device configuration support</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#installing-extensions","title":"Installing Extensions","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#method-1-extension-marketplace","title":"Method 1: Extension Marketplace","text":"<ol> <li>Click the Extensions icon in the sidebar (or press <code>Ctrl+Shift+X</code>)</li> <li>Search for the extension name</li> <li>Click \"Install\"</li> </ol>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#method-2-command-palette","title":"Method 2: Command Palette","text":"<ol> <li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on macOS)</li> <li>Type \"Extensions: Install Extensions\"</li> <li>Search and install</li> </ol>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#method-3-command-line","title":"Method 3: Command Line","text":"<pre><code># Install essential extensions from command line\n# Python extensions\ncode --install-extension ms-python.python\ncode --install-extension ms-python.pylance\ncode --install-extension ms-python.debugpy\n\n# Ansible extensions\ncode --install-extension redhat.ansible\ncode --install-extension redhat.vscode-ansible-vault\n\n# Git extensions\ncode --install-extension eamodio.gitlens\ncode --install-extension github.vscode-github-actions\ncode --install-extension github.vscode-pull-request-github\ncode --install-extension github.remotehub\ncode --install-extension mhutchie.git-graph\n\n# Formatters and syntax\ncode --install-extension redhat.vscode-yaml\ncode --install-extension cisco.textfsm\ncode --install-extension davidanson.vscode-markdownlint\ncode --install-extension wholroyd.jinja\ncode --install-extension foxundermoon.shell-format\n\n# API testing\ncode --install-extension postman.postman\n\n# Container and infrastructure\ncode --install-extension ms-azuretools.vscode-docker\ncode --install-extension ms-kubernetes-tools.vscode-kubernetes-tools\ncode --install-extension opentofu.vscode-opentofu\n\n# Remote development\ncode --install-extension ms-vscode-remote.remote-ssh\ncode --install-extension ms-vscode-remote.remote-explorer\ncode --install-extension ms-vscode-remote.vscode-remote-extensionpack\ncode --install-extension github.remotehub\n\n# WSL (Windows only)\ncode --install-extension ms-vscode-remote.remote-wsl\n</code></pre>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#recommended-settings","title":"Recommended Settings","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#user-settings","title":"User Settings","text":"<p>Open settings with <code>Ctrl+,</code> and add these configurations:</p> <pre><code>{\n    // Editor settings\n    \"editor.tabSize\": 2,\n    \"editor.insertSpaces\": true,\n    \"editor.detectIndentation\": false,\n    \"editor.rulers\": [80, 120],\n    \"editor.wordWrap\": \"on\",\n\n    // File associations\n    \"files.associations\": {\n        \"*.yml\": \"yaml\",\n        \"*.yaml\": \"yaml\",\n        \"*.j2\": \"jinja\",\n        \"*.ios\": \"cisco-ios\"\n    },\n\n    // YAML settings\n    \"yaml.format.enable\": true,\n    \"yaml.validate\": true,\n    \"yaml.schemas\": {\n        \"https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/ansible.json\": \"**/playbook.yml\",\n        \"https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/ansible.json\": \"**/tasks/*.yml\"\n    },\n\n    // Python settings\n    \"python.defaultInterpreterPath\": \"./venv/bin/python\",\n    \"python.linting.enabled\": true,\n    \"python.linting.pylintEnabled\": true,\n\n    // Terminal settings\n    \"terminal.integrated.defaultProfile.linux\": \"bash\",\n    \"terminal.integrated.defaultProfile.windows\": \"PowerShell\",\n    \"terminal.integrated.defaultProfile.osx\": \"zsh\",\n\n    // Git settings\n    \"git.enableSmartCommit\": true,\n    \"git.confirmSync\": false,\n\n    // File explorer\n    \"explorer.confirmDelete\": false,\n    \"explorer.confirmDragAndDrop\": false\n}\n</code></pre>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#workspace-settings","title":"Workspace Settings","text":"<p>Create <code>.vscode/settings.json</code> in your project:</p> <pre><code>{\n    \"ansible.ansiblePath\": \"./venv/bin/ansible\",\n    \"ansible.pythonPath\": \"./venv/bin/python\",\n    \"python.defaultInterpreterPath\": \"./venv/bin/python\",\n    \"files.exclude\": {\n        \"**/__pycache__\": true,\n        \"**/*.pyc\": true,\n        \"**/.git\": true,\n        \"**/node_modules\": true\n    }\n}\n</code></pre>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#project-structure-for-network-automation","title":"Project Structure for Network Automation","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#recommended-folder-structure","title":"Recommended Folder Structure","text":"<pre><code>network-automation/\n\u251c\u2500\u2500 .vscode/\n\u2502   \u251c\u2500\u2500 settings.json\n\u2502   \u251c\u2500\u2500 launch.json\n\u2502   \u2514\u2500\u2500 extensions.json\n\u251c\u2500\u2500 inventory/\n\u2502   \u251c\u2500\u2500 hosts.yml\n\u2502   \u2514\u2500\u2500 group_vars/\n\u251c\u2500\u2500 playbooks/\n\u2502   \u251c\u2500\u2500 site.yml\n\u2502   \u2514\u2500\u2500 tasks/\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 *.j2\n\u251c\u2500\u2500 roles/\n\u2502   \u2514\u2500\u2500 custom_role/\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 *.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 ansible.cfg\n\u2514\u2500\u2500 README.md\n</code></pre>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#vs-code-workspace-file","title":"VS Code Workspace File","text":"<p>Create <code>network-automation.code-workspace</code>:</p> <pre><code>{\n    \"folders\": [\n        {\n            \"name\": \"Network Automation\",\n            \"path\": \".\"\n        }\n    ],\n    \"settings\": {\n        \"files.associations\": {\n            \"*.yml\": \"yaml\",\n            \"*.yaml\": \"yaml\",\n            \"*.j2\": \"jinja\"\n        },\n        \"ansible.ansiblePath\": \"./venv/bin/ansible\",\n        \"python.defaultInterpreterPath\": \"./venv/bin/python\"\n    },\n    \"extensions\": {\n        \"recommendations\": [\n            \"ms-python.python\",\n            \"ms-python.pylance\",\n            \"ms-python.debugpy\",\n            \"redhat.ansible\",\n            \"redhat.vscode-ansible-vault\",\n            \"redhat.vscode-yaml\",\n            \"eamodio.gitlens\",\n            \"github.vscode-github-actions\",\n            \"github.vscode-pull-request-github\",\n            \"github.remotehub\",\n            \"mhutchie.git-graph\",\n            \"cisco.textfsm\",\n            \"davidanson.vscode-markdownlint\",\n            \"wholroyd.jinja\",\n            \"foxundermoon.shell-format\",\n            \"postman.postman\",\n            \"ms-azuretools.vscode-docker\",\n            \"ms-kubernetes-tools.vscode-kubernetes-tools\",\n            \"opentofu.vscode-opentofu\",\n            \"ms-vscode-remote.remote-ssh\",\n            \"ms-vscode-remote.remote-explorer\",\n            \"ms-vscode-remote.vscode-remote-extensionpack\",\n            \"ms-vscode-remote.remote-wsl\",\n            \"cisco.cisco-ios\"\n        ]\n    }\n}\n</code></pre>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#useful-keyboard-shortcuts","title":"Useful Keyboard Shortcuts","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#general","title":"General","text":"<ul> <li><code>Ctrl+Shift+P</code>: Command Palette</li> <li><code>Ctrl+,</code>: Open Settings</li> <li><code>Ctrl+Shift+X</code>: Extensions</li> <li><code>Ctrl+B</code>: Toggle Sidebar</li> <li><code>Ctrl+J</code>: Toggle Terminal</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#editing","title":"Editing","text":"<ul> <li><code>Ctrl+D</code>: Select next occurrence</li> <li><code>Alt+Shift+F</code>: Format document</li> <li><code>Ctrl+/</code>: Toggle comment</li> <li><code>Ctrl+Z</code>: Undo</li> <li><code>Ctrl+Shift+Z</code>: Redo</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#navigation","title":"Navigation","text":"<ul> <li><code>Ctrl+P</code>: Quick Open</li> <li><code>Ctrl+Shift+F</code>: Find in files</li> <li><code>Ctrl+G</code>: Go to line</li> <li><code>F12</code>: Go to definition</li> <li><code>Alt+F12</code>: Peek definition</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#terminal","title":"Terminal","text":"<ul> <li>`Ctrl+``: Toggle terminal</li> <li>`Ctrl+Shift+``: New terminal</li> <li><code>Ctrl+Shift+5</code>: Split terminal</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#integrated-terminal-usage","title":"Integrated Terminal Usage","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#opening-terminal","title":"Opening Terminal","text":"<ul> <li>`Ctrl+`` (backtick)</li> <li>Or View \u2192 Terminal</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#terminal-commands-for-network-automation","title":"Terminal Commands for Network Automation","text":"<pre><code># Activate virtual environment\nsource venv/bin/activate\n\n# Run Ansible playbook\nansible-playbook -i inventory/hosts.yml playbooks/site.yml\n\n# Check syntax\nansible-playbook --syntax-check playbooks/site.yml\n\n# Dry run\nansible-playbook --check playbooks/site.yml\n\n# Run with verbose output\nansible-playbook -v playbooks/site.yml\n</code></pre>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#debugging-and-testing","title":"Debugging and Testing","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#python-debugging","title":"Python Debugging","text":"<ol> <li>Set breakpoints by clicking left of line numbers</li> <li>Press <code>F5</code> to start debugging</li> <li>Use debug console to inspect variables</li> </ol>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#ansible-playbook-testing","title":"Ansible Playbook Testing","text":"<pre><code># Syntax check\nansible-playbook --syntax-check playbook.yml\n\n# Dry run\nansible-playbook --check playbook.yml\n\n# Verbose output\nansible-playbook -vvv playbook.yml\n</code></pre>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#git-integration","title":"Git Integration","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#basic-git-operations","title":"Basic Git Operations","text":"<ul> <li>Stage Changes: Click the + next to modified files</li> <li>Commit: Enter commit message and press <code>Ctrl+Enter</code></li> <li>Push/Pull: Use the sync button in status bar</li> <li>Branch: Click branch name in status bar to switch</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#gitlens-features","title":"GitLens Features","text":"<ul> <li>Blame: See who changed each line</li> <li>File History: View file change history</li> <li>Branch Comparison: Compare branches visually</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#remote-development","title":"Remote Development","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#ssh-remote-development","title":"SSH Remote Development","text":"<ol> <li>Install \"Remote - SSH\" extension</li> <li>Press <code>Ctrl+Shift+P</code> and select \"Remote-SSH: Connect to Host\"</li> <li>Enter SSH connection string: <code>user@hostname</code></li> <li>VS Code will connect and open remote workspace</li> </ol>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#example-ssh-config","title":"Example SSH Config","text":"<p>Add to <code>~/.ssh/config</code>: <pre><code>Host network-device\n    HostName 192.168.1.1\n    User admin\n    IdentityFile ~/.ssh/id_rsa\n    Port 22\n</code></pre></p>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#productivity-tips","title":"Productivity Tips","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#1-use-snippets","title":"1. Use Snippets","text":"<p>Create custom snippets for common Ansible tasks:</p> <pre><code>{\n    \"Ansible Task\": {\n        \"prefix\": \"ansible-task\",\n        \"body\": [\n            \"- name: ${1:Task description}\",\n            \"  ${2:module_name}:\",\n            \"    ${3:parameter}: ${4:value}\"\n        ]\n    }\n}\n</code></pre>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#2-use-multi-cursor-editing","title":"2. Use Multi-Cursor Editing","text":"<ul> <li><code>Alt+Click</code>: Add cursor at click position</li> <li><code>Ctrl+Alt+Up/Down</code>: Add cursor above/below</li> <li><code>Ctrl+D</code>: Select next occurrence</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#3-use-split-editor","title":"3. Use Split Editor","text":"<ul> <li><code>Ctrl+\\</code>: Split editor right</li> <li><code>Ctrl+K Ctrl+\\</code>: Split editor down</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#4-use-intellisense","title":"4. Use IntelliSense","text":"<ul> <li><code>Ctrl+Space</code>: Trigger suggestions</li> <li><code>Ctrl+Shift+Space</code>: Trigger parameter hints</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#troubleshooting","title":"Troubleshooting","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#common-issues","title":"Common Issues","text":"","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#extension-not-working","title":"Extension Not Working","text":"<ol> <li>Reload VS Code: <code>Ctrl+Shift+P</code> \u2192 \"Developer: Reload Window\"</li> <li>Check extension is enabled</li> <li>Check for conflicts with other extensions</li> </ol>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#python-interpreter-issues","title":"Python Interpreter Issues","text":"<ol> <li><code>Ctrl+Shift+P</code> \u2192 \"Python: Select Interpreter\"</li> <li>Choose correct virtual environment</li> <li>Restart VS Code</li> </ol>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#ansible-path-issues","title":"Ansible Path Issues","text":"<ol> <li>Verify Ansible is installed in virtual environment</li> <li>Check <code>ansible.ansiblePath</code> setting</li> <li>Ensure virtual environment is activated</li> </ol>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#learn-more","title":"Learn More","text":"<ul> <li>VS Code Documentation</li> <li>VS Code User Guide</li> <li>VS Code Keyboard Shortcuts</li> </ul>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"blog/visual-studio-code-for-network-automation/#next-steps","title":"Next Steps","text":"<p>Once VS Code is set up, explore: - Linux Basics for Network Automation - Ansible Introduction &amp; Getting Started - Git Basics for Version Control </p>","tags":["visual studio code","vscode","ide","development","automation"]},{"location":"docker/docker_conatiner_nautobot/","title":"Nautobot Docker Installation with Ansible","text":""},{"location":"docker/docker_conatiner_nautobot/#docker_container_nautobot","title":"docker_container_nautobot","text":"<p>Nautobot docker container including other networking tools.</p> <p>This container is build by the base containers from Nautobot and used as upstream source, then I've added some extra tooling that was missing for running a Dockerized environment of Nautobot. Also a lot of Nautobot plugins are installed by default, only need to enable in the <code>nautobot_config.py</code> or you can use this image from my Ansible role to install and configure Nautobot</p>"},{"location":"docker/docker_conatiner_nautobot/#os-packages","title":"OS packages","text":"<ul> <li>net-tools </li> <li>iputils-ping  </li> <li>dnsutils</li> </ul>"},{"location":"docker/docker_conatiner_nautobot/#pip-packages","title":"PIP Packages","text":"<ul> <li>ansible-core==2.15.11</li> <li>nautobot[napalm]</li> <li>nautobot[sso]</li> <li>social-auth-core[openidconnect]</li> <li>social-auth-core[saml]</li> <li>social-auth-core[azuread]</li> <li>social-auth-core[google]</li> </ul>"},{"location":"docker/docker_conatiner_nautobot/#install-custom-packages-used-in-jobs","title":"Install custom packages used in Jobs","text":"<ul> <li>pandas</li> <li>xlrd</li> <li>openpyxl</li> <li>fuzzywuzzy</li> <li>python-Levenshtein</li> <li>hier-config</li> <li>pyntc</li> <li>pyats</li> <li>scrapli scrapli[ssh2]</li> <li>pysnmp</li> </ul>"},{"location":"docker/docker_conatiner_nautobot/#nautobot-plugins","title":"Nautobot plugins","text":"<ul> <li>nornir-nautobot</li> <li>nautobot-ssot</li> <li>nautobot-plugin-nornir</li> <li>nautobot-golden-config</li> <li>nautobot-device-lifecycle-mgmt</li> <li>nautobot-bgp-models</li> <li>nautobot-device-onboarding</li> <li>nautobot-data-validation-engine</li> <li>nautobot-plugin-floorplan</li> <li>nautobot-firewall-models</li> <li>todo: chatops</li> </ul>"},{"location":"docker/docker_conatiner_nautobot/#docker-compose","title":"Docker-compose","text":"<p>To setup a working environment in Docker including database and redis, see an example of docker-compose.yml for Nautobot here</p>"},{"location":"docker/docker_conatiner_nautobot/#more-flexibility-needed","title":"More flexibility needed?","text":"<p>If you need more flexibility, please take a look at my Ansible role to deploy Nautobot on Docker or via Ansible Galaxy</p> <p>Example playbook to install Docker and Nautobot all-in-one with all defaults.</p> <p>First install the roles:</p> <ul> <li><code>ansible-galaxy role install bsmeding.docker</code></li> <li><code>ansible-galaxy role install bsmeding.nautobot_docker</code></li> </ul> <p>Then run the playbook:</p> <pre><code>---\n- name: Install Nautobot\n  hosts: [nautobot]\n  gather_facts: true\n  become: yes\n  tasks:\n    - name: Check if Docker is installed\n      include_role:\n        name: bsmeding.docker\n\n    - name: Check if Nautobot is installed\n      include_role:\n        name: bsmeding.nautobot_docker\n</code></pre>"},{"location":"online-dev-tools/","title":"Web Tools","text":"<p>A comprehensive collection of client-side developer tools designed for network automation, DevOps, and web development. All tools run entirely in your browser - no data is sent to servers.</p>","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#privacy-security","title":"\ud83d\udd12 Privacy &amp; Security","text":"<p>100% Client-side: All processing happens in your browser. No data is sent to any server or saved anywhere.</p>","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#available-tools","title":"\ud83d\udee0\ufe0f Available Tools","text":"","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#data-format-tools","title":"Data Format Tools\ud83d\udd27 YAML Validator\ud83d\udd0d JSON Validator\ud83d\udcca Diff Tool","text":"<p>Validate and format YAML content with real-time feedback. See parsed JSON structure and syntax highlighting.</p> Real-time validation Syntax highlighting JSON output Open Tool \u2192 <p>Validate and format JSON content with instant feedback. Pretty formatting and error detection.</p> Real-time validation Pretty formatting Error handling Open Tool \u2192 <p>Compare text differences with side-by-side highlighting. Perfect for configuration and code comparison.</p> Character-level diff Visual indicators Real-time comparison Open Tool \u2192","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#encoding-security-tools","title":"Encoding &amp; Security Tools\ud83d\udd10 Base64 Converter\ud83d\udd17 URL Encoder/Decoder\ud83d\udd12 Hash Generator","text":"<p>Encode and decode Base64 strings with Unicode support. Auto-detection and real-time conversion.</p> Unicode support Auto-detection Real-time conversion Open Tool \u2192 <p>Encode and decode URLs with multiple encoding schemes. Standard, component, and full encoding options.</p> Multiple encoding types Auto-detection Real-time processing Open Tool \u2192 <p>Generate cryptographic hashes with 8 algorithms. MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3, and BLAKE2b.</p> 8 hash algorithms Hash comparison Auto-copy option Open Tool \u2192","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#development-tools","title":"Development Tools\ud83c\udfaf Regex Tester\ud83c\udfa8 Color Converter","text":"<p>Test regular expressions with real-time matching and validation. Detailed match information and examples.</p> Real-time testing Match details Common patterns Open Tool \u2192 <p>Convert between color formats including HEX, RGB, HSL, CMYK, HSV, and CSS names. Accessibility analysis included.</p> 6 color formats Color picker Accessibility info Open Tool \u2192","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#use-cases-by-role","title":"\ud83c\udfaf Use Cases by Role","text":"","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#network-engineers","title":"Network Engineers","text":"<ul> <li>Base64 Converter: Encode configuration data, API credentials</li> <li>Hash Generator: Verify file integrity, generate API signatures  </li> <li>URL Encoder: Handle special characters in network configurations</li> <li>YAML/JSON Validators: Validate configuration files</li> </ul>","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#devops-engineers","title":"DevOps Engineers","text":"<ul> <li>YAML/JSON Validators: Validate configuration files and manifests</li> <li>Hash Generator: Verify artifact integrity, password hashing</li> <li>Base64 Converter: Handle secrets and encoded data</li> <li>Diff Tool: Compare configuration versions</li> </ul>","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#web-developers","title":"Web Developers","text":"<ul> <li>Color Converter: Web development, accessibility compliance</li> <li>Regex Tester: Data validation, log parsing</li> <li>URL Encoder: API parameters, form data</li> <li>JSON Validator: API responses, configuration</li> </ul>","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#security-professionals","title":"Security Professionals","text":"<ul> <li>Hash Generator: Digital signatures, integrity verification</li> <li>Base64 Converter: Encoded data analysis</li> <li>URL Encoder: Security testing, input validation</li> <li>Regex Tester: Pattern matching for security rules</li> </ul>","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#features","title":"\ud83d\ude80 Features","text":"","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#universal-benefits","title":"Universal Benefits","text":"<ul> <li>\ud83d\udd12 Privacy First: No data leaves your browser</li> <li>\u26a1 Real-time Processing: Instant results as you type</li> <li>\ud83d\udcf1 Responsive Design: Works on all devices</li> <li>\ud83c\udfa8 Consistent UI: Unified design across all tools</li> <li>\ud83d\udccb Copy to Clipboard: One-click copying of results</li> <li>\ud83d\udd04 Auto-detection: Smart format recognition</li> </ul>","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#technical-features","title":"Technical Features","text":"<ul> <li>Client-side Only: No server communication</li> <li>Offline Capable: Works without internet connection</li> <li>No Dependencies: Minimal external libraries</li> <li>Cross-browser: Works in all modern browsers</li> <li>Accessibility: WCAG compliant design</li> </ul>","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#tool-categories","title":"\ud83d\udd27 Tool Categories","text":"Category Tools Primary Use Data Validation YAML Validator, JSON Validator Configuration files, API responses Text Processing Diff Tool, Regex Tester Code review, data validation Encoding Base64 Converter, URL Encoder Data transmission, API parameters Security Hash Generator Integrity verification, authentication Design Color Converter Web development, accessibility","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/#getting-started","title":"\ud83c\udf93 Getting Started","text":"<ol> <li>Choose a Tool: Browse the categories above</li> <li>Click \"Open Tool\": Navigate to the specific tool</li> <li>Start Using: All tools work immediately</li> <li>No Setup Required: No installation or configuration needed</li> </ol>","tags":["tools","web-tools","developer-tools","utilities"]},{"location":"online-dev-tools/base64-converter/","title":"Base64 Converter","text":"<p>A real-time Base64 encoder and decoder. Convert text to Base64 and vice versa with instant feedback.</p>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#how-to-use","title":"How to Use","text":"<ol> <li>Encode: Enter text in the input field to convert to Base64</li> <li>Decode: Enter Base64 in the input field to convert back to text</li> <li>Auto-detect: The tool automatically detects if you're encoding or decoding</li> </ol> Input: Encode to Base64 Decode from Base64 Clear Output: Ready","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#features","title":"Features","text":"<ul> <li>Real-time Conversion: Auto-detect and convert as you type</li> <li>Manual Controls: Encode/Decode buttons for explicit control</li> <li>Error Handling: Clear error messages for invalid input</li> <li>Length Information: Track input and output character counts</li> <li>Responsive Design: Works on all devices</li> </ul>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#privacy-security","title":"Privacy &amp; Security","text":"<p>\ud83d\udd12 100% Client-side: All processing happens in your browser. No data is sent to any server or saved anywhere.</p>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#common-use-cases","title":"Common Use Cases","text":"","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#configuration-files","title":"Configuration Files","text":"<p>Encode sensitive configuration data for storage or transmission.</p>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#api-authentication","title":"API Authentication","text":"<p>Generate Base64 encoded credentials for API requests.</p>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#data-transmission","title":"Data Transmission","text":"<p>Encode binary data as text for safe transmission.</p>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#log-analysis","title":"Log Analysis","text":"<p>Decode Base64 encoded log entries for analysis.</p>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#examples","title":"Examples","text":"","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#text-to-base64","title":"Text to Base64","text":"<pre><code>Input:  Hello World\nOutput: SGVsbG8gV29ybGQ=\n</code></pre>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#base64-to-text","title":"Base64 to Text","text":"<pre><code>Input:  SGVsbG8gV29ybGQ=\nOutput: Hello World\n</code></pre>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#json-configuration","title":"JSON Configuration","text":"<pre><code>Input:  {\"api_key\": \"secret123\", \"endpoint\": \"https://api.example.com\"}\nOutput: eyJhcGlfa2V5IjogInNlY3JldDEyMyIsICJlbmRwb2ludCI6ICJodHRwczovL2FwaS5leGFtcGxlLmNvbSJ9\n</code></pre>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/base64-converter/#technical-notes","title":"Technical Notes","text":"<ul> <li>Encoding: Uses <code>btoa()</code> for text to Base64 conversion</li> <li>Decoding: Uses <code>atob()</code> for Base64 to text conversion</li> <li>Auto-detection: Attempts to detect if input is valid Base64</li> <li>Character Support: Handles UTF-8 encoded text</li> <li>Error Recovery: Graceful handling of invalid Base64 strings </li> </ul>","tags":["tools","base64","encoding","decoding","converter"]},{"location":"online-dev-tools/color-converter/","title":"Color Converter","text":"<p>A comprehensive color converter supporting multiple formats. Convert between HEX, RGB, HSL, CMYK, and other color formats with real-time preview.</p>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#how-to-use","title":"How to Use","text":"<ol> <li>Enter Color: Input a color in any supported format</li> <li>Auto-detect: The tool automatically detects the input format</li> <li>View Results: See all equivalent color formats and preview</li> </ol> Input Color: Red Color Formats: HEX \ud83d\udccb RGB \ud83d\udccb HSL \ud83d\udccb CMYK \ud83d\udccb HSV \ud83d\udccb CSS Name \ud83d\udccb","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#features","title":"Features","text":"<ul> <li>Multiple Formats: HEX, RGB, HSL, CMYK, HSV, CSS names</li> <li>Real-time Conversion: Instant conversion as you type</li> <li>Color Picker: Visual color selection</li> <li>Accessibility Info: Contrast ratio and luminance</li> <li>Copy to Clipboard: One-click copying of any format</li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#supported-formats","title":"Supported Formats","text":"","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#hex","title":"HEX","text":"<ul> <li>Format: <code>#RRGGBB</code> or <code>#RGB</code></li> <li>Example: <code>#ff0000</code>, <code>#f00</code></li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#rgb","title":"RGB","text":"<ul> <li>Format: <code>rgb(r, g, b)</code></li> <li>Example: <code>rgb(255, 0, 0)</code></li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#rgba","title":"RGBA","text":"<ul> <li>Format: <code>rgba(r, g, b, a)</code></li> <li>Example: <code>rgba(255, 0, 0, 0.5)</code></li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#hsl","title":"HSL","text":"<ul> <li>Format: <code>hsl(h, s%, l%)</code></li> <li>Example: <code>hsl(0, 100%, 50%)</code></li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#hsla","title":"HSLA","text":"<ul> <li>Format: <code>hsla(h, s%, l%, a)</code></li> <li>Example: <code>hsla(0, 100%, 50%, 0.5)</code></li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#css-color-names","title":"CSS Color Names","text":"<ul> <li>Examples: <code>red</code>, <code>blue</code>, <code>green</code>, <code>purple</code></li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#common-use-cases","title":"Common Use Cases","text":"","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#web-development","title":"Web Development","text":"<p>Convert colors between different CSS formats.</p>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#design-work","title":"Design Work","text":"<p>Match colors across different applications.</p>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#accessibility","title":"Accessibility","text":"<p>Check color contrast ratios for web accessibility.</p>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#print-design","title":"Print Design","text":"<p>Convert to CMYK for print materials.</p>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#color-theory","title":"Color Theory","text":"","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#rgb-red-green-blue","title":"RGB (Red, Green, Blue)","text":"<ul> <li>Use: Digital displays, web</li> <li>Range: 0-255 for each component</li> <li>Additive: Colors are added together</li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#hsl-hue-saturation-lightness","title":"HSL (Hue, Saturation, Lightness)","text":"<ul> <li>Use: Design, color manipulation</li> <li>Hue: 0-360 degrees (color wheel)</li> <li>Saturation: 0-100% (intensity)</li> <li>Lightness: 0-100% (brightness)</li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#cmyk-cyan-magenta-yellow-key","title":"CMYK (Cyan, Magenta, Yellow, Key)","text":"<ul> <li>Use: Print materials</li> <li>Subtractive: Colors are subtracted from white</li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#hsv-hue-saturation-value","title":"HSV (Hue, Saturation, Value)","text":"<ul> <li>Use: Color pickers, graphics software</li> <li>Similar to HSL but with Value instead of Lightness</li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#accessibility-guidelines","title":"Accessibility Guidelines","text":"","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#wcag-21-contrast-requirements","title":"WCAG 2.1 Contrast Requirements","text":"<ul> <li>Normal text: 4.5:1 minimum</li> <li>Large text: 3:1 minimum</li> <li>UI components: 3:1 minimum</li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/color-converter/#luminance","title":"Luminance","text":"<ul> <li>High luminance: Light colors</li> <li>Low luminance: Dark colors</li> <li>Optimal range: 0.05-0.95 for good contrast </li> </ul>","tags":["tools","color","converter","hex","rgb","hsl","css"]},{"location":"online-dev-tools/diff-tool/","title":"Diff Tool","text":"<p>A text comparison tool that highlights differences between two text inputs. Perfect for comparing configurations, code snippets, or any text content.</p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#how-to-use","title":"How to Use","text":"<ol> <li>Enter Original Text: Paste the original version in the left text area</li> <li>Enter Modified Text: Paste the modified version in the right text area</li> <li>View Differences: See highlighted changes in real-time</li> </ol> Original Text: Modified Text: Differences: Enter text in both fields above to see differences...","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#features","title":"Features","text":"<ul> <li>Real-time Comparison: See differences as you type</li> <li>Character-level Diff: Precise highlighting of changes</li> <li>Visual Indicators: Green for additions, red for deletions</li> <li>Responsive Design: Works on all devices</li> </ul>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#privacy-security","title":"Privacy &amp; Security","text":"<p>\ud83d\udd12 100% Client-side: All processing happens in your browser. No data is sent to any server or saved anywhere.</p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#use-cases","title":"Use Cases","text":"","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#configuration-comparison","title":"Configuration Comparison","text":"<p>Compare different versions of configuration files to see what changed.</p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#code-review","title":"Code Review","text":"<p>Quickly identify changes between code versions.</p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#text-analysis","title":"Text Analysis","text":"<p>Find differences in any text content.</p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#documentation-updates","title":"Documentation Updates","text":"<p>Track changes in documentation or content.</p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#tips-for-better-results","title":"Tips for Better Results","text":"<ol> <li>Use Consistent Formatting: Ensure both texts use similar formatting</li> <li>Include Context: Add some surrounding text for better context</li> <li>Check Line Endings: Be aware of different line ending formats</li> <li>Use Monospace Font: The tool uses monospace font for better alignment</li> </ol>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#example-use-cases","title":"Example Use Cases","text":"","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#nginx-configuration","title":"Nginx Configuration","text":"<p>Compare different nginx server block configurations.</p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#ansible-playbooks","title":"Ansible Playbooks","text":"<p>Compare different versions of Ansible playbooks.</p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#jsonyaml-files","title":"JSON/YAML Files","text":"<p>Compare configuration files in different formats.</p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/diff-tool/#log-files","title":"Log Files","text":"<p>Compare log outputs to identify differences. </p>","tags":["tools","diff","comparison","text"]},{"location":"online-dev-tools/hash-generator/","title":"Hash Generator","text":"<p>A comprehensive hash generator supporting multiple algorithms. Generate cryptographic hashes for text input with real-time results.</p>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#how-to-use","title":"How to Use","text":"<ol> <li>Enter Text: Type or paste text in the input field</li> <li>Select Algorithm: Choose from multiple hash algorithms</li> <li>View Results: See the generated hash instantly</li> </ol> Input Text: Hash Algorithm: MD5 (128-bit) SHA-1 (160-bit) SHA-256 (256-bit) SHA-384 (384-bit) SHA-512 (512-bit) SHA3-256 (256-bit) SHA3-512 (512-bit) BLAKE2b (256-bit)  Uppercase  Auto-copy to clipboard Generate Hash Clear Generated Hash: \ud83d\udccb Compare Hash:","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#features","title":"Features","text":"<ul> <li>Multiple Algorithms: MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3, BLAKE2b</li> <li>Real-time Generation: Instant hash generation as you type</li> <li>Hash Comparison: Compare generated hashes with existing ones</li> <li>Auto-copy: Option to automatically copy hash to clipboard</li> <li>Case Options: Toggle between lowercase and uppercase output</li> </ul>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#privacy-security","title":"Privacy &amp; Security","text":"<p>\ud83d\udd12 100% Client-side: All processing happens in your browser. No data is sent to any server or saved anywhere.</p>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#hash-algorithms","title":"Hash Algorithms","text":"","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#md5-message-digest-algorithm-5","title":"MD5 (Message Digest Algorithm 5)","text":"<ul> <li>Output: 128-bit (32 characters)</li> <li>Use case: File integrity checks, legacy systems</li> <li>Security: Not cryptographically secure</li> </ul>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#sha-1-secure-hash-algorithm-1","title":"SHA-1 (Secure Hash Algorithm 1)","text":"<ul> <li>Output: 160-bit (40 characters)</li> <li>Use case: Legacy applications, Git</li> <li>Security: Not recommended for new applications</li> </ul>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#sha-256-secure-hash-algorithm-256","title":"SHA-256 (Secure Hash Algorithm 256)","text":"<ul> <li>Output: 256-bit (64 characters)</li> <li>Use case: Digital signatures, SSL certificates</li> <li>Security: Cryptographically secure</li> </ul>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#sha-384-secure-hash-algorithm-384","title":"SHA-384 (Secure Hash Algorithm 384)","text":"<ul> <li>Output: 384-bit (96 characters)</li> <li>Use case: High-security applications</li> <li>Security: Very secure</li> </ul>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#sha-512-secure-hash-algorithm-512","title":"SHA-512 (Secure Hash Algorithm 512)","text":"<ul> <li>Output: 512-bit (128 characters)</li> <li>Use case: Maximum security requirements</li> <li>Security: Extremely secure</li> </ul>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#sha3-256512-sha-3","title":"SHA3-256/512 (SHA-3)","text":"<ul> <li>Output: 256-bit or 512-bit</li> <li>Use case: Next-generation cryptography</li> <li>Security: Post-quantum resistant</li> </ul>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#blake2b","title":"BLAKE2b","text":"<ul> <li>Output: 256-bit (64 characters)</li> <li>Use case: High-performance applications</li> <li>Security: Fast and secure</li> </ul>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#common-use-cases","title":"Common Use Cases","text":"","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#password-hashing","title":"Password Hashing","text":"<p>Generate secure hashes for password storage (use with salt).</p>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#file-integrity","title":"File Integrity","text":"<p>Verify file integrity by comparing hashes.</p>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#digital-signatures","title":"Digital Signatures","text":"<p>Create hash digests for digital signatures.</p>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#api-authentication","title":"API Authentication","text":"<p>Generate HMAC signatures for API requests.</p>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#database-indexing","title":"Database Indexing","text":"<p>Create hash-based indexes for fast lookups.</p>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#examples","title":"Examples","text":"","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#simple-text","title":"Simple Text","text":"<pre><code>Input:  Hello World\nMD5:     b10a8db164e0754105b7a99be72e3fe5\nSHA-256: a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\n</code></pre>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#password","title":"Password","text":"<pre><code>Input:  mypassword123\nSHA-256: 240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9\n</code></pre>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#configuration","title":"Configuration","text":"<pre><code>Input:  {\"api_key\": \"secret\", \"timestamp\": \"2024-01-01\"}\nSHA-256: 8f7d3b2a1e9c6f5d4a3b2c1d0e9f8a7b6c5d4e3f2a1b0c9d8e7f6a5b4c3d2e1f0\n</code></pre>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/hash-generator/#security-notes","title":"Security Notes","text":"<ul> <li>MD5/SHA-1: Not suitable for security-critical applications</li> <li>SHA-256+: Recommended for modern applications</li> <li>Salt: Always use salt for password hashing</li> <li>Collision Resistance: SHA-256+ provides strong collision resistance </li> </ul>","tags":["tools","hash","cryptography","md5","sha1","sha256"]},{"location":"online-dev-tools/json-validator/","title":"JSON Validator","text":"<p>A real-time JSON validator and formatter. Paste your JSON content below to validate syntax and see the formatted structure.</p>","tags":["tools","json","validator","formatting"]},{"location":"online-dev-tools/json-validator/#how-to-use","title":"How to Use","text":"<ol> <li>Paste JSON: Enter your JSON content in the text area below</li> <li>Real-time Validation: See immediate feedback on syntax errors</li> <li>Formatted Output: View the properly formatted JSON structure</li> </ol> JSON Input: Formatted Output: <pre>Enter JSON content above to see the formatted result...</pre>","tags":["tools","json","validator","formatting"]},{"location":"online-dev-tools/json-validator/#features","title":"Features","text":"<ul> <li>Real-time Validation: Instant feedback as you type</li> <li>Syntax Highlighting: Clear error messages for invalid JSON</li> <li>Pretty Formatting: Automatically format valid JSON</li> <li>Responsive Design: Works on desktop and mobile devices</li> </ul>","tags":["tools","json","validator","formatting"]},{"location":"online-dev-tools/json-validator/#privacy-security","title":"Privacy &amp; Security","text":"<p>\ud83d\udd12 100% Client-side: All processing happens in your browser. No data is sent to any server or saved anywhere.</p>","tags":["tools","json","validator","formatting"]},{"location":"online-dev-tools/json-validator/#common-json-structure","title":"Common JSON Structure","text":"<pre><code>{\n  \"string\": \"value\",\n  \"number\": 42,\n  \"boolean\": true,\n  \"null\": null,\n  \"array\": [\n    \"item1\",\n    \"item2\",\n    \"item3\"\n  ],\n  \"object\": {\n    \"nested\": \"value\",\n    \"deep\": {\n      \"level\": 3\n    }\n  }\n}\n</code></pre>","tags":["tools","json","validator","formatting"]},{"location":"online-dev-tools/json-validator/#json-syntax-rules","title":"JSON Syntax Rules","text":"<ul> <li>Strings: Must be enclosed in double quotes</li> <li>Numbers: Can be integers or decimals</li> <li>Booleans: <code>true</code> or <code>false</code> (lowercase)</li> <li>Null: <code>null</code> (lowercase)</li> <li>Arrays: Enclosed in square brackets <code>[]</code></li> <li>Objects: Enclosed in curly braces <code>{}</code></li> <li>Commas: Separate elements, no trailing comma</li> <li>Quotes: Property names must be in double quotes</li> </ul>","tags":["tools","json","validator","formatting"]},{"location":"online-dev-tools/json-validator/#common-errors","title":"Common Errors","text":"Error Cause Fix <code>Unexpected token</code> Missing quotes around strings Use <code>\"value\"</code> instead of <code>value</code> <code>Unexpected end of JSON</code> Missing closing bracket/brace Check all brackets are closed <code>Unexpected number</code> Number at start of object Add property name: <code>\"key\": 123</code> <code>Trailing comma</code> Comma after last element Remove trailing comma","tags":["tools","json","validator","formatting"]},{"location":"online-dev-tools/regex-tester/","title":"Regex Tester","text":"<p>A real-time regular expression tester. Enter your regex pattern and test text to see matches instantly.</p>","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/regex-tester/#how-to-use","title":"How to Use","text":"<ol> <li>Enter Regex: Type your regular expression pattern in the first field</li> <li>Add Test Text: Enter the text you want to test against</li> <li>See Results: View matches in real-time as you type</li> </ol> Regular Expression: Test Text: Results: <pre>Enter regex and text above to see matches...</pre> Matches: 0","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/regex-tester/#features","title":"Features","text":"<ul> <li>Real-time Testing: See results as you type</li> <li>Match Details: View each match with position information</li> <li>Error Handling: Clear error messages for invalid regex</li> <li>Responsive Design: Works on all devices</li> </ul>","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/regex-tester/#privacy-security","title":"Privacy &amp; Security","text":"<p>\ud83d\udd12 100% Client-side: All processing happens in your browser. No data is sent to any server or saved anywhere.</p>","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/regex-tester/#common-regex-patterns","title":"Common Regex Patterns","text":"Pattern Description Example <code>\\d+</code> One or more digits <code>123</code>, <code>456</code> <code>[a-z]+</code> One or more lowercase letters <code>hello</code>, <code>world</code> <code>\\w+</code> One or more word characters <code>hello123</code>, <code>world_</code> <code>\\s+</code> One or more whitespace characters <code></code>, <code>\\t</code> <code>^</code> Start of line <code>^Hello</code> <code>$</code> End of line <code>world$</code> <code>.*</code> Any character (zero or more) <code>.*</code> <code>.+</code> Any character (one or more) <code>.+</code> <code>[0-9]{3}</code> Exactly 3 digits <code>123</code>, <code>456</code> <code>[a-zA-Z]{2,4}</code> 2-4 letters <code>ab</code>, <code>xyz</code>, <code>abcd</code>","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/regex-tester/#examples","title":"Examples","text":"","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/regex-tester/#email-validation","title":"Email Validation","text":"<pre><code>^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\n</code></pre>","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/regex-tester/#phone-number-us","title":"Phone Number (US)","text":"<pre><code>^\\(\\d{3}\\) \\d{3}-\\d{4}$\n</code></pre>","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/regex-tester/#url-pattern","title":"URL Pattern","text":"<pre><code>https?://[^\\s]+\n</code></pre>","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/regex-tester/#date-format-yyyy-mm-dd","title":"Date Format (YYYY-MM-DD)","text":"<pre><code>^\\d{4}-\\d{2}-\\d{2}$\n</code></pre>","tags":["tools","regex","testing","validation"]},{"location":"online-dev-tools/url-encoder/","title":"URL Encoder/Decoder","text":"<p>A comprehensive URL encoding and decoding tool. Convert special characters to URL-safe format and vice versa.</p>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#how-to-use","title":"How to Use","text":"<ol> <li>Encode: Enter text to convert special characters to URL encoding</li> <li>Decode: Enter encoded URL to convert back to readable text</li> <li>Multiple Formats: Choose between different encoding schemes</li> </ol> Input: Encoding Type:  Standard URL Encoding  Component Encoding  Full Encoding Encode URL Decode URL Clear Output: Ready","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#features","title":"Features","text":"<ul> <li>Multiple Encoding Types: Standard, Component, and Full encoding</li> <li>Real-time Information: Shows current encoding scheme details</li> <li>Error Handling: Clear error messages for invalid URLs</li> <li>Responsive Design: Works on all devices</li> </ul>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#privacy-security","title":"Privacy &amp; Security","text":"<p>\ud83d\udd12 100% Client-side: All processing happens in your browser. No data is sent to any server or saved anywhere.</p>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#encoding-types","title":"Encoding Types","text":"","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#standard-url-encoding","title":"Standard URL Encoding","text":"<ul> <li>Use case: Full URLs</li> <li>Encodes: Spaces as <code>%20</code>, special characters as <code>%XX</code></li> <li>Preserves: <code>/ ? = &amp; #</code> (URL structure characters)</li> </ul>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#component-encoding","title":"Component Encoding","text":"<ul> <li>Use case: URL parameters, query strings</li> <li>Encodes: All special characters including <code>/ ? = &amp; #</code></li> <li>Example: <code>param=value&amp;next=path</code> \u2192 <code>param%3Dvalue%26next%3Dpath</code></li> </ul>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#full-encoding","title":"Full Encoding","text":"<ul> <li>Use case: Maximum compatibility</li> <li>Encodes: All non-alphanumeric characters</li> <li>Example: <code>Hello World!</code> \u2192 <code>Hello%20World%21</code></li> </ul>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#common-use-cases","title":"Common Use Cases","text":"","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#api-parameters","title":"API Parameters","text":"<p>Encode query parameters for API requests.</p>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#file-paths","title":"File Paths","text":"<p>Encode file paths for web applications.</p>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#form-data","title":"Form Data","text":"<p>Encode form data for submission.</p>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#log-analysis","title":"Log Analysis","text":"<p>Decode encoded URLs in log files.</p>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#examples","title":"Examples","text":"","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#standard-encoding","title":"Standard Encoding","text":"<pre><code>Input:  https://example.com/path with spaces\nOutput: https://example.com/path%20with%20spaces\n</code></pre>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#component-encoding_1","title":"Component Encoding","text":"<pre><code>Input:  param=value&amp;next=path\nOutput: param%3Dvalue%26next%3Dpath\n</code></pre>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#full-encoding_1","title":"Full Encoding","text":"<pre><code>Input:  Hello World! @#$%\nOutput: Hello%20World%21%20%40%23%24%25\n</code></pre>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/url-encoder/#special-characters-reference","title":"Special Characters Reference","text":"Character Standard Component Full Space <code>%20</code> <code>%20</code> <code>%20</code> ! <code>!</code> <code>%21</code> <code>%21</code> \" <code>%22</code> <code>%22</code> <code>%22</code> # <code>#</code> <code>%23</code> <code>%23</code> $ <code>$</code> <code>%24</code> <code>%24</code> % <code>%25</code> <code>%25</code> <code>%25</code> &amp; <code>&amp;</code> <code>%26</code> <code>%26</code> ' <code>'</code> <code>%27</code> <code>%27</code> ( <code>(</code> <code>%28</code> <code>%28</code> ) <code>)</code> <code>%29</code> <code>%29</code> * <code>*</code> <code>%2A</code> <code>%2A</code> + <code>+</code> <code>%2B</code> <code>%2B</code> , <code>,</code> <code>%2C</code> <code>%2C</code> / <code>/</code> <code>%2F</code> <code>%2F</code> : <code>:</code> <code>%3A</code> <code>%3A</code> ; <code>;</code> <code>%3B</code> <code>%3B</code> = <code>=</code> <code>%3D</code> <code>%3D</code> ? <code>?</code> <code>%3F</code> <code>%3F</code> @ <code>@</code> <code>%40</code> <code>%40</code> [ <code>%5B</code> <code>%5B</code> <code>%5B</code> ] <code>%5D</code> <code>%5D</code> <code>%5D</code>","tags":["tools","url","encoding","decoding","percent-encoding"]},{"location":"online-dev-tools/yaml-validator/","title":"YAML Validator","text":"<p>A real-time YAML validator and formatter. Paste your YAML content below to validate syntax and see the parsed structure.</p>","tags":["tools","yaml","validator","formatting"]},{"location":"online-dev-tools/yaml-validator/#how-to-use","title":"How to Use","text":"<ol> <li>Paste YAML: Enter your YAML content in the text area below</li> <li>Real-time Validation: See immediate feedback on syntax errors</li> <li>Parsed Output: View the parsed JSON structure of your YAML</li> </ol> YAML Input: Parsed Output: <pre>Enter YAML content above to see the parsed result...</pre>","tags":["tools","yaml","validator","formatting"]},{"location":"online-dev-tools/yaml-validator/#features","title":"Features","text":"<ul> <li>Real-time Validation: Instant feedback as you type</li> <li>Syntax Highlighting: Clear error messages for invalid YAML</li> <li>JSON Output: See the parsed structure in JSON format</li> <li>Responsive Design: Works on desktop and mobile devices</li> </ul>","tags":["tools","yaml","validator","formatting"]},{"location":"online-dev-tools/yaml-validator/#privacy-security","title":"Privacy &amp; Security","text":"<p>\ud83d\udd12 100% Client-side: All processing happens in your browser. No data is sent to any server or saved anywhere.</p>","tags":["tools","yaml","validator","formatting"]},{"location":"online-dev-tools/yaml-validator/#common-yaml-syntax","title":"Common YAML Syntax","text":"<pre><code># Basic structure\nname: value\nnumber: 42\nboolean: true\n\n# Lists\nfruits:\n  - apple\n  - banana\n  - orange\n\n# Nested objects\nperson:\n  name: John Doe\n  age: 30\n  address:\n    street: 123 Main St\n    city: Anytown\n    zip: 12345\n\n# Multi-line strings\ndescription: |\n  This is a multi-line\n  string that preserves\n  line breaks\n</code></pre>","tags":["tools","yaml","validator","formatting"]},{"location":"tutorials/ansible_cisco_napalm_diff/","title":"NAPALM with Ansible","text":"","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#why-napalm-ansible","title":"Why NAPALM + Ansible?","text":"<p>NAPALM gives you a vendor\u2011agnostic Python API for interacting with network devices, while Ansible gives you idempotent automation driven by human\u2011readable YAML.\\ Together they let you:</p> <ul> <li>Retrieve facts or configuration from many vendors with a single module call.</li> <li>Safely push configuration changes with automatic diff and rollback.</li> <li>Validate compliance against source\u2011of\u2011truth data before (or after) a change window.</li> </ul>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#a-note-on-the-old-napalm-connection-plugin","title":"A note on the old <code>napalm</code> connection plugin","text":"<p>The <code>ansible.netcommon.napalm</code> connection plugin was deprecated and removed from the collection starting in ansible.netcommon\u00a05.0.\\ Modern playbooks should instead use the dedicated NAPALM modules (<code>get_facts</code>, <code>install_config</code>, <code>validate</code>, and friends) which keep the NAPALM logic self\u2011contained.</p>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#prerequisites","title":"Prerequisites","text":"Component Recommended Version Notes Python 3.10+ NAPALM and Ansible now test primarily on 3.9+ Ansible Core 2.16+ Install from <code>pip install ansible-core</code> ansible\u2011napalm collection latest <code>ansible-galaxy collection install napalm.napalm</code> Python NAPALM library 4.x <code>pip install napalm</code> Network devices IOS\u2011XE\u00a017+, Junos\u00a022+, EOS\u00a04.30+, \u2026 Anything supported by NAPALM <p>If you prefer Docker, grab the ready\u2011made devcontainer from the GitHub repo.</p>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#installing-everything-in-one-go","title":"Installing everything in one go","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install ansible-core napalm\nansible-galaxy collection install napalm.napalm\n</code></pre> <p>Tip: Pin exact versions in a <code>requirements.txt</code> and <code>collections/requirements.yml</code> so your CI pipeline is repeatable.</p>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#project-layout","title":"Project layout","text":"<pre><code>inventory/\n  routers.yml\ngroup_vars/\n  all.yml\nplaybooks/\n  gather-facts.yml\n  backup-config.yml\n  push-config.yml\nvalidate/\n  bgp.yml\n</code></pre>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#inventory-example","title":"Inventory example","text":"<p><code>inventory/routers.yml</code>:</p> <pre><code>all:\n  children:\n    lab_routers:\n      hosts:\n        r1:\n          ansible_host: 192.0.2.11\n          ansible_user: ansible\n          ansible_password: Cisco123\n          ansible_network_os: ios\n        r2:\n          ansible_host: 192.0.2.12\n          ansible_user: ansible\n          ansible_password: Juniper123\n          ansible_network_os: junos\n</code></pre>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#global-variables-group_varsallyml","title":"Global variables (group_vars/all.yml)","text":"<pre><code>napalm_username: \"{{ ansible_user }}\"\nnapalm_password: \"{{ ansible_password }}\"\nnapalm_optional_args:\n  global_delay_factor: 2\n</code></pre>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#1-gathering-device-facts","title":"1. Gathering device facts","text":"<p>Create <code>playbooks/gather-facts.yml</code>:</p> <pre><code>---\n- name: Collect baseline facts with NAPALM\n  hosts: lab_routers\n  gather_facts: no\n  tasks:\n    - name: Get facts (basic example)\n      napalm.napalm.get_facts:\n        hostname: \"{{ inventory_hostname }}\"\n        username: \"{{ napalm_username }}\"\n        password: \"{{ napalm_password }}\"\n        optional_args: \"{{ napalm_optional_args | default({}) }}\"\n      register: result\n\n    - name: Show facts\n      debug:\n        var: result.facts\n\n# ---\n# Advanced example: Using filters, args, and assertions\n\n- name: Get advanced facts and validate\n  hosts: lab_routers\n  gather_facts: no\n  tasks:\n    - name: Get filtered facts from device\n      napalm.napalm.get_facts:\n        hostname: \"{{ inventory_hostname }}\"\n        username: \"{{ napalm_username }}\"\n        password: \"{{ napalm_password }}\"\n        optional_args:\n          path: \"{{ playbook_dir }}/mocked/{{ inventory_hostname }}\"\n          profile: \"{{ profile | default('') }}\"\n        filter:\n          - facts\n          - route_to\n          - interfaces\n        args:\n          route_to:\n            protocol: static\n            destination: 8.8.8.8\n      register: test_napalm\n\n    - name: Assert on returned facts\n      assert:\n        that:\n          - test_napalm.facts.hostname is defined\n          - test_napalm.facts.interfaces is defined\n          # Add more assertions as needed, e.g.:\n          # - test_napalm.facts.hostname == \"expected-hostname\"\n          # - '1.0.4.0/24' in test_napalm.facts.route_to\n</code></pre> <p>Run it:</p> <pre><code>ansible-playbook -i inventory/ playbooks/gather-facts.yml\n</code></pre> <p>Sample output:</p> <pre><code>ok: [r1] =&gt; {\n  \"result.facts\": {\n    \"hostname\": \"R1\",\n    \"model\": \"CSR1000v\",\n    \"os_version\": \"17.09.04\",\n    \"serial_number\": \"9B0FD12ZABCDEFG\",\n    ...\n  }\n}\n</code></pre>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#2-backing-up-runningconfig","title":"2. Backing up running\u2011config","text":"<p><code>playbooks/backup-config.yml</code>:</p> <pre><code>---\n- name: Save configs to local backup directory\n  hosts: lab_routers\n  gather_facts: no\n  tasks:\n    - name: Fetch running config\n      napalm.napalm.get_facts:\n        filter: config\n        hostname: \"{{ inventory_hostname }}\"\n        username: \"{{ napalm_username }}\"\n        password: \"{{ napalm_password }}\"\n      register: config\n\n    - name: Write file locally\n      copy:\n        content: \"{{ config.facts.config.running }}\"\n        dest: \"backups/{{ inventory_hostname }}-{{ lookup('pipe', 'date +%F') }}.cfg\"\n</code></pre> <p>Idempotency note: NAPALM modules set <code>changed: false</code> when there is no diff, so you can chain them in CI pipelines without side\u2011effects.</p>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#3-pushing-configuration-safely","title":"3. Pushing configuration safely","text":"<p>Create a candidate config file, e.g. <code>configs/r1_bgp.txt</code>:</p> <pre><code>router bgp 65001\n address-family ipv4 unicast\n  network 10.0.0.0 mask 255.255.255.0\n!\n</code></pre> <p>Playbook <code>playbooks/push-config.yml</code>:</p> <pre><code>---\n- name: Push candidate config with automatic diff + rollback\n  hosts: r1\n  gather_facts: no\n  tasks:\n    - name: Install configuration\n      napalm.napalm.install_config:\n        hostname: \"{{ ansible_host }}\"\n        username: \"{{ napalm_username }}\"\n        password: \"{{ napalm_password }}\"\n        optional_args: \"{{ napalm_optional_args | default({}) }}\"\n        candidate_filename: \"configs/{{ inventory_hostname }}_bgp.txt\"\n        commit_changes: true\n        replace_config: false\n        diff_file: \"diffs/{{ inventory_hostname }}-{{ lookup('pipe', 'date +%F-%H%M%S') }}.diff\"\n</code></pre> <p>What happens next:</p> <ol> <li>NAPALM loads the candidate file into the device\u2019s compare engine.</li> <li>If the diff is non\u2011empty, Ansible sets <code>changed: true</code> and commits.</li> <li>On error, NAPALM triggers an automatic rollback, so you stay safe.</li> </ol>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#4-validating-state-against-sourceoftruth","title":"4. Validating state against source\u2011of\u2011truth","text":"<p>NAPALM ships a YAML\u2011based validation framework.</p> <p><code>validate/bgp.yml</code>:</p> <pre><code>---\nbgp_neighbors:\n  global:\n    router_id: 192.0.2.1\n    peers:\n      203.0.113.1:\n        is_up: true\n        address_family:\n          ipv4 unicast:\n            received_prefixes: 1\n</code></pre> <p><code>playbooks/validate.yml</code>:</p> <pre><code>---\n- name: Check operational state\n  hosts: r1\n  gather_facts: no\n  tasks:\n    - name: Validate BGP\n      napalm.napalm.validate:\n        hostname: \"{{ ansible_host }}\"\n        username: \"{{ napalm_username }}\"\n        password: \"{{ napalm_password }}\"\n        validation_file: \"validate/bgp.yml\"\n      register: validate\n\n    - name: Fail if non\u2011compliant\n      assert:\n        that:\n          - validate.compliance\n</code></pre> <p>Add this to your CI/CD pipeline and you have continuous compliance testing.</p>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#5-putting-it-all-together-in-ci","title":"5. Putting it all together in CI","text":"<pre><code>name: network-ci\non:\n  push:\n    paths:\n      - \"configs/**\"\n      - \"validate/**\"\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n      - name: Install dependencies\n        run: |\n          pip install ansible-core napalm\n          ansible-galaxy collection install -r collections/requirements.yml\n      - name: Dry\u2011run config\n        run: ansible-playbook -i inventory/ playbooks/push-config.yml --check\n      - name: Validate\n        run: ansible-playbook -i inventory/ playbooks/validate.yml\n</code></pre>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#troubleshooting-checklist","title":"Troubleshooting checklist","text":"Symptom Fix <code>ModuleNotFoundError: napalm</code> Activate your virtualenv or <code>pip install napalm</code> <code>ssh_exchange_identification</code> Check <code>ansible_host</code> IP and ACLs; NAPALM needs SSH access Device shows changed every run Use <code>replace_config: false</code> and make device config canonical Connection plugin not found Make sure you don\u2019t set <code>ansible_connection: napalm</code> after its removal","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_cisco_napalm_diff/#next-steps","title":"Next steps","text":"<ul> <li>Explore vendor\u2011specific optional args (e.g. EOS <code>transport: https</code>) in the NAPALM docs.</li> <li>Combine NAPALM with Ansible\u2019s <code>delegate_to:</code> for control\u2011plane orchestration.</li> <li>Look at <code>napalm_diff_yang</code> for data\u2011model\u2011driven compliance.</li> </ul> <p>Happy automating! If you spot any issues, open a pull request or ping me on Bluesky</p> <p>Updated: 27\u00a0June\u00a02025</p>","tags":["napalm","ansible","tutorial"]},{"location":"tutorials/ansible_tutorial_1_concepts/","title":"Ansible Tutorial 1: Concepts & Terminology","text":"<p>title: Ansible Tutorial 1: Concepts &amp; Terminology tags:   - ansible   - tutorial   - concepts   - getting started</p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#ansible-tutorial-1-understand-ansible-concepts-terminology","title":"Ansible Tutorial 1: Understand Ansible Concepts &amp; Terminology","text":"<p>This tutorial introduces the core concepts and terminology of Ansible. It is the first step for anyone new to network automation or configuration management.</p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#ansible-overview","title":"Ansible Overview","text":"<p>Ansible is an open-source automation tool for configuration management, application deployment, and task automation. It uses simple YAML files (playbooks) and does not require agents on managed nodes.</p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#introduction-to-yaml","title":"Introduction to YAML","text":"<p>YAML (YAML Ain't Markup Language) is a human-readable data format used for Ansible playbooks and inventories.</p> <p>Example YAML: <pre><code>key: value\nlist:\n  - item1\n  - item2\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#inventory","title":"Inventory","text":"<p>The inventory defines the hosts and groups Ansible manages. It is the foundation of all automation in Ansible.</p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#inventory-file-formats","title":"Inventory File Formats","text":"<ul> <li>INI format: Simple, easy to start with, good for small environments.</li> <li>YAML format: More powerful, supports nested groups and variables, recommended for larger or more complex environments.</li> </ul> <p>Example inventory (INI): <pre><code>[routers]\nr1 ansible_host=192.0.2.1 ansible_user=admin ansible_password=yourpass ansible_network_os=ios\nr2 ansible_host=192.0.2.2 ansible_user=admin ansible_password=yourpass ansible_network_os=ios\n\n[switches]\ns1 ansible_host=192.0.2.10 ansible_user=admin ansible_password=yourpass ansible_network_os=eos\n</code></pre></p> <p>Example inventory (YAML): <pre><code>all:\n  children:\n    routers:\n      hosts:\n        r1:\n          ansible_host: 192.0.2.1\n          ansible_user: admin\n          ansible_password: yourpass\n          ansible_network_os: ios\n        r2:\n          ansible_host: 192.0.2.2\n          ansible_user: admin\n          ansible_password: yourpass\n          ansible_network_os: ios\n    switches:\n      hosts:\n        s1:\n          ansible_host: 192.0.2.10\n          ansible_user: admin\n          ansible_password: yourpass\n          ansible_network_os: eos\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#host-and-group-variables-in-inventory","title":"Host and Group Variables in Inventory","text":"<ul> <li>You can define variables for all hosts, groups, or individual hosts directly in the inventory file or in separate <code>group_vars/</code> and <code>host_vars/</code> directories.</li> <li>Common variables include:</li> <li><code>ansible_host</code>: The IP or DNS name to connect to</li> <li><code>ansible_user</code>: The SSH username</li> <li><code>ansible_password</code>: The SSH password</li> <li><code>ansible_network_os</code>: The network platform (e.g., ios, eos, junos)</li> <li><code>ansible_become</code>: Whether to use privilege escalation (e.g., enable mode)</li> </ul> <p>Best Practice: - Use <code>group_vars/</code> and <code>host_vars/</code> for sensitive data and to keep your inventory clean and maintainable.</p> <p>Example directory structure: <pre><code>project/\n  inventory.yml\n  group_vars/\n    routers.yml\n    switches.yml\n  host_vars/\n    r1.yml\n    s1.yml\n  playbook.yml\n</code></pre></p> <p>Example <code>group_vars/routers.yml</code>: <pre><code>ansible_user: admin\nansible_password: yourpass\nansible_network_os: ios\n</code></pre></p> <p>Example <code>host_vars/r1.yml</code>: <pre><code>ansible_host: 192.0.2.1\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#inventory-best-practices","title":"Inventory Best Practices","text":"<ul> <li>Use descriptive group names (e.g., routers, switches, firewalls)</li> <li>Store credentials and sensitive data in <code>group_vars/</code> or use Ansible Vault for encryption</li> <li>Use YAML inventory for complex environments</li> <li>Document your inventory structure for your team</li> </ul>"},{"location":"tutorials/ansible_tutorial_1_concepts/#ansiblecfg-ansible-configuration-file","title":"ansible.cfg: Ansible Configuration File","text":"<p>The <code>ansible.cfg</code> file is the main configuration file for Ansible. It allows you to customize how Ansible behaves, set default paths, control privilege escalation, SSH settings, and more. Having a project-specific <code>ansible.cfg</code> in your project directory ensures consistent behavior for everyone working on the project.</p> <p>Why use ansible.cfg? - Centralizes configuration for your project - Avoids the need to pass extra flags on every command - Ensures reproducible and predictable automation</p> <p>Common settings: - <code>inventory</code>: Path to your inventory file - <code>roles_path</code>: Where Ansible looks for roles - <code>host_key_checking</code>: Disable SSH host key checking (useful for labs) - <code>retry_files_enabled</code>: Disable creation of retry files - <code>remote_user</code>: Default SSH user - <code>private_key_file</code>: Path to SSH private key - <code>timeout</code>: SSH connection timeout</p> <p>Example ansible.cfg: <pre><code>[defaults]\ninventory = inventory.yml\nroles_path = roles\nhost_key_checking = False\nretry_files_enabled = False\nremote_user = admin\nprivate_key_file = ~/.ssh/id_rsa\ntimeout = 30\n</code></pre></p> <p>Tip: - Place your <code>ansible.cfg</code> in the root of your project directory. Ansible will automatically use it if present. - You can override any setting with command-line flags if needed.</p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#ansible-playbook-structure","title":"Ansible Playbook Structure","text":"<p>A playbook is a YAML file describing automation tasks.</p> <p>Example playbook: <pre><code>---\n- name: Example Playbook\n  hosts: routers\n  gather_facts: no\n  tasks:\n    - name: Ping device\n      ansible.builtin.ping:\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#host-and-group-variables","title":"Host and Group Variables","text":"<p>Variables can be set for groups or individual hosts using <code>group_vars/</code> and <code>host_vars/</code> directories.</p> <p>Example <code>group_vars/routers.yml</code>: <pre><code>ansible_user: admin\nansible_password: yourpass\nansible_network_os: ios\n</code></pre></p> <p>Example <code>host_vars/r1.yml</code>: <pre><code>ansible_host: 192.0.2.1\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_1_concepts/#ansible-facts","title":"Ansible Facts","text":"<p>Facts are variables automatically discovered about hosts. For network devices, use modules like <code>cisco.ios.ios_facts</code> or <code>arista.eos.eos_facts</code>.</p> <p>Example: <pre><code>- name: Gather facts from Cisco IOS\n  hosts: routers\n  gather_facts: no\n  connection: network_cli\n  tasks:\n    - name: Get facts\n      cisco.ios.ios_facts:\n      register: facts\n    - debug:\n        var: facts\n</code></pre></p> <p>Continue to Tutorial 2: Ansible Modules </p>"},{"location":"tutorials/ansible_tutorial_2_modules/","title":"Ansible Tutorial 2: Modules & Your First Playbook","text":"<p>title: Ansible Tutorial 2: Modules &amp; Your First Playbook tags:   - ansible   - tutorial   - modules   - getting started</p>"},{"location":"tutorials/ansible_tutorial_2_modules/#ansible-tutorial-2-modules-your-first-playbook","title":"Ansible Tutorial 2: Modules &amp; Your First Playbook","text":"<p>This tutorial covers the basics of using Ansible modules, the difference between built-in and community modules, and how to find and use modules for your network devices.</p>"},{"location":"tutorials/ansible_tutorial_2_modules/#what-is-a-module","title":"What is a Module?","text":"<p>A module is a reusable, single-purpose unit of work in Ansible (e.g., install a package, run a command, configure a device).</p>"},{"location":"tutorials/ansible_tutorial_2_modules/#using-modules","title":"Using Modules","text":"<p>Modules are used in playbooks as tasks.</p> <p>Example: <pre><code>- name: Ping all devices\n  hosts: all\n  gather_facts: no\n  tasks:\n    - name: Ping\n      ansible.builtin.ping:\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_2_modules/#built-in-vs-community-modules","title":"Built-in vs. Community Modules","text":"<ul> <li>Built-in modules: Included with Ansible (e.g., <code>ansible.builtin.ping</code>, <code>ansible.builtin.copy</code>, <code>cisco.ios.ios_command</code>)</li> <li>Community modules: Provided by the community, often via Ansible Galaxy collections (e.g., <code>cisco.ios.ios_config</code>)</li> </ul>"},{"location":"tutorials/ansible_tutorial_2_modules/#module-index-how-to-search","title":"Module Index &amp; How to Search","text":"<ul> <li>Ansible Module Index</li> <li>Use <code>ansible-doc -l</code> to list available modules</li> <li>Use <code>ansible-doc &lt;module_name&gt;</code> for documentation</li> </ul>"},{"location":"tutorials/ansible_tutorial_2_modules/#vendor-modules","title":"Vendor Modules","text":"<p>Always try to use vendor-specific modules (e.g., <code>cisco.ios.ios_command</code> for Cisco, <code>arista.eos.eos_command</code> for Arista) for best results.</p>"},{"location":"tutorials/ansible_tutorial_2_modules/#your-first-playbook-with-a-vendor-module","title":"Your First Playbook with a Vendor Module","text":"<pre><code>---\n- name: Get running config from Cisco router\n  hosts: routers\n  gather_facts: no\n  connection: network_cli\n  tasks:\n    - name: Get running config\n      cisco.ios.ios_command:\n        commands:\n          - show running-config\n      register: config\n    - debug:\n        var: config.stdout_lines\n</code></pre> <p>Continue to Tutorial 3: Variables, Modules, and Network Fact Gathering </p>"},{"location":"tutorials/ansible_tutorial_3_variables_facts/","title":"Ansible Tutorial 3: Variables, Modules & Network Fact Gathering","text":"<p>title: Ansible Tutorial 3: Variables, Modules &amp; Network Fact Gathering tags:   - ansible   - tutorial   - variables   - network facts   - getting started</p>"},{"location":"tutorials/ansible_tutorial_3_variables_facts/#ansible-tutorial-3-variables-modules-network-fact-gathering","title":"Ansible Tutorial 3: Variables, Modules &amp; Network Fact Gathering","text":"<p>This tutorial covers how to use variables, advanced modules, and gather facts from network devices with Ansible.</p>"},{"location":"tutorials/ansible_tutorial_3_variables_facts/#ansible-variables","title":"Ansible Variables","text":"<p>Variables allow you to customize playbooks and reuse code. You can define them in playbooks, inventories, <code>group_vars/</code>, or <code>host_vars/</code>.</p> <p>Example: <pre><code>vars:\n  my_var: value\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_3_variables_facts/#cisco-ios-modules","title":"Cisco IOS Modules","text":"<p>Use modules like <code>cisco.ios.ios_command</code>, <code>cisco.ios.ios_config</code>, and <code>cisco.ios.ios_facts</code> for Cisco devices.</p> <p>Example: <pre><code>- name: Get version from Cisco router\n  hosts: routers\n  gather_facts: no\n  connection: network_cli\n  tasks:\n    - name: Show version\n      cisco.ios.ios_command:\n        commands:\n          - show version\n      register: version_output\n    - debug:\n        var: version_output.stdout_lines\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_3_variables_facts/#using-cli_command","title":"Using cli_command","text":"<p><code>ansible.netcommon.cli_command</code> is a generic module for sending commands to network devices (multi-vendor).</p> <p>Example: <pre><code>- name: Use cli_command on Cisco\n  hosts: routers\n  gather_facts: no\n  connection: network_cli\n  tasks:\n    - name: Show interfaces\n      ansible.netcommon.cli_command:\n        command: show interfaces\n      register: interfaces\n    - debug:\n        var: interfaces.stdout_lines\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_3_variables_facts/#using-enable-mode-become","title":"Using Enable Mode (become)","text":"<p>Some commands require privileged (enable) mode. Use <code>become: yes</code> and set <code>ansible_become_password</code>.</p> <p>Example: <pre><code>- name: Use enable mode\n  hosts: routers\n  gather_facts: no\n  connection: network_cli\n  become: yes\n  vars:\n    ansible_become_password: your_enable_password\n  tasks:\n    - name: Show running config\n      cisco.ios.ios_command:\n        commands:\n          - show running-config\n      register: config\n    - debug:\n        var: config.stdout_lines\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_3_variables_facts/#passing-credentials","title":"Passing Credentials","text":"<p>You can pass credentials via variables, <code>group_vars/</code>, <code>host_vars/</code>, or environment variables.</p> <p>Example using environment variables: <pre><code>export ANSIBLE_NET_USERNAME=admin\nexport ANSIBLE_NET_PASSWORD=yourpass\n</code></pre></p>"},{"location":"tutorials/ansible_tutorial_3_variables_facts/#gathering-network-facts","title":"Gathering Network Facts","text":"<p>Use modules like <code>cisco.ios.ios_facts</code> to gather detailed information from devices.</p> <p>Example: <pre><code>- name: Gather facts from Cisco IOS\n  hosts: routers\n  gather_facts: no\n  connection: network_cli\n  tasks:\n    - name: Get facts\n      cisco.ios.ios_facts:\n      register: facts\n    - debug:\n        var: facts\n</code></pre></p> <p>Congratulations! You now have a solid foundation in Ansible for network automation. Explore more advanced topics and real-world playbooks as your next step. </p>"},{"location":"tutorials/enable_wsl_on_windows/","title":"How to Enable Windows Subsystem for Linux (WSL)","text":"<p>The Windows Subsystem for Linux (WSL) allows you to run a Linux environment directly on Windows without the need for a virtual machine or dual-boot setup. It\u2019s a powerful tool for developers who want the best of both worlds: Windows and Linux.</p>","tags":["wsl","basics","tutorial"]},{"location":"tutorials/enable_wsl_on_windows/#step-1-check-system-requirements","title":"Step 1: Check System Requirements","text":"<ul> <li>OS Version: WSL is available on Windows 10 (version 1903 or later) and Windows 11.</li> <li>Hardware: Ensure your system supports virtualization (check in your BIOS/UEFI).</li> </ul>","tags":["wsl","basics","tutorial"]},{"location":"tutorials/enable_wsl_on_windows/#step-2-enable-wsl","title":"Step 2: Enable WSL","text":"<ol> <li>Open PowerShell as Administrator.</li> <li> <p>Run the following command to enable the WSL feature:</p> <pre><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n</code></pre> </li> <li> <p>Enable the Virtual Machine Platform (required for WSL 2):</p> <pre><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n</code></pre> </li> <li> <p>Restart your computer to apply the changes.</p> </li> </ol>","tags":["wsl","basics","tutorial"]},{"location":"tutorials/enable_wsl_on_windows/#step-3-set-wsl-2-as-the-default-version-optional","title":"Step 3: Set WSL 2 as the Default Version (Optional)","text":"<p>WSL 2 offers better performance and full system call compatibility compared to WSL 1.</p> <ol> <li>Update your WSL kernel to the latest version. Download it from Microsoft\u2019s WSL page.</li> <li> <p>Open PowerShell as Administrator and set WSL 2 as the default version:</p> <pre><code>wsl --set-default-version 2\n</code></pre> </li> </ol>","tags":["wsl","basics","tutorial"]},{"location":"tutorials/enable_wsl_on_windows/#step-4-install-a-linux-distribution","title":"Step 4: Install a Linux Distribution","text":"<ol> <li>Open the Microsoft Store.</li> <li>Search for your preferred Linux distribution (e.g., Ubuntu, Debian, Kali Linux).</li> <li>Click Install.</li> <li>Once installed, launch the distribution and complete the setup (create a username and password).</li> </ol>","tags":["wsl","basics","tutorial"]},{"location":"tutorials/enable_wsl_on_windows/#step-5-verify-your-wsl-installation","title":"Step 5: Verify Your WSL Installation","text":"<p>To check the installed Linux distributions and their WSL versions, run:</p> <pre><code>wsl -l -v\n</code></pre> <p>You should see a list of installed distributions and their version (WSL 1 or WSL 2).</p>","tags":["wsl","basics","tutorial"]},{"location":"tutorials/enable_wsl_on_windows/#step-6-start-using-linux-on-windows","title":"Step 6: Start Using Linux on Windows","text":"<p>Launch your Linux distribution from the Start menu or by typing <code>wsl</code> in PowerShell or Command Prompt.</p> <p>Example: <pre><code># Update package lists\nsudo apt update\n\n# Install essential tools\nsudo apt install build-essential\n</code></pre></p>","tags":["wsl","basics","tutorial"]},{"location":"tutorials/enable_wsl_on_windows/#additional-tips","title":"Additional Tips","text":"<ul> <li>File Access: Access Windows files from Linux via <code>/mnt/c</code>.</li> <li>Customizations: Modify WSL settings in the <code>.wslconfig</code> file in your user directory.</li> <li>GUI Applications: On Windows 11, WSL supports Linux GUI applications natively.</li> </ul>","tags":["wsl","basics","tutorial"]},{"location":"tutorials/enable_wsl_on_windows/#conclusion","title":"Conclusion","text":"<p>WSL bridges the gap between Windows and Linux, making it an excellent tool for developers, system administrators, and enthusiasts. With these steps, you can set up and start using WSL to enhance your productivity.</p>","tags":["wsl","basics","tutorial"]},{"location":"tutorials/git_basics/","title":"Git basics","text":"<p>title: Getting Started with Git: The Basics tags:     - git     - basics     - tutorial</p>"},{"location":"tutorials/git_basics/#getting-started-with-git-the-basics","title":"Getting Started with Git: The Basics","text":"<p>If you\u2019re diving into network automation or development, learning Git is essential. Git is a version control system that helps you track changes, collaborate with others, and manage code efficiently. Whether you\u2019re working solo or as part of a team, Git keeps your projects organized and your work history intact.</p> <p>In this guide, we\u2019ll cover the basics of Git to get you started.</p>"},{"location":"tutorials/git_basics/#what-is-git","title":"What is Git?","text":"<p>Git is a distributed version control system. It allows multiple people to work on the same project simultaneously without overwriting each other\u2019s changes. It also keeps a detailed history of every change, so you can roll back to a previous state if needed.</p>"},{"location":"tutorials/git_basics/#why-use-git","title":"Why Use Git?","text":"<ul> <li>Version Tracking: Never lose your work and easily revert to earlier versions.</li> <li>Collaboration: Work with others on the same codebase without conflicts.</li> <li>Branching: Experiment with new features or fixes without affecting the main project.</li> <li>Backup: Store your code on platforms like GitHub, GitLab, or Bitbucket for safekeeping.</li> </ul>"},{"location":"tutorials/git_basics/#installing-git","title":"Installing Git","text":"<p>Before using Git, you need to install it. You can download it from the official Git website, or use a package manager like:</p> <ul> <li>Windows: <code>choco install git</code></li> <li>macOS: <code>brew install git</code></li> <li>Linux: </li> <li>Ubuntu/Debian: <code>sudo apt install git</code></li> <li>CentOS/RedHat: <code>sudo yum install git</code></li> </ul>"},{"location":"tutorials/git_basics/#setting-up-git","title":"Setting Up Git","text":"<p>Once installed, set up your Git identity so your commits are properly attributed:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"youremail@example.com\"\n</code></pre> <p>To verify your settings:</p> <pre><code>git config --list\n</code></pre>"},{"location":"tutorials/git_basics/#basic-git-workflow","title":"Basic Git Workflow","text":"<p>Here\u2019s how a typical Git workflow looks:</p>"},{"location":"tutorials/git_basics/#1-create-a-repository","title":"1. Create a Repository","text":"<p>A repository is where Git tracks your project. Navigate to your project folder and initialize Git:</p> <pre><code>git init\n</code></pre> <p>This creates a hidden <code>.git</code> folder to store version history.</p>"},{"location":"tutorials/git_basics/#2-add-files-to-git","title":"2. Add Files to Git","text":"<p>To start tracking files, use the <code>git add</code> command:</p> <pre><code>git add filename\n</code></pre> <p>To track all files in the directory:</p> <pre><code>git add .\n</code></pre>"},{"location":"tutorials/git_basics/#3-commit-changes","title":"3. Commit Changes","text":"<p>Once files are staged with <code>git add</code>, commit them to save your changes:</p> <pre><code>git commit -m \"Initial commit\"\n</code></pre> <p>Use a clear and descriptive message to explain your changes.</p>"},{"location":"tutorials/git_basics/#4-view-status-and-logs","title":"4. View Status and Logs","text":"<p>Check the status of your repository:</p> <pre><code>git status\n</code></pre> <p>View the commit history:</p> <pre><code>git log\n</code></pre>"},{"location":"tutorials/git_basics/#5-create-a-branch","title":"5. Create a Branch","text":"<p>Branches let you work on features without affecting the main codebase:</p> <pre><code>git branch feature-branch\ngit checkout feature-branch\n</code></pre> <p>To create and switch to a branch in one command:</p> <pre><code>git checkout -b feature-branch\n</code></pre>"},{"location":"tutorials/git_basics/#6-merge-changes","title":"6. Merge Changes","text":"<p>When your work is complete, merge the branch into the main branch:</p> <pre><code>git checkout main\ngit merge feature-branch\n</code></pre> <p>Resolve any conflicts, if necessary, and finalize the merge.</p>"},{"location":"tutorials/git_basics/#7-other-commands","title":"7. Other commands","text":"<p>Rename branch <code>master</code> to <code>main</code> <pre><code>git branch -m master main\n</code></pre></p>"},{"location":"tutorials/git_basics/#wrapping-up","title":"Wrapping Up","text":"<p>Git is a powerful tool that can simplify your workflow and improve collaboration. By mastering the basics, you\u2019ll be well on your way to managing your projects effectively. In future posts, we\u2019ll dive deeper into more advanced Git features.</p> <p>Ready to get started? Try creating your first repository and experiment with these commands!</p>"},{"location":"tutorials/install_nautobot_development_in_docker/","title":"Installing Nautobot in Docker Containers","text":"<p>\u26a0\ufe0f IMPORTANT: This tutorial is for DEVELOPMENT purposes only. This setup is NOT suitable for production use.</p> <p>This tutorial will guide you through setting up Nautobot using Docker containers for development purposes using the Nautobot Development Environment repository.</p>"},{"location":"tutorials/install_nautobot_development_in_docker/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed on your system:</p> <ul> <li>Docker: Version 20.10 or later</li> <li>Docker Compose: Version 2.0 or later</li> <li>Git: For cloning the repository</li> <li>Make: For running convenience commands (optional but recommended)</li> </ul>"},{"location":"tutorials/install_nautobot_development_in_docker/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<p>First, clone the Nautobot development environment repository:</p> <pre><code>git clone https://github.com/bsmeding/nautobot_development_environment.git\ncd nautobot_development_environment\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#step-2-configure-environment-variables","title":"Step 2: Configure Environment Variables","text":"<p>Copy the example environment file and configure it for your setup:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit the <code>.env</code> file with your preferred settings. Key variables to configure:</p> <pre><code># Database settings\nPOSTGRES_DB=nautobot\nPOSTGRES_USER=nautobot\nPOSTGRES_PASSWORD=your_secure_password\n\n# Redis settings\nREDIS_PASSWORD=your_redis_password\n\n# Nautobot settings\nNAUTOBOT_SECRET_KEY=your_secret_key_here\nNAUTOBOT_ALLOWED_HOSTS=localhost,127.0.0.1\nNAUTOBOT_SUPERUSER_NAME=admin\nNAUTOBOT_SUPERUSER_EMAIL=admin@example.com\nNAUTOBOT_SUPERUSER_PASSWORD=your_admin_password\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#step-3-build-and-start-the-containers","title":"Step 3: Build and Start the Containers","text":"<p>Use Docker Compose to build and start all services:</p> <pre><code>docker-compose up -d --build\n</code></pre> <p>This command will: - Build the Nautobot application container - Start PostgreSQL database - Start Redis for caching - Start the Nautobot web application</p>"},{"location":"tutorials/install_nautobot_development_in_docker/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"<p>Check that all containers are running:</p> <pre><code>docker-compose ps\n</code></pre> <p>You should see all services (nautobot, postgres, redis) in the \"Up\" state.</p>"},{"location":"tutorials/install_nautobot_development_in_docker/#step-5-initialize-the-database","title":"Step 5: Initialize the Database","text":"<p>Run database migrations and create the superuser:</p> <pre><code>docker-compose exec nautobot nautobot-server migrate\ndocker-compose exec nautobot nautobot-server createsuperuser\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#step-6-access-nautobot","title":"Step 6: Access Nautobot","text":"<p>Once all services are running, you can access Nautobot at:</p> <ul> <li>Web Interface: http://localhost:8080</li> <li>API: http://localhost:8080/api/</li> </ul> <p>Log in using the superuser credentials you created in Step 5.</p>"},{"location":"tutorials/install_nautobot_development_in_docker/#development-workflow","title":"Development Workflow","text":""},{"location":"tutorials/install_nautobot_development_in_docker/#making-code-changes","title":"Making Code Changes","text":"<p>The repository is configured with volume mounts, so any changes you make to the Nautobot source code will be reflected immediately:</p> <ol> <li>Make your changes to the code</li> <li>The changes will be automatically detected</li> <li>Restart the Nautobot container if needed: <code>docker-compose restart nautobot</code></li> </ol>"},{"location":"tutorials/install_nautobot_development_in_docker/#running-commands","title":"Running Commands","text":"<p>Execute Nautobot management commands:</p> <pre><code># Run shell\ndocker-compose exec nautobot nautobot-server shell\n\n# Run tests\ndocker-compose exec nautobot nautobot-server test\n\n# Collect static files\ndocker-compose exec nautobot nautobot-server collectstatic --no-input\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#viewing-logs","title":"Viewing Logs","text":"<p>Monitor application logs:</p> <pre><code># All services\ndocker-compose logs -f\n\n# Specific service\ndocker-compose logs -f nautobot\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#useful-commands","title":"Useful Commands","text":""},{"location":"tutorials/install_nautobot_development_in_docker/#stop-services","title":"Stop Services","text":"<pre><code>docker-compose down\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#stop-and-remove-volumes-clean-slate","title":"Stop and Remove Volumes (Clean Slate)","text":"<pre><code>docker-compose down -v\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#rebuild-after-dependencies-change","title":"Rebuild After Dependencies Change","text":"<pre><code>docker-compose up -d --build\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#access-database","title":"Access Database","text":"<pre><code>docker-compose exec postgres psql -U nautobot -d nautobot\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/install_nautobot_development_in_docker/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Port Already in Use: If port 8080 is already in use, change the port mapping in <code>docker-compose.yml</code></p> </li> <li> <p>Database Connection Issues: Ensure PostgreSQL container is fully started before Nautobot tries to connect</p> </li> <li> <p>Permission Issues: Make sure Docker has proper permissions to access the project directory</p> </li> </ol>"},{"location":"tutorials/install_nautobot_development_in_docker/#reset-everything","title":"Reset Everything","text":"<p>To completely reset your development environment:</p> <pre><code>docker-compose down -v\ndocker system prune -f\ndocker-compose up -d --build\n</code></pre>"},{"location":"tutorials/install_nautobot_development_in_docker/#next-steps","title":"Next Steps","text":"<p>Now that you have Nautobot running in Docker, you can:</p> <ul> <li>Explore the web interface</li> <li>Create your first devices and sites</li> <li>Install and configure plugins</li> <li>Develop custom applications</li> <li>Contribute to the Nautobot project</li> </ul> <p>For more information about Nautobot development, visit the official documentation.</p>"},{"location":"tutorials/install_nautobot_in_docker/","title":"Deploy Production-Ready Nautobot with Docker","text":"<p>This tutorial provides two methods for deploying a production-ready Nautobot instance using Docker:</p> <ol> <li>Docker Compose - Simple deployment with a single configuration file</li> <li>Ansible - Automated deployment with infrastructure as code</li> </ol>"},{"location":"tutorials/install_nautobot_in_docker/#navigation","title":"Navigation","text":"<ul> <li>Install Nautobot in Docker (current)</li> <li>Install Nautobot Development Environment in Docker</li> </ul>"},{"location":"tutorials/install_nautobot_in_docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>Git installed</li> <li>Basic knowledge of Docker and containerization</li> <li>For Ansible method: Ansible installed on your control machine</li> </ul>"},{"location":"tutorials/install_nautobot_in_docker/#method-1-docker-compose-deployment","title":"Method 1: Docker Compose Deployment","text":""},{"location":"tutorials/install_nautobot_in_docker/#step-1-create-project-directory","title":"Step 1: Create Project Directory","text":"<pre><code>mkdir nautobot-docker\ncd nautobot-docker\n</code></pre>"},{"location":"tutorials/install_nautobot_in_docker/#step-2-create-docker-compose-file","title":"Step 2: Create Docker Compose File","text":"<p>Create a <code>docker-compose.yml</code> file with the following content:</p> <pre><code>services:\n  nautobot:\n    # image: networktocode/nautobot:stable\n    # image: bsmeding/nautobot:2.1.9-py3.11\n    container_name: nautobot\n    image: &amp;shared_image bsmeding/nautobot:2.4\n    depends_on:\n      - postgres\n      - redis\n    ports:\n      - \"8080:8080\"  # Exposes Nautobot on localhost:8080\n    environment:\n      - NAUTOBOT_DEBUG=True\n      - NAUTOBOT_DJANGO_EXTENSIONS_ENABLED=False\n      - NAUTOBOT_DJANGO_TOOLBAR_ENABLED=False\n      - NAUTOBOT_HIDE_RESTRICTED_UI=True\n      - NAUTOBOT_LOG_LEVEL=WARNING\n      - NAUTOBOT_METRICS_ENABLED=False\n      - NAUTOBOT_NAPALM_TIMEOUT=5\n      - NAUTOBOT_MAX_PAGE_SIZE=0\n      - NAUTOBOT_DB_HOST=postgres\n      - NAUTOBOT_DB_PORT=5432\n      - NAUTOBOT_DB_NAME=nautobot\n      - NAUTOBOT_DB_USER=nautobot\n      - NAUTOBOT_DB_PASSWORD=nautobotpassword\n      - NAUTOBOT_ALLOWED_HOSTS=*\n      - NAUTOBOT_REDIS_HOST=redis\n      - NAUTOBOT_REDIS_PORT=6379\n      - NAUTOBOT_SUPERUSER_NAME=admin\n      - NAUTOBOT_SUPERUSER_PASSWORD=admin\n      - NAUTOBOT_SUPERUSER_API_TOKEN=1234567890abcde0987654321\n      - NAUTOBOT_CREATE_SUPERUSER=true\n      - NAUTOBOT_INSTALLATION_METRICS_ENABLED=false\n      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py\n      - NAUTOBOT_CELERY_BROKER_URL=redis://redis:6379/0\n      - NAUTOBOT_SECURE_HSTS_SECONDS=3600\n      - NAUTOBOT_SECURE_SSL_REDIRECT=True\n      - NAUTOBOT_SESSION_COOKIE_SECURE=True\n      - NAUTOBOT_CSRF_COOKIE_SECURE=True\n    volumes:\n      - nautobot_config:/opt/nautobot/\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health/\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 120s\n    command: [\"nautobot-server\", \"runserver\", \"0.0.0.0:8080\"]\n\n\n\n  postgres:\n    image: postgres:13-alpine\n    container_name: postgres\n    command:\n      - \"-c\"\n      - \"max_connections=1000\"\n    healthcheck:\n      test: \"pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB\"\n      interval: \"10s\"\n      timeout: \"5s\"\n      retries: 10    \n    environment:\n      POSTGRES_USER: nautobot\n      POSTGRES_PASSWORD: nautobotpassword\n      POSTGRES_DB: nautobot\n    volumes:\n      # - ./mapped_folders/postgres-data:/var/lib/postgresql/data             # Not possible with compose due to folder permissions, use docker volume instead  \n      - \"postgres_data:/var/lib/postgresql/data\"\n    restart: unless-stopped\n\n  redis:\n    image: redis:6\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\n  celery-beat:\n    container_name: nautobot_celery_beat\n    image: *shared_image\n    command: nautobot-server celery beat\n    depends_on:\n      nautobot:\n        condition: \"service_healthy\"\n    volumes:\n      - nautobot_config:/opt/nautobot/\n    environment:\n      - NAUTOBOT_DB_HOST=postgres\n      - NAUTOBOT_DB_PORT=5432\n      - NAUTOBOT_DB_NAME=nautobot\n      - NAUTOBOT_DB_USER=nautobot\n      - NAUTOBOT_DB_PASSWORD=nautobotpassword\n      - NAUTOBOT_REDIS_HOST=redis\n      - NAUTOBOT_REDIS_PORT=6379      \n      - NAUTOBOT_CELERY_BROKER_URL=redis://redis:6379/0\n      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py\n\n  celery-worker-1:\n    image: *shared_image\n    container_name: nautobot_celery_worker_1\n    command: nautobot-server celery worker --concurrency=4\n    depends_on:\n      nautobot:\n        condition: \"service_healthy\"\n    healthcheck:\n      interval: \"30s\"\n      timeout: \"10s\"\n      start_period: \"30s\"\n      retries: 3\n      test:\n        [\n          \"CMD\",\n          \"bash\",\n          \"-c\",\n          \"nautobot-server celery inspect ping --destination celery@$$HOSTNAME\"  ## $$ because of docker-compose\n        ]\n    volumes:\n      - nautobot_config:/opt/nautobot/\n    environment:\n      - NAUTOBOT_DB_HOST=postgres\n      - NAUTOBOT_DB_PORT=5432\n      - NAUTOBOT_DB_NAME=nautobot\n      - NAUTOBOT_DB_USER=nautobot\n      - NAUTOBOT_DB_PASSWORD=nautobotpassword\n      - NAUTOBOT_REDIS_HOST=redis\n      - NAUTOBOT_REDIS_PORT=6379      \n      - NAUTOBOT_CELERY_BROKER_URL=redis://redis:6379/0\n      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py\n\n\nvolumes:\n  nautobot_config: {}\n  postgres_data: {}\n  redis_data: {}\n</code></pre>"},{"location":"tutorials/install_nautobot_in_docker/#step-3-configure-environment-variables","title":"Step 3: Configure Environment Variables","text":"<p>Create a <code>.env</code> file with your production settings:</p> <pre><code># Database Configuration\nPOSTGRES_DB=nautobot\nPOSTGRES_USER=nautobot\nPOSTGRES_PASSWORD=your_secure_password_here\nPOSTGRES_HOST=db\n\n# Redis Configuration\nREDIS_HOST=redis\nREDIS_PORT=6379\n\n# Nautobot Configuration\nNAUTOBOT_SECRET_KEY=your_secret_key_here\nNAUTOBOT_ALLOWED_HOSTS=your_domain.com,localhost\nNAUTOBOT_DEBUG=False\nNAUTOBOT_TIME_ZONE=UTC\n\n# Email Configuration (optional)\nEMAIL_HOST=smtp.your_provider.com\nEMAIL_PORT=587\nEMAIL_USERNAME=your_email@domain.com\nEMAIL_PASSWORD=your_email_password\nEMAIL_USE_TLS=True\n</code></pre>"},{"location":"tutorials/install_nautobot_in_docker/#step-4-generate-secret-key","title":"Step 4: Generate Secret Key","text":"<p>Generate a secure secret key for Nautobot:</p> <pre><code>python3 -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\"\n</code></pre> <p>Replace <code>your_secret_key_here</code> in the <code>.env</code> file with the generated key.</p>"},{"location":"tutorials/install_nautobot_in_docker/#step-5-deploy-with-docker-compose","title":"Step 5: Deploy with Docker Compose","text":"<pre><code># Start the services\ndocker-compose up -d\n\n# Check service status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f\n</code></pre>"},{"location":"tutorials/install_nautobot_in_docker/#step-6-initialize-nautobot","title":"Step 6: Initialize Nautobot","text":"<pre><code># Create a superuser\ndocker-compose exec nautobot nautobot-server createsuperuser\n\n# Run initial migrations\ndocker-compose exec nautobot nautobot-server migrate\n\n# Collect static files\ndocker-compose exec nautobot nautobot-server collectstatic --no-input\n</code></pre>"},{"location":"tutorials/install_nautobot_in_docker/#step-7-access-nautobot","title":"Step 7: Access Nautobot","text":"<p>Navigate to <code>http://your_domain.com</code> or <code>http://localhost:8080</code> to access your Nautobot instance.</p>"},{"location":"tutorials/install_nautobot_in_docker/#method-2-ansible-deployment","title":"Method 2: Ansible Deployment","text":"<p>This method uses Ansible to automate the deployment of Nautobot with Docker. It's ideal for repeatable, scalable, and production-grade installations.</p> <p>Prerequisites: - Ansible installed on your control machine (<code>pip install ansible</code>) - SSH access to your target server(s) - The Ansible roles <code>bsmeding.docker</code> and <code>bsmeding.nautobot_docker</code> (see below) - Your target server(s) should be accessible via SSH and have Python installed</p> <p>Install the required Ansible roles from Ansible Galaxy:</p> <pre><code>ansible-galaxy role install bsmeding.docker bsmeding.nautobot_docker\n</code></pre>"},{"location":"tutorials/install_nautobot_in_docker/#step-1-clone-the-ansible-role","title":"Step 1: Clone the Ansible Role","text":"<pre><code>git clone https://github.com/bsmeding/ansible_role_nautobot_docker.git\ncd ansible_role_nautobot_docker\n</code></pre>"},{"location":"tutorials/install_nautobot_in_docker/#step-2-create-inventory-file","title":"Step 2: Create Inventory File","text":"<p>Create an <code>inventory.yml</code> file:</p> <pre><code>all:\n  children:\n    nautobot_servers:\n      hosts:\n        your_server:\n          ansible_host: your_server_ip\n          ansible_user: your_ssh_user\n          ansible_ssh_private_key_file: ~/.ssh/your_key\n</code></pre>"},{"location":"tutorials/install_nautobot_in_docker/#step-3-create-playbook","title":"Step 3: Create Playbook","text":"<p>Create a <code>deploy_nautobot.yml</code> playbook:</p> <pre><code>---\n- name: Install Nautobot\n  hosts: nautobot_servers\n  gather_facts: true\n  become: yes\n  vars:\n    nautobot_version: \"latest\"\n    nautobot_secret_key: \"your_secret_key_here\"\n    nautobot_allowed_hosts: \"your_domain.com,localhost\"\n    nautobot_debug: false\n    nautobot_time_zone: \"UTC\"\n\n    # Database configuration\n    postgres_db: \"nautobot\"\n    postgres_user: \"nautobot\"\n    postgres_password: \"your_secure_password_here\"\n\n    # Redis configuration\n    redis_host: \"redis\"\n    redis_port: 6379\n\n    # Email configuration (optional)\n    email_host: \"smtp.your_provider.com\"\n    email_port: 587\n    email_username: \"your_email@domain.com\"\n    email_password: \"your_email_password\"\n    email_use_tls: true\n\n    # Docker configuration\n    docker_compose_version: \"2.20.0\"\n    nautobot_port: 8080\n\n  tasks:\n    - name: Check if Docker is installed\n      include_role:\n        name: bsmeding.docker\n\n    - name: Check if Nautobot is installed\n      include_role:\n        name: bsmeding.nautobot_docker\n</code></pre>"},{"location":"tutorials/linux_basics/","title":"Basic Linux Commands for Development","text":"<p>As a developer, understanding essential Linux commands is crucial. Whether you're managing files, setting up Python environments, or working with directories, these commands will help you get started.</p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#file-and-directory-management","title":"\ud83d\udcc1 File and Directory Management","text":"","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#list-files-and-directories","title":"List Files and Directories","text":"<p>List files in the current directory: <pre><code>ls\n</code></pre> Common options: - <code>ls -l</code> : Long format listing - <code>ls -a</code> : Show hidden files</p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#create-and-remove-directories","title":"Create and Remove Directories","text":"<p>Create a new directory: <pre><code>mkdir directory_name\n</code></pre> Remove an empty directory: <pre><code>rmdir directory_name\n</code></pre> Remove a non-empty directory: <pre><code>rm -r directory_name\n</code></pre></p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#navigate-between-directories","title":"Navigate Between Directories","text":"<p>Change directory: <pre><code>cd directory_name\n</code></pre> Go up one level: <pre><code>cd ..\n</code></pre> Show current directory: <pre><code>pwd\n</code></pre></p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#copy-move-and-delete-files","title":"Copy, Move, and Delete Files","text":"<p>Copy a file: <pre><code>cp source destination\n</code></pre> Copy a directory: <pre><code>cp -r source_dir destination_dir\n</code></pre> Move or rename a file or directory: <pre><code>mv source destination\n</code></pre> Delete a file: <pre><code>rm file_name\n</code></pre></p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#python-and-pip-basics","title":"\ud83d\udc0d Python and Pip Basics","text":"","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#check-python-version","title":"Check Python Version","text":"<pre><code>python3 --version\n</code></pre>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#install-pip-python-package-manager","title":"Install pip (Python Package Manager)","text":"<p>Debian/Ubuntu: <pre><code>sudo apt install python3-pip\n</code></pre> RedHat/CentOS: <pre><code>sudo yum install python3-pip\n</code></pre></p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#manage-python-packages","title":"Manage Python Packages","text":"<p>Install a package: <pre><code>pip install package_name\n</code></pre> List installed packages: <pre><code>pip list\n</code></pre> Uninstall a package: <pre><code>pip uninstall package_name\n</code></pre></p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#virtual-environments","title":"\ud83c\udfd7\ufe0f Virtual Environments","text":"<p>Virtual environments isolate your project's dependencies from the global Python environment. This helps avoid conflicts and makes collaboration easier.</p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#using-venv-python-33","title":"Using venv (Python 3.3+)","text":"<p>Create a virtual environment: <pre><code>python3 -m venv env\n</code></pre> Activate it: <pre><code>source env/bin/activate\n</code></pre> Install dependencies: <pre><code>pip install package_name\n</code></pre> Deactivate when done: <pre><code>deactivate\n</code></pre></p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#using-virtualenv-alternative","title":"Using virtualenv (Alternative)","text":"<p>Install virtualenv: <pre><code>pip install virtualenv\n</code></pre> Create a virtual environment: <pre><code>virtualenv env_name\n</code></pre> Activate: <pre><code>source env_name/bin/activate\n</code></pre> Deactivate: <pre><code>deactivate\n</code></pre></p> <p>Tip: Use a <code>requirements.txt</code> file to share dependencies: <pre><code>pip freeze &gt; requirements.txt\npip install -r requirements.txt\n</code></pre></p> <p>More on Python virtual environments</p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#file-permissions-and-ownership","title":"\ud83d\udd12 File Permissions and Ownership","text":"","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#change-file-permissions","title":"Change File Permissions","text":"<p>Make a file executable: <pre><code>chmod +x script.sh\n</code></pre> Set specific permissions: <pre><code>chmod 644 file.txt\n</code></pre></p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#change-file-ownership","title":"Change File Ownership","text":"<p>Change owner and group: <pre><code>sudo chown user:group file_name\n</code></pre></p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#package-management-debianubuntu","title":"\ud83d\udce6 Package Management (Debian/Ubuntu)","text":"<p>Update package lists: <pre><code>sudo apt update\n</code></pre> Upgrade installed packages: <pre><code>sudo apt upgrade\n</code></pre> Install a package: <pre><code>sudo apt install package_name\n</code></pre> Remove a package: <pre><code>sudo apt remove package_name\n</code></pre></p> <p>More on apt package management</p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/linux_basics/#wrapping-up","title":"\u2705 Wrapping Up","text":"<p>These commands are foundational for Linux-based development environments. Whether you're organizing files, managing Python projects, or working with packages, mastering these commands will make your workflow more efficient.</p> <p>Practice them, and you'll become more comfortable with Linux in no time!</p>","tags":["linux","basics","tutorial"]},{"location":"tutorials/synology_install_docker_compose/","title":"Install Docker Compose on Synology NAS","text":"<p>This guide walks you through installing Docker Compose on your Synology NAS using SSH. Docker Compose is a tool for defining and running multi-container Docker applications.</p>","tags":["synology","docker-compose","tutorial"]},{"location":"tutorials/synology_install_docker_compose/#prerequisites","title":"\ud83d\udce6 Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>A Synology NAS with Docker installed</li> <li>SSH access enabled on your Synology device (see Synology documentation)</li> <li>Administrator privileges</li> </ul>","tags":["synology","docker-compose","tutorial"]},{"location":"tutorials/synology_install_docker_compose/#installation-steps","title":"\ud83d\udee0 Installation Steps","text":"<ol> <li>Login to your Synology NAS via SSH</li> <li>Use a terminal application (e.g., Terminal on macOS/Linux, PuTTY on Windows)</li> <li> <p>Connect using your NAS IP address and your admin credentials</p> </li> <li> <p>Switch to the root user:</p> </li> </ol> <pre><code>sudo -i\n</code></pre> <ol> <li>Download Docker Compose binary:</li> </ol> <pre><code>curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" \\\n  -o /usr/local/bin/docker-compose\n</code></pre> <ol> <li>Make the binary executable:</li> </ol> <pre><code>chmod +x /usr/local/bin/docker-compose\n</code></pre> <ol> <li>Verify the installation:</li> </ol> <pre><code>docker-compose version\n</code></pre> <p>You should see the installed Docker Compose version.</p>","tags":["synology","docker-compose","tutorial"]},{"location":"tutorials/synology_install_docker_compose/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ul> <li>Start using <code>docker-compose.yml</code> files to manage multi-container applications.</li> <li>Check the Docker Compose documentation for configuration options and examples.</li> </ul>","tags":["synology","docker-compose","tutorial"]},{"location":"tutorials/synology_install_docker_compose/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Docker Compose Documentation</li> <li>Synology SSH Access Guide</li> </ul>","tags":["synology","docker-compose","tutorial"]},{"location":"tutorials/vagrant_install/","title":"Vagrant Installation Guide","text":"<p>This guide walks you through installing Vagrant on your local machine. Vagrant is a tool for building and managing virtual machine environments in a single workflow.</p>","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#prerequisites","title":"\ud83d\udce6 Prerequisites","text":"<p>Before installing Vagrant, make sure you have:</p> <ul> <li>VirtualBox or another supported provider</li> <li>A supported operating system:</li> <li>Windows</li> <li>macOS</li> <li>Linux</li> </ul>","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#installation-steps","title":"\ud83d\udee0 Installation Steps","text":"","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#windows","title":"Windows","text":"<ol> <li>Download the Vagrant installer from the official Vagrant website.</li> <li>Run the installer and follow the prompts.</li> <li>After installation, restart your system (recommended).</li> <li>Verify the installation:</li> </ol> <pre><code>vagrant --version\n</code></pre>","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#macos","title":"macOS","text":"","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#using-homebrew-recommended","title":"Using Homebrew (Recommended)","text":"<pre><code>brew install --cask vagrant\n</code></pre>","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#manual-install","title":"Manual Install","text":"<ol> <li>Download the macOS <code>.dmg</code> installer from the Vagrant downloads page.</li> <li>Open the file and drag Vagrant into your Applications folder.</li> <li>Verify:</li> </ol> <pre><code>vagrant --version\n</code></pre>","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#linux-debianubuntu","title":"Linux (Debian/Ubuntu)","text":"<pre><code>sudo apt update\nsudo apt install -y vagrant\n</code></pre> <p>Or download the <code>.deb</code> file from downloads and install:</p> <pre><code>sudo dpkg -i vagrant_x.x.x_x86_64.deb\n</code></pre>","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#verifying-installation","title":"\u2705 Verifying Installation","text":"<p>Run the following command in your terminal:</p> <pre><code>vagrant --version\n</code></pre> <p>You should see the installed version number.</p>","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ul> <li>Learn how to initialize your first Vagrant project. [TODO: Next chapter]</li> <li>Check the Vagrantfile reference for configuration options.</li> </ul>","tags":["vagrant","virtualization","tutorial"]},{"location":"tutorials/vagrant_install/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Vagrant Documentation</li> <li>Vagrant GitHub Repository</li> </ul>","tags":["vagrant","virtualization","tutorial"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/page/2/","title":"Welcome to the Blog","text":""},{"location":"blog/page/3/","title":"Welcome to the Blog","text":""},{"location":"blog/page/4/","title":"Welcome to the Blog","text":""},{"location":"blog/page/5/","title":"Welcome to the Blog","text":""},{"location":"blog/page/6/","title":"Welcome to the Blog","text":""},{"location":"blog/page/7/","title":"Welcome to the Blog","text":""},{"location":"blog/page/8/","title":"Welcome to the Blog","text":""},{"location":"blog/page/9/","title":"Welcome to the Blog","text":""},{"location":"blog/page/10/","title":"Welcome to the Blog","text":""},{"location":"blog/page/11/","title":"Welcome to the Blog","text":""},{"location":"blog/page/12/","title":"Welcome to the Blog","text":""},{"location":"blog/page/13/","title":"Welcome to the Blog","text":""},{"location":"blog/page/14/","title":"Welcome to the Blog","text":""},{"location":"blog/archive/2025/page/2/","title":"2025","text":""},{"location":"blog/archive/2025/page/3/","title":"2025","text":""},{"location":"blog/archive/2025/page/4/","title":"2025","text":""},{"location":"blog/archive/2025/page/5/","title":"2025","text":""},{"location":"blog/archive/2025/page/6/","title":"2025","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"blog/archive/2024/page/3/","title":"2024","text":""},{"location":"blog/archive/2024/page/4/","title":"2024","text":""},{"location":"blog/archive/2024/page/5/","title":"2024","text":""},{"location":"blog/archive/2024/page/6/","title":"2024","text":""},{"location":"blog/archive/2023/page/2/","title":"2023","text":""},{"location":"blog/archive/2023/page/3/","title":"2023","text":""}]}